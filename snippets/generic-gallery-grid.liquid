{% comment %}
  Generic Grid Layout Snippet
  Usage: {% render 'generic-gallery-grid', content: content_string, show_layout_toggle: true %}

  Displays a grid layout with optional layout toggle and custom content
  Parameters:
  - content: String containing the grid content (required)
  - show_layout_toggle: Boolean to show/hide layout toggle (optional, default: true)
  - show_filters: Boolean to show/hide filters button (optional, default: true)
  - products: Array of products for filtering (optional)
{% endcomment %}

<!-- Layout Toggle (only show when show_layout_toggle is true) -->
{% if show_layout_toggle != false %}
  <div
    class="flex items-center pl-2 pr-4 lg:pl-10 lg:pr-12 py-2 w-full  sticky top-15  bg-white z-50  justify-between mt-15  "
    x-data="galleryGrid()"
  >
    <div class="flex h-full items-center gap-4">
      <!-- Layout Toggle -->
      <div class="flex h-full items-center gap-2">
        <div class="flex gap-3">
          <button @click="layoutOption = 1" class="p-2">
            <svg
              class="size-5 cursor-pointer  transition-opacity"
              :class="layoutOption == 1 ? ' opacity-100' : ' opacity-40'"
              viewBox="0 0 24 24"
              fill="none"
            >
              <path fill-rule="evenodd" clip-rule="evenodd" d="M19 5H5v14h14V5ZM3 3v18h18V3H3Z" fill="currentColor"/>
            </svg>
          </button>
          <button @click="layoutOption = 2" class="p-2">
            <svg
              class="size-5 cursor-pointer  transition-opacity"
              :class="layoutOption == 2 ? ' opacity-100' : ' opacity-40'"
              viewBox="0 0 24 24"
              fill="none"
            >
              <path fill-rule="evenodd" clip-rule="evenodd" d="M13 5h6v14h-6V5Zm-2-2h10v18H3V3h8Zm0 16H5V5h6v14Z" fill="currentColor"/>
            </svg>
          </button>
          <button @click="layoutOption = 3" class="p-2">
            <svg
              class="size-5 cursor-pointer  transition-opacity"
              :class="layoutOption == 3 ? ' opacity-100' : ' opacity-40'"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
            >
              <path d="M 10.83 16.17 L 15.83 16.17 L 15.83 11.17 L 10.83 11.17 Z M 10.833 9.167 L 15.833 9.167 L 15.833 4.167 L 10.833 4.167 Z M 17.5 2.5 L 17.5 17.5 L 2.5 17.5 L 2.5 2.5 Z M 9.167 4.167 L 4.167 4.167 L 4.167 9.167 L 9.167 9.167 Z M 9.167 11.167 L 4.167 11.167 L 4.167 16.167 L 9.167 16.167 Z" fill="rgba(0,0,0,1)"/>
            </svg>
          </button>
        </div>
      </div>
    </div>

    <!-- Filters Button and Results Counter (only show when show_filters is true) -->
    {% if show_filters != false %}
      <div class="flex items-center gap-3">
        <!-- Results Counter -->
        <div class="flex items-start gap-1">
          <span class="body-sm font-medium" x-text="visibleResultsCount">0</span>
          <span class="body-sm font-medium">Resultados</span>
        </div>

        <div class="h-[16px] w-[1px] bg-black/10">

        </div>

        <!-- Filter Button -->
        <button
          @click="window.dispatchEvent(new CustomEvent('filter:open'))"
          class="flex items-center gap-1 p-1 lg:py-2 lg:pr-3 lg:pl-2 lg:border lg:boder-black lg:rounded-full  justify-center cursor-pointer  transition-colors"
        >
          {% render 'filter-icon', class: 'size-5' %}
          <p class="body-sm hidden lg:block">Filtros</p>
        </button>
      </div>
    {% endif %}
  </div>
{% endif %}

<!-- Content Grid -->
<div class="">
  <div
    id="generic-gallery-grid"
    class="grid  w-full gap-0.5 lg:gap-1 transition-all duration-300"
    :class="
      {
        'grid-cols-1 lg:grid-cols-3 gap-y-6': layoutOption === 1,
        'grid-cols-2 lg:grid-cols-4 gap-y-6': layoutOption === 2,
        'grid-cols-3 lg:grid-cols-6': layoutOption === 3
      }
    "
  >
    {{ content }}
  </div>
</div>

<script>
  function galleryGrid() {
    return {
      visibleResultsCount: 0,

      init() {
        // Initial count with delay to ensure DOM is ready
        setTimeout(() => {
          this.updateResultsCount();
        }, 100);

        // Listen for filter changes
        window.addEventListener('filters:applied', () => {
          this.$nextTick(() => {
            this.updateResultsCount();
          });
        });

        // Also listen for general filter changes
        window.addEventListener('filter:changed', () => {
          this.$nextTick(() => {
            this.updateResultsCount();
          });
        });

        // Update count when layout changes
        this.$watch('layoutOption', () => {
          this.$nextTick(() => {
            this.updateResultsCount();
          });
        });
      },

      updateResultsCount() {
        // Count visible items in the grid
        const grid = document.getElementById('generic-gallery-grid');
        if (grid) {
          let count = 0;

          // Count all direct children of the grid
          const allItems = grid.children;
          for (let i = 0; i < allItems.length; i++) {
            const item = allItems[i];
            const style = window.getComputedStyle(item);

            // Check if item is visible (not hidden by CSS or inline styles)
            const isVisible = style.display !== 'none' && style.visibility !== 'hidden' && style.opacity !== '0';

            const hasInlineStyle = item.hasAttribute('style');
            const isHiddenInline = hasInlineStyle && item.getAttribute('style').includes('display: none');

            if (isVisible && !isHiddenInline) {
              count++;
            }
          }

          this.visibleResultsCount = count;
          console.log('Results count updated:', count);
        }
      },
    };
  }
</script>
