{% comment %}
  Product Page Section - Comprehensive product display
  Features:
  - Image gallery with navigation
  - Product information and pricing
  - Color swatches (squared design)
  - Size selector (rounded with border)
  - Add to cart functionality
  - Responsive design for mobile and desktop
{% endcomment %}

<div
  class="product-page bg-white mt-48"
  x-data="productPage({{ product.id }}, {{ section.settings.delivery_days | default: 7 }})"
>
  <div class="w-full sm:px-6 lg:px-8 py-8">
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 lg:gap-12">
      <!-- Product Images Section - 2/3 width -->
      <div class="product-images-section lg:col-span-2">
        <!-- Desktop: Product Images Grid -->
        <div class="hidden lg:grid grid-cols-2 gap-1">
          {% for image in product.images %}
            <div class="aspect-[3/4] overflow-hidden bg-gray-100">
              <img
                src="{{ image | image_url: width: 600 }}"
                alt="{{ product.title }} - Image {{ forloop.index }}"
                class="w-full h-full object-cover"
                width="600"
                height="600"
                loading="eager"
              >
            </div>
          {% endfor %}
        </div>

        <!-- Mobile: Product Images Carousel -->
        <div class="lg:hidden relative">
          {% if product.images.size > 1 %}
            <div
              class="product-mobile-carousel swiper-product-mobile-{{ product.id }} w-full aspect-[3/4]"
              data-product-id="{{ product.id }}"
              data-carousel-type="product-mobile"
              id="product-mobile-carousel-{{ product.id }}"
            >
              <div class="swiper-wrapper h-full">
                {% for image in product.images %}
                  <div class="swiper-slide w-full h-full flex-shrink-0">
                    <img
                      src="{{ image | image_url: width: 600 }}"
                      alt="{{ product.title }} - Image {{ forloop.index }}"
                      class="w-full h-full object-cover"
                      width="600"
                      height="600"
                      loading="eager"
                    >
                  </div>
                {% endfor %}
              </div>

              <!-- Mobile Slide Counter -->
              {% if section.settings.show_slide_counter %}
                <div class="absolute bottom-4 left-4 bg-black/10 text-white px-3 py-1 rounded-full text-sm font-medium z-10">
                  <span x-text="currentSlide + 1"></span>/<span x-text="totalSlides"></span>
                </div>
              {% endif %}

              <!-- Mobile Navigation Arrows -->
              {% if section.settings.show_mobile_navigation %}
                <div class="absolute inset-0 pointer-events-none">
                  <button
                    class="mobile-prev absolute left-2 top-1/2 -translate-y-1/2 w-10 h-10 bg-black/10 border border-white flex items-center justify-center shadow-md opacity-100  transition-all duration-200 z-50 pointer-events-auto cursor-pointer"
                    data-carousel-id="product-mobile-carousel-{{ product.id }}"
                    type="button"
                  >
                    <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                    </svg>
                  </button>
                  <button
                    class="mobile-next absolute right-2 top-1/2 -translate-y-1/2 w-10 h-10 bg-black/10 border border-white flex items-center justify-center shadow-md opacity-100 transition-all duration-200 z-50 pointer-events-auto cursor-pointer"
                    data-carousel-id="product-mobile-carousel-{{ product.id }}"
                    type="button"
                  >
                    <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                    </svg>
                  </button>
                </div>
              {% endif %}
            </div>
          {% else %}
            <!-- Single Image for Mobile -->
            <div class="aspect-square overflow-hidden bg-gray-100">
              <img
                src="{{ product.featured_image | image_url: width: 600 }}"
                alt="{{ product.title }}"
                class="w-full h-full object-cover"
                width="600"
                height="600"
                loading="eager"
              >
            </div>
          {% endif %}
        </div>
      </div>

      <!-- Product Information Section -->
      <div class="product-info-section space-y-6 px-4">
        <!-- Product Title and Price -->
        <div class="space-y-2">
          <div class="flex items-center gap-2 justify-between">
            <h1 class="text-2xl font-bold text-gray-900">{{ product.title }}</h1>
            {{product.metafields.globo--filter--product_recommendation.complementary_products.value}}
            <div class="flex items-center gap-3">
              <span class="text-2xl font-bold text-gray-900">${{ product.price | money_without_currency }}</span>
              {% if product.compare_at_price > product.price %}
                <span class="text-sm text-gray-500 line-through">
                  ${{ product.compare_at_price | money_without_currency }}
                </span>
              {% endif %}
            </div>
          </div>

          <!-- Star Rating -->
          <div class="flex items-center gap-2">
            <div class="flex text-yellow-400">
              {% assign rating = product.metafields.reviews.rating.value | default: 4.8 %}
              {% assign full_stars = rating | floor %}
              {% assign next_star = full_stars | plus: 1 %}
              {% for i in (1..5) %}
                {% if i <= full_stars %}
                  <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                  </svg>
                {% elsif i == next_star and rating > full_stars %}
                  <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                    <defs>
                      <linearGradient id="half-star-product-{{ product.id }}-{{ i }}">
                        <stop offset="50%" stop-color="currentColor"/>
                        <stop offset="50%" stop-color="#e5e7eb"/>
                      </linearGradient>
                    </defs>
                    <path fill="url(#half-star-product-{{ product.id }}-{{ i }})" d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                  </svg>
                {% else %}
                  <svg class="w-5 h-5" fill="#e5e7eb" viewBox="0 0 24 24">
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                  </svg>
                {% endif %}
              {% endfor %}
            </div>
            <span class="text-sm text-gray-600"
              >({{ rating }}) {{ product.metafields.reviews.rating_count.value | default: 45 }} reseñas</span
            >
          </div>

          <!-- Price -->
        </div>

        <!-- Color Selection -->
        <div
          class="space-y-3 transition-all duration-300"
          :class="purchaseOption === 'duo' ? 'opacity-40 pointer-events-none' : ''"
        >
          {% render 'color-selector',
            product: product,
            selected_color_variable: 'selectedColor',
            click_function: 'selectColor',
            show_main_label: true,
            show_wishlist: true
          %}
        </div>

        <!-- Size Selection -->
        <div
          class="space-y-3 transition-all duration-300"
          :class="purchaseOption === 'duo' ? 'opacity-40 pointer-events-none' : ''"
        >
          {% render 'size-selector',
            product: product,
            selected_size_variable: 'selectedSize',
            click_function: 'selectSize',
            show_main_label: true,
            show_size_guide: true
          %}
        </div>

        <!-- Purchase Options -->
        <!-- Single Purchase Option -->
        <label class="flex items-center gap-3 cursor-pointer p-4 border border-gray-900  bg-white hover:bg-gray-50 transition-colors">
          <input
            type="radio"
            name="purchase_option"
            value="single"
            x-model="purchaseOption"
            class="w-4 h-4 "
          >
          <div class="flex-1">
            <div class="text-xl font-bold text-gray-900 ">
              {{ section.settings.single_option_title | default: 'Único' }}
            </div>
            <div class="leading-tight text-lg text-gray-600">
              {{ section.settings.single_option_subtitle | default: 'Standard price' }}
            </div>
          </div>
          <span class="text-xl  text-gray-900 ">${{ product.price | money_without_currency }}</span>
        </label>

        <div class="border border-gray-900 p-4  bg-white hover:bg-gray-50 transition-colors relative">
          <!-- Duo Purchase Option -->
          <label class="flex items-center gap-3 cursor-pointer ">
            <input
              type="radio"
              name="purchase_option"
              value="duo"
              x-model="purchaseOption"
              class="w-4 h-4 "
            >
            <div class="flex-1">
              <div class="flex items-center gap-2">
                <span class="text-lg font-bold text-gray-900">
                  {{- section.settings.duo_option_title | default: 'Duo' -}}
                </span>
                <span class="bg-green text-white text-sm  px-4 py-2 rounded-sm font-bold absolute -top-4 -right-1">
                  {{- section.settings.best_value_text | default: 'BEST VALUE' -}}
                </span>
              </div>
              <div class="leading-tight text-lg text-gray-600">
                {{ section.settings.duo_option_subtitle | default: 'Compra más y ahorra' }}
              </div>
            </div>
            {% render 'duo-price-display',
              product: product,
              discount_percentage: section.settings.duo_discount_percentage
            %}
          </label>
          <!-- Duo Selection Interface -->
          <div x-show="purchaseOption === 'duo'" x-transition class="space-y-6  divide-y divide-gray-400">
            <!-- Product 1 Selection -->
            {% render 'duo-product-selector', product: product, product_number: 1, product_title: 'Primera prenda' %}

            <!-- Product 2 Selection -->
            {% render 'duo-product-selector', product: product, product_number: 2, product_title: 'Segunda prenda' %}
          </div>
        </div>

        <div class="space-y-2">
          <!-- Availability and Delivery -->
          <div class="w-full flex justify-between items-center">
            <div class="flex items-center gap-2">
              <div class="w-2 h-2 bg-green-500 rounded-full"></div>
              <span class="font-medium text-gray-800">
                {{- section.settings.availability_text | default: 'Aún disponibles' -}}
              </span>
            </div>
            <div class="flex items-center gap-2 text-gray-800 font-medium">
              <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              <span x-text="deliveryDate"></span>
            </div>
          </div>
          <!-- Add to Cart Button -->
          <button
            @click="addToCart"
            class="w-full bg-primary text-white py-4 px-6  font-semibold text-lg hover:bg-primary/80 transition-colors duration-200"
          >
            {{ section.settings.cta_button_text | default: 'Paga de forma segura' }}
          </button>
        </div>
        <!-- Shipping and Returns -->
        <div class="space-y-2 text-sm text-gray-600">
          <div class="flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"/>
            </svg>
            <span>{{ section.settings.free_shipping_text | default: 'Envío gratis En ordenes +500.000' }}</span>
          </div>
          <div class="flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
            </svg>
            <span>{{ section.settings.free_returns_text | default: 'Devoluciones gratis y intercambiables' }}</span>
          </div>
        </div>

        <!-- See it in Action -->
        <div class="space-y-3">
          <h3 class="text-lg font-semibold text-gray-900">Miralo En Acción</h3>
          <div class="grid grid-cols-3 gap-3">
            <div class="aspect-video bg-gray-100 rounded-lg flex items-center justify-center">
              <span class="text-sm text-gray-500">@What's New</span>
            </div>
            <div class="aspect-video bg-gray-100 rounded-lg flex items-center justify-center">
              <span class="text-sm text-gray-500">@Styling Elements</span>
            </div>
            <div class="aspect-video bg-gray-100 rounded-lg flex items-center justify-center">
              <span class="text-sm text-gray-500">@Product Demo</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    {% if section.blocks.size > 0 %}
      {% assign accordion_blocks = section.blocks | where: 'type', 'accordion_item' %}
      {% if accordion_blocks.size > 0 %}
        <div class="product-accordion w-full lg:w-2/3  mt-8 px-4 lg:px-0">
          {% render 'accordion',
            items: accordion_blocks,
            accordion_id: 'product-accordion',
            title_color: '#1f2937',
            answer_color: '#374151'
          %}
        </div>
      {% endif %}
    {% endif %}
  </div>

  <!-- Product Gallery Blocks (Full Width) -->
  {% for block in section.blocks %}
    {% if block.type == 'product_gallery' %}
      <div class="product-gallery-block w-full" {{ block.shopify_attributes }}>
        {% render 'product-gallery', block: block, current_product: product %}
      </div>
    {% endif %}
  {% endfor %}
</div>

<script>
  function productPage(productId, deliveryDays = 7) {
    return {
      productId: productId,
      selectedVariantId: {{ product.selected_or_first_available_variant.id }},
      selectedColor: '{{ product.selected_or_first_available_variant.option1 }}',
      selectedSize: null,
      currentSlide: 0,
      totalSlides: {{ product.images.size }},
      isInWishlist: false,
      deliveryDate: '',
      purchaseOption: 'single',
      duoProduct1: {
        color: null,
        size: null,
        variantId: null
      },
      duoProduct2: {
        color: null,
        size: null,
        variantId: null
      },

      selectColor(color, imageUrl, variantId) {
        this.selectedColor = color;
        this.selectedVariantId = variantId;

        // Update the product image if a new image URL is provided
        if (imageUrl && imageUrl !== '') {
          // Find the first image in the grid and update it
          const firstImage = this.$el.querySelector('.product-images-section img');
          if (firstImage) {
            firstImage.src = imageUrl;
          }
        }
      },

      selectSize(size, variantId) {
        this.selectedSize = size;
        this.selectedVariantId = variantId;
      },

      selectDuoColor(productNumber, color, variantId) {
        if (productNumber === 1) {
          this.duoProduct1.color = color;
          this.duoProduct1.variantId = variantId;
        } else {
          this.duoProduct2.color = color;
          this.duoProduct2.variantId = variantId;
        }
      },

      selectDuoSize(productNumber, size, variantId) {
        if (productNumber === 1) {
          this.duoProduct1.size = size;
          // Find variant that matches both color and size for product 1
          const matchingVariant = this.findVariantBySizeAndColor(size, this.duoProduct1.color);
          this.duoProduct1.variantId = matchingVariant || variantId;
        } else {
          this.duoProduct2.size = size;
          // Find variant that matches both color and size for product 2
          const matchingVariant = this.findVariantBySizeAndColor(size, this.duoProduct2.color);
          this.duoProduct2.variantId = matchingVariant || variantId;
        }
      },

      goToSlide(index) {
        // This function is no longer needed with the grid layout
        // but kept for compatibility
      },

      async addToCart() {
        try {
          let items = [];

          if (this.purchaseOption === 'single') {
            // Single product purchase
            items = [{
              id: this.selectedVariantId,
              quantity: 1
            }];
          } else if (this.purchaseOption === 'duo') {
            // Duo purchase - validate both products are selected
            if (!this.duoProduct1.variantId || !this.duoProduct2.variantId) {
              alert('Por favor selecciona color y talla para ambas prendas');
              return;
            }

            items = [
              {
                id: this.duoProduct1.variantId,
                quantity: 1
              },
              {
                id: this.duoProduct2.variantId,
                quantity: 1
              }
            ];
          }

          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ items })
          });

          if (response.ok) {
            // Trigger cart update event
            this.$dispatch('cart:updated');

            // Open cart drawer
            this.$dispatch('cart:open');

            // Show success feedback
            this.showSuccessMessage();
          }
        } catch (error) {
          console.error('Error adding to cart:', error);
        }
      },

      showSuccessMessage() {
        // Create a temporary success message
        const message = document.createElement('div');
        message.className = 'fixed bottom-4 left-4 bg-green text-white px-4 py-2 rounded-lg shadow-lg z-50';
        message.textContent = 'Added to cart!';
        document.body.appendChild(message);

        // Remove after 2 seconds
        setTimeout(() => {
          document.body.removeChild(message);
        }, 2000);
      },

      toggleWishlist() {
        this.isInWishlist = !this.isInWishlist;
        // Here you would typically make an API call to add/remove from wishlist
      },

      findVariantBySizeAndColor(size, color) {
        // Get all variants from the product with their options
        const variants = [
          {% for variant in product.variants %}
            {
              id: {{ variant.id }},
              options: [{% for option in variant.options %}'{{ option }}'{% unless forloop.last %}, {% endunless %}{% endfor %}]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];

        // Find variant that matches both size and color
        const targetVariant = variants.find(variant =>
          variant.options.includes(size) && variant.options.includes(color)
        );

        return targetVariant ? targetVariant.id : null;
      },

      // Calculate delivery date
      calculateDeliveryDate() {
        const today = new Date();
        const deliveryDate = new Date(today);
        deliveryDate.setDate(today.getDate() + deliveryDays);
        
        const options = { 
          weekday: 'long', 
          day: 'numeric', 
          month: 'long' 
        };
        
        const spanishMonths = {
          'January': 'enero', 'February': 'febrero', 'March': 'marzo', 'April': 'abril',
          'May': 'mayo', 'June': 'junio', 'July': 'julio', 'August': 'agosto',
          'September': 'septiembre', 'October': 'octubre', 'November': 'noviembre', 'December': 'diciembre'
        };
        
        const spanishDays = {
          'Monday': 'lunes', 'Tuesday': 'martes', 'Wednesday': 'miércoles', 'Thursday': 'jueves',
          'Friday': 'viernes', 'Saturday': 'sábado', 'Sunday': 'domingo'
        };
        
        const dateString = deliveryDate.toLocaleDateString('en-US', options);
        const [weekday, month, day] = dateString.split(' ');
        
        this.deliveryDate = `Recibelo el ${spanishDays[weekday]} ${day} de ${spanishMonths[month]}`;
      },

      // Initialize product page
      init() {
        this.calculateDeliveryDate();
        this.initializeMobileCarousel();
      },

      // Initialize mobile carousel
      initializeMobileCarousel() {
        this.$nextTick(() => {
          const carouselElement = this.$el.querySelector('.product-mobile-carousel');
          if (carouselElement && typeof Swiper !== 'undefined') {
            // Check if this carousel is already initialized
            if (carouselElement.swiper) {
              return;
            }

            // Create swiper instance
            const swiperInstance = new Swiper(carouselElement, {
              slidesPerView: 1,
              spaceBetween: 0,
              allowTouchMove: true,
              grabCursor: true,
              navigation: {
                nextEl: carouselElement.querySelector('.mobile-next'),
                prevEl: carouselElement.querySelector('.mobile-prev'),
              }
            });

            // Function to update arrow states
            const updateArrowStates = () => {
              const prevArrow = carouselElement.querySelector('.mobile-prev');
              const nextArrow = carouselElement.querySelector('.mobile-next');

              if (prevArrow) {
                if (swiperInstance.isBeginning) {
                  prevArrow.style.opacity = '0.3';
                  prevArrow.style.cursor = 'not-allowed';
                  prevArrow.disabled = true;
                } else {
                  prevArrow.style.opacity = '1';
                  prevArrow.style.cursor = 'pointer';
                  prevArrow.disabled = false;
                }
              }

              if (nextArrow) {
                if (swiperInstance.isEnd) {
                  nextArrow.style.opacity = '0.3';
                  nextArrow.style.cursor = 'not-allowed';
                  nextArrow.disabled = true;
                } else {
                  nextArrow.style.opacity = '1';
                  nextArrow.style.cursor = 'pointer';
                  nextArrow.disabled = false;
                }
              }
            };

            // Set initial state and add event listeners
            swiperInstance.on('slideChange', () => {
              this.currentSlide = swiperInstance.activeIndex;
              updateArrowStates();
            });
            swiperInstance.on('reachBeginning', updateArrowStates);
            swiperInstance.on('reachEnd', updateArrowStates);

            // Initial state update
            setTimeout(updateArrowStates, 100);

            // Store the swiper instance on the element to avoid conflicts
            carouselElement.swiper = swiperInstance;
          }
        });
      }
    }
  }
</script>

{% schema %}
{
  "name": "Product Page",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "header",
      "content": "Delivery Settings"
    },
    {
      "type": "range",
      "id": "delivery_days",
      "min": 1,
      "max": 30,
      "step": 1,
      "label": "Delivery Days",
      "default": 7,
      "info": "Number of days to add to current date for delivery estimation"
    },
    {
      "type": "text",
      "id": "availability_text",
      "label": "Availability Text",
      "default": "Aún disponibles",
      "info": "Text to display for product availability"
    },
    {
      "type": "header",
      "content": "Purchase Options"
    },
    {
      "type": "text",
      "id": "single_option_title",
      "label": "Single Option Title",
      "default": "Unico",
      "info": "Title for single product purchase option"
    },
    {
      "type": "text",
      "id": "single_option_subtitle",
      "label": "Single Option Subtitle",
      "default": "Standard price",
      "info": "Subtitle for single product purchase option"
    },
    {
      "type": "text",
      "id": "duo_option_title",
      "label": "Duo Option Title",
      "default": "Duo",
      "info": "Title for duo/bundle purchase option"
    },
    {
      "type": "text",
      "id": "duo_option_subtitle",
      "label": "Duo Option Subtitle",
      "default": "Compra más y ahorra",
      "info": "Subtitle for duo/bundle purchase option"
    },
    {
      "type": "text",
      "id": "best_value_text",
      "label": "Best Value Text",
      "default": "BEST VALUE",
      "info": "Text for best value badge"
    },
    {
      "type": "range",
      "id": "duo_discount_percentage",
      "min": 1,
      "max": 50,
      "step": 1,
      "label": "Descuento Segunda Prenda (%)",
      "default": 5,
      "info": "Porcentaje de descuento aplicado a la segunda prenda en compras duo (ej: 5 = 5% de descuento)"
    },
    {
      "type": "header",
      "content": "Shipping & Returns"
    },
    {
      "type": "text",
      "id": "free_shipping_text",
      "label": "Free Shipping Text",
      "default": "Envío gratis En ordenes +500.000",
      "info": "Text for free shipping information"
    },
    {
      "type": "text",
      "id": "free_returns_text",
      "label": "Free Returns Text",
      "default": "Devoluciones gratis y intercambiables",
      "info": "Text for free returns information"
    },
    {
      "type": "header",
      "content": "Call to Action"
    },
    {
      "type": "text",
      "id": "cta_button_text",
      "label": "Add to Cart Button Text",
      "default": "Paga de forma segura",
      "info": "Text for the main call-to-action button"
    },
    {
      "type": "header",
      "content": "Mobile Carousel"
    },
    {
      "type": "checkbox",
      "id": "show_slide_counter",
      "label": "Show Slide Counter",
      "default": true,
      "info": "Display slide counter on mobile carousel"
    },
    {
      "type": "checkbox",
      "id": "show_mobile_navigation",
      "label": "Show Mobile Navigation Arrows",
      "default": true,
      "info": "Display navigation arrows on mobile carousel"
    }
  ],
  "blocks": [
    {
      "type": "accordion_item",
      "name": "Accordion Item",
      "settings": [
        {
          "type": "text",
          "id": "question",
          "label": "Question",
          "default": "Detalles del producto"
        },
        {
          "type": "richtext",
          "id": "answer",
          "label": "Answer",
          "default": "<p>Información detallada sobre el producto...</p>"
        }
      ]
    },
    {
      "type": "product_gallery",
      "name": "Product Gallery",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Gallery Title",
          "default": "Combínalo Con"
        },
        {
          "type": "range",
          "id": "products_limit",
          "min": 2,
          "max": 8,
          "step": 1,
          "label": "Number of Products",
          "default": 4,
          "info": "Maximum number of products to show"
        }
      ]
    }
  ],
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}
