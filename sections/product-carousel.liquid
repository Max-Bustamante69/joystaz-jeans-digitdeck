{% comment %}
  Product Carousel Section
  Features:
  - Product filtering by collection, tags, or colors
  - Product cards with badges, ratings, color swatches
  - Interactive color selection that changes product image
  - Size selection grid that appears on plus icon click
  - Add to cart functionality
  - Same styling as content carousel
{% endcomment %}

<div class="py-16 md:py-8" id="product-carousel-{{ section.id }}">
  <div class=" ml-4 w-full overflow-hidden">
    {% if section.settings.title != blank %}
      <div class="flex justify-between items-center mb-8 mr-4">
        <h2 class="text-3xl font-bold text-gray-900">{{ section.settings.title }}</h2>
        <div class="flex items-center space-x-4 mr-4">
          {% if section.settings.show_arrows %}
            {% render 'carousel-arrows' %}
          {% endif %}
          {% if section.settings.show_view_all and section.settings.view_all_link != blank %}
            <a href="{{ section.settings.view_all_link }}" class="text-gray-600 hover:text-gray-900 transition-colors">
              {{ section.settings.view_all_text | default: 'Ver todos' }}
            </a>
          {% endif %}
        </div>
      </div>
    {% endif %}

    {% assign products = '' %}
    {% case section.settings.product_source %}
      {% when 'collection' %}
        {% if section.settings.collection != blank %}
          {% assign products = section.settings.collection.products %}
        {% endif %}
      {% when 'tags' %}
        {% if section.settings.product_tags != blank %}
          {% assign tag_array = section.settings.product_tags | split: ',' %}
          {% assign products = collections.all.products %}
          {% for tag in tag_array %}
            {% assign tag_trimmed = tag | strip %}
            {% assign products = products | where: 'tags', tag_trimmed %}
          {% endfor %}
        {% endif %}
      {% when 'manual' %}
        {% assign products = section.settings.products %}
    {% endcase %}

    {% if products.size > 0 %}
      <div class="relative">
        <div
          class="product-carousel swiper-main-carousel-{{ section.id }} overflow-hidden"
          data-carousel-id="{{ section.id }}"
          data-carousel-type="main-carousel"
        >
          <div class="swiper-wrapper">
            {% for product in products limit: section.settings.max_products %}
              <div class="swiper-slide">
                <div class="w-full">
                  {% render 'product-card',
                    product: product,
                    show_badges: section.settings.show_badges,
                    show_rating: section.settings.show_rating,
                    show_color_swatches: section.settings.show_color_swatches,
                    show_size_selector: section.settings.show_size_selector
                  %}
                </div>
              </div>
            {% endfor %}
          </div>
        </div>
      </div>
    {% endif %}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const carouselId = '{{ section.id }}';
    const carouselElement = document.querySelector('.swiper-main-carousel-{{ section.id }}');

    if (carouselElement && typeof Swiper !== 'undefined') {
      // Check if this carousel is already initialized
      if (carouselElement.swiper) {
        return;
      }

      const swiper = new Swiper(carouselElement, {
        slidesPerView: 1.2,
        spaceBetween: 8,
        freeMode: {
          enabled: true,
          sticky: true,
          momentum: true,
          momentumRatio: 0.25,
          momentumVelocityRatio: 0.5,
          momentumBounce: true,
          momentumBounceRatio: 0.3,
        },
        grabCursor: true,
        breakpoints: {
          768: {
            slidesPerView: 2.2,
          },
          1024: {
            slidesPerView: 3.2,
          },
          1280: {
            slidesPerView: 4.2,
          }

        },
      });

      // Store the swiper instance on the element to avoid conflicts
      carouselElement.swiper = swiper;

      // Connect visible arrows to Swiper controls
      if ({{ section.settings.show_arrows | json }}) {
        const visiblePrevArrow = document.querySelector('.swiper-main-carousel-{{ section.id }}').closest('.py-16').querySelector('.carousel-prev');
        const visibleNextArrow = document.querySelector('.swiper-main-carousel-{{ section.id }}').closest('.py-16').querySelector('.carousel-next');

        if (visiblePrevArrow) {
          visiblePrevArrow.addEventListener('click', () => {
            swiper.slidePrev();
          });
        }

        if (visibleNextArrow) {
          visibleNextArrow.addEventListener('click', () => {
            swiper.slideNext();
          });
        }

        // Update visible arrow states based on Swiper state
        function updateArrowStates() {
          if (visiblePrevArrow) {
            if (swiper.isBeginning) {
              visiblePrevArrow.style.opacity = '0.3';
              visiblePrevArrow.style.cursor = 'not-allowed';
              visiblePrevArrow.disabled = true;
            } else {
              visiblePrevArrow.style.opacity = '1';
              visiblePrevArrow.style.cursor = 'pointer';
              visiblePrevArrow.disabled = false;
            }
          }

          if (visibleNextArrow) {
            if (swiper.isEnd) {
              visibleNextArrow.style.opacity = '0.3';
              visibleNextArrow.style.cursor = 'not-allowed';
              visibleNextArrow.disabled = true;
            } else {
              visibleNextArrow.style.opacity = '1';
              visibleNextArrow.style.cursor = 'pointer';
              visibleNextArrow.disabled = false;
            }
          }
        }

        // Update states on slide change and initialization
        swiper.on('slideChange', updateArrowStates);
        swiper.on('init', updateArrowStates);
        swiper.on('reachBeginning', updateArrowStates);
        swiper.on('reachEnd', updateArrowStates);

        // Initial state update
        setTimeout(updateArrowStates, 100);
      }
    }
  });
</script>

{% schema %}
{
  "name": "Product Carousel",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Carousel Title",
      "default": "Best Sellers"
    },
    {
      "type": "header",
      "content": "View All Link"
    },
    {
      "type": "checkbox",
      "id": "show_view_all",
      "label": "Show View All Link",
      "default": true
    },
    {
      "type": "text",
      "id": "view_all_text",
      "label": "View All Text",
      "default": "Ver todos"
    },
    {
      "type": "url",
      "id": "view_all_link",
      "label": "View All Link"
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "label": "Show Navigation Arrows",
      "default": true
    },
    {
      "type": "header",
      "content": "Product Selection"
    },
    {
      "type": "select",
      "id": "product_source",
      "label": "Product Source",
      "options": [
        {
          "value": "collection",
          "label": "Collection"
        },
        {
          "value": "tags",
          "label": "Product Tags"
        },
        {
          "value": "manual",
          "label": "Manual Selection"
        }
      ],
      "default": "collection"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection",
      "info": "Select products from this collection"
    },
    {
      "type": "text",
      "id": "product_tags",
      "label": "Product Tags",
      "info": "Comma-separated tags (e.g., 'best-seller,new')"
    },
    {
      "type": "product_list",
      "id": "products",
      "label": "Manual Product Selection",
      "limit": 20
    },
    {
      "type": "range",
      "id": "max_products",
      "label": "Maximum Products",
      "min": 4,
      "max": 20,
      "step": 1,
      "default": 12
    },
    {
      "type": "header",
      "content": "Product Card Display"
    },
    {
      "type": "checkbox",
      "id": "show_badges",
      "label": "Show Product Badges",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "label": "Show Product Rating",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_color_swatches",
      "label": "Show Color Swatches",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_size_selector",
      "label": "Show Size Selector",
      "default": true
    },
    {
      "type": "header",
      "content": "Carousel Settings"
    },
    {
      "type": "range",
      "id": "gap",
      "label": "Gap between items",
      "min": 0,
      "max": 40,
      "step": 4,
      "default": 24
    }
  ],
  "presets": [
    {
      "name": "Product Carousel",
      "settings": {
        "title": "Best Sellers",
        "product_source": "collection"
      }
    }
  ]
}
{% endschema %}
