{% comment %}
  Product Card Snippet
  Features:
  - Product image with color variant switching
  - Product badges (New, Best Seller)
  - Wishlist heart icon
  - Star rating
  - Product name and price
  - Color swatches with image switching
  - Size selection grid that appears on plus icon click
  - Add to cart functionality
{% endcomment %}

<div
  class="product-card relative group w-full flex flex-col h-full max-w-full"
  x-data="productCard{{ product.id }}()"
  {% if product.options contains 'Talla' %}
    @mouseenter="isDesktop && (showSizeSelector = true)"
    @mouseleave="isDesktop && (showSizeSelector = false)"
  {% endif %}
>
  <!-- Product Image Container -->
  <div class="relative overflow-hidden aspect-[3/4] bg-gray-100  w-full group/image flex-shrink-0 max-w-full">
    <!-- Product Image Carousel -->
    {% if product.images.size > 1 %}
      <div
        class="product-image-carousel swiper-product-images-{{ product.id }}-{{ section.id }} w-full h-full"
        data-product-id="{{ product.id }}"
        data-section-id="{{ section.id }}"
        data-carousel-type="product-images"
        id="product-images-carousel-{{ product.id }}-{{ section.id }}"
        style="touch-action: pan-y;"
      >
        <div class="swiper-wrapper h-full">
          {% for image in product.images %}
            <div class="swiper-slide w-full h-full flex-shrink-0"   @click="window.location.href = '{{ product.url }}'">
              <img
                src="{{ image | image_url: width: 1800 }}"
                alt="{{ product.title }} - Image {{ forloop.index }}"
                class="w-full h-full object-cover pointer-events-none"
                width="1800"
                height="1800"
                loading="eager"
              >
            </div>
          {% endfor %}
        </div>

        <!-- Navigation Arrows -->
        <div class="absolute inset-0 pointer-events-none group-hover:block">
          <button
            class="product-prev absolute  p-2  left-2 top-1/2 -translate-y-1/2 w-10 h-10 md:w-10 md:h-10  md:opacity-0 group-hover:opacity-100 transition-all duration-300 z-50 pointer-events-auto cursor-pointer touch-manipulation"
            data-carousel-id="product-images-carousel-{{ product.id }}-{{ section.id }}"
            type="button"
          >
            <svg
              class="w-5 h-5 md:w-5 md:h-5 text-black drop-shadow-md"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              stroke-width="2.5"
            >
              <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7"/>
            </svg>
          </button>
          <button
            class="product-next absolute  p-2  right-2 top-1/2 -translate-y-1/2 w-10 h-10 md:w-10 md:h-10  md:opacity-0 group-hover:opacity-100 transition-all duration-300 z-50 pointer-events-auto cursor-pointer touch-manipulation"
            data-carousel-id="product-images-carousel-{{ product.id }}-{{ section.id }}"
            type="button"
          >
            <svg
              class="w-5 h-5 md:w-5 md:h-5 text-black drop-shadow-md"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              stroke-width="2.5"
            >
              <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7"/>
            </svg>
          </button>
        </div>
      </div>
    {% else %}
      <!-- Single Image -->
      <img
        src="{{ product.featured_image | image_url: width: 1800 }}"
        alt="{{ product.title }}"
        class="w-full h-full object-cover"
        width="1800"
        height="1800"
        loading="eager"
      
      >
    {% endif %}

    <!-- Product Badges -->
    {% if show_badges and product.tags.size > 0 %}
      <div class="absolute top-3 left-3 flex gap-1 z-30">
        {% for tag in product.tags %}
          {% assign tag_lower = tag | downcase %}
          {% if tag_lower contains 'nuevo' %}
            <span class="bg-white/70 backdrop-blur-sm  text-black py-2 px-3 body-xs font-medium">
              {{- 'nuevo' | upcase -}}
            </span>
          {% endif %}
        {% endfor %}
      </div>
    {% endif %}



    <!-- Size Selector Plus Button - positioned in bottom right corner -->
    {% if show_size_selector and product.options contains 'Talla' %}
      <button
        class="absolute right-2 bottom-2 w-8 h-8 lg:hidden  flex items-center justify-center text-gray-600 hover:text-gray-800 transition-all duration-200  z-30"
        @click="handlePlusClick"
        @mouseenter="isDesktop && (showSizeSelector = true)"
        type="button"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
        </svg>
      </button>
    {% endif %}

    <!-- Size Selector Grid - Only show if "Talla" is in product options -->
    {% if product.options contains 'Talla' %}
      <div
        x-show="showSizeSelector"
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0 transform translate-y-4"
        x-transition:enter-end="opacity-100 transform translate-y-0"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="opacity-100 transform translate-y-0"
        x-transition:leave-end="opacity-0 transform translate-y-4"
        @click.outside="isDesktop ? null : (showSizeSelector = false)"
        class="size-selector-hover absolute bottom-0 left-0 right-0 bg-white/80 backdrop-blur-md border border-gray-200 shadow-lg z-30"
      >
        <div class="grid grid-cols-5 gap-1 ">
          {% comment %} Get all unique sizes and check their availability for selected color {% endcomment %}
          {% assign unique_sizes = '' %}
          {% assign size_data = '' %}

          {% comment %} First pass: collect all unique sizes {% endcomment %}
          {% for variant in product.variants %}
            {% assign size_name = '' %}
            {% for option in variant.options %}
              {% assign is_size = true %}
              {% for product_option in product.options_with_values %}
                {% if product_option.name == 'Color' %}
                  {% for color_value in product_option.values %}
                    {% if option == color_value %}
                      {% assign is_size = false %}
                      {% break %}
                    {% endif %}
                  {% endfor %}
                {% endif %}
              {% endfor %}
              {% if is_size %}
                {% assign size_name = option %}
                {% break %}
              {% endif %}
            {% endfor %}

            {% unless unique_sizes contains size_name %}
              {% assign unique_sizes = unique_sizes | append: size_name | append: ',' %}
            {% endunless %}
          {% endfor %}

          {% comment %} Second pass: render size buttons with availability check {% endcomment %}
          {% assign sizes_array = unique_sizes | split: ',' %}
          {% for size_name in sizes_array %}
            {% if size_name != blank %}
              {% comment %} Find variant that matches current selected color and this size {% endcomment %}
              {% assign size_available = false %}
              {% assign matching_variant_id = null %}

              {% for variant in product.variants %}
                {% assign variant_color = '' %}
                {% assign variant_size = '' %}

                {% comment %} Extract color and size from variant options {% endcomment %}
                {% for option in variant.options %}
                  {% assign is_color = false %}
                  {% for product_option in product.options_with_values %}
                    {% if product_option.name == 'Color' %}
                      {% for color_value in product_option.values %}
                        {% if option == color_value %}
                          {% assign variant_color = option %}
                          {% assign is_color = true %}
                          {% break %}
                        {% endif %}
                      {% endfor %}
                    {% endif %}
                  {% endfor %}

                  {% unless is_color %}
                    {% assign variant_size = option %}
                  {% endunless %}
                {% endfor %}

                {% comment %} Check if this variant matches current size {% endcomment %}
                {% if variant_size == size_name %}
                  {% comment %} For now, check if variant is available - color matching will be handled by Alpine.js {% endcomment %}
                  {% if variant.available %}
                    {% assign size_available = true %}
                    {% assign matching_variant_id = variant.id %}
                  {% endif %}
                {% endif %}
              {% endfor %}

              <button
                class="relative px-6 py-4 text-md text-center font-semibold transition-colors overflow-hidden"
                x-bind:class="isSizeAvailable('{{ size_name }}') ? 'hover:bg-white text-gray-900' : 'text-gray-400 cursor-not-allowed'"
                @click="handleSizeClick('{{ size_name }}')"
                x-bind:disabled="!isSizeAvailable('{{ size_name }}')"
              >
                {{ size_name }}
                {% comment %} Diagonal line for sold out sizes {% endcomment %}
                <div
                  x-show="!isSizeAvailable('{{ size_name }}')"
                  class="absolute inset-0 pointer-events-none"
                >
                  <div class="absolute top-0 left-0 w-full h-full">
                    <svg class="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
                      <line x1="0" y1="0" x2="100" y2="100"
                            stroke="currentColor"
                            stroke-width="2"
                            class="text-gray-400"/>
                    </svg>
                  </div>
                </div>
              </button>
            {% endif %}
          {% endfor %}
        </div>
      </div>
    {% endif %}
  </div>

  {% unless hide_info %}
    <div class="pt-4 px-3 w-full flex-1 flex flex-col justify-start">
      <!-- Star Rating and Plus Icon -->
      <div class="flex items-center justify-between">
        {% if show_rating %}
          {%
            render 'star-rating',
            rating: product.metafields.reviews.rating.value | default: 3.5,
            size: 'sm',
            color: 'text-[#f3a000]',
            show_count: true,
            show_rating_value: true,
            show_review_count: true,
            review_count: product.metafields.reviews.rating_count.value | default: 0
          %}
        {% else %}
          <div></div>
          <!-- Empty div for spacing when no rating -->
        {% endif %}
      </div>

      <!-- Product Name and Price -->
      <div class="flex items-start justify-between space-y-2">
        <!-- Product Title Section -->
        <div class="flex flex-col items-start justify-start space-y-1">
          <p class="body-sm lg:body font-semibold ">{{ product.title }}</p>

          <!-- Color Circles - Using product.options_with_values for proper swatch access -->
          <!-- Pattern: product_option.name == "Color" then product_option_value.swatch.color -->
          {% for product_option in product.options_with_values %}
            {% if product_option.name == 'Color' %}
              <div class="flex items-center gap-2 mt-2">
                {% for product_option_value in product_option.values %}
                  {% comment %} Find a variant with this color to get its image {% endcomment %}
                  {% assign color_variant = null %}
                  {% for variant in product.variants %}
                    {% for option in variant.options %}
                      {% if option == product_option_value %}
                        {% assign color_variant = variant %}
                        {% break %}
                      {% endif %}
                    {% endfor %}
                    {% if color_variant %}
                      {% break %}
                    {% endif %}
                  {% endfor %}

                  <button
                    @click="selectColor('{{ product_option_value }}', '{{ color_variant.featured_image | image_url: width: 600 }}', {{ color_variant.id }})"
                    class="w-4 h-4 rounded-xs border-1 transition-colors"
                    :class="selectedColor === '{{ product_option_value }}' ? 'ring-1 ring-offset-2 border-transparent ring-black' : 'border-gray-300 hover:border-gray-400'"
                    {% if product_option_value.swatch.color %}
                      style="background-color: {{ product_option_value.swatch.color }};"
                    {% else %}
                      style="background-image: url({{ product_option_value.swatch.image | image_url: width: 600 }}); background-size: cover; background-position: center;"
                    {% endif %}
                    title="{{ product_option_value }}"
                  ></button>
                {% endfor %}
              </div>
            {% endif %}
          {% endfor %}
        </div>

        <!-- Price Section -->
        <div class="flex flex-col items-end space-y-1">
          <span class="body-sm lg:body font-semibold">${{ product.price | money_without_currency }}</span>
          {% if product.compare_at_price > product.price %}
            <span class="body-xs lg:body-sm text-gray-500 line-through">
              ${{ product.compare_at_price | money_without_currency }}
            </span>
          {% endif %}
        </div>
      </div>
    </div>
  {% endunless %}
  <!-- Product Information -->
</div>

<script>
  function productCard{{ product.id }}() {
    return {
      productId: {{ product.id }},
      {% comment %}Find the first color option dynamically{% endcomment %}
      {% assign first_color = '' %}
      {% assign first_color_variant = null %}
      {% for product_option in product.options_with_values %}
        {% for product_option_value in product_option.values %}
          {% if product_option_value.swatch %}
            {% assign first_color = product_option_value %}
            {% comment %}Find a variant with this color{% endcomment %}
            {% for variant in product.variants %}
              {% for option in variant.options %}
                {% if option == first_color %}
                  {% assign first_color_variant = variant %}
                  {% break %}
                {% endif %}
              {% endfor %}
              {% if first_color_variant %}{% break %}{% endif %}
            {% endfor %}
            {% break %}
          {% endif %}
        {% endfor %}
        {% if first_color != '' %}{% break %}{% endif %}
      {% endfor %}
      
      selectedVariantId: {{ first_color_variant.id | default: product.selected_or_first_available_variant.id }},
      selectedVariantImage: null,
      selectedColor: '{{ first_color | default: product.selected_or_first_available_variant.option1 }}',
      selectedSize: null,
      showSizeSelector: false,
      isDesktop: window.innerWidth >= 1024,
      isInWishlist: false,

      init() {
        // Update isDesktop on window resize
        window.addEventListener('resize', () => {
          this.isDesktop = window.innerWidth >= 1024;
        });
        
        // Ensure size selector is hidden by default on desktop
        if (this.isDesktop) {
          this.showSizeSelector = false;
        }
        
        // Initialize other components
        this.initializeColorSelection();
        this.debugStockLevels();
        this.initializeCarousel();
      },



      selectColor(color, imageUrl, variantId) {
        this.selectedColor = color;
        this.selectedVariantId = variantId;

        // Debug stock levels when color changes
        console.log(`Color changed to: ${color}`);
        this.debugStockLevels();

        // Update the product image if a new image URL is provided
        if (imageUrl && imageUrl !== '') {
          this.selectedVariantImage = imageUrl;

          // Update the carousel if it exists
          const carouselElement = this.$el.querySelector('.product-image-carousel');
          if (carouselElement && carouselElement.swiper) {
            // Find the slide with the matching image and go to it
            const slides = carouselElement.querySelectorAll('.swiper-slide img');
            slides.forEach((slide, index) => {
              if (slide.src === imageUrl) {
                carouselElement.swiper.slideTo(index);
                return;
              }
            });
          }
        }
      },

      // === CORE DATA METHODS ===
      
      getVariants() {
        return [
          {% for variant in product.variants %}
            {
              id: {{ variant.id }},
              options: [{% for option in variant.options %}'{{ option }}'{% unless forloop.last %}, {% endunless %}{% endfor %}],
              available: {{ variant.available | json }},
              inventory_quantity: {{ variant.inventory_quantity | default: 0 }},
              inventory_policy: '{{ variant.inventory_policy | default: "deny" }}'
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];
      },

      getFirstColorWithSwatch() {
        const productOptions = [
          {% for product_option in product.options_with_values %}
            {
              values: [
                {% for product_option_value in product_option.values %}
                  { value: '{{ product_option_value }}', hasSwatch: {{ product_option_value.swatch | json }} }{% unless forloop.last %},{% endunless %}
                {% endfor %}
              ]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];

        for (const option of productOptions) {
          for (const value of option.values) {
            if (value.hasSwatch) return value.value;
          }
        }
        return null;
      },

      hasColorVariants() {
        return !!this.getFirstColorWithSwatch();
      },

      // === VARIANT MATCHING ABSTRACTION ===
      
      findVariant(size, colorRequired = true) {
        const variants = this.getVariants();
        const hasColors = this.hasColorVariants();
        
        return variants.find(variant => {
          const matchesSize = variant.options.includes(size);
          const matchesColor = !hasColors || !colorRequired || variant.options.includes(this.selectedColor);
          return matchesSize && matchesColor;
        });
      },

      findAvailableVariant(size) {
        const variant = this.findVariant(size, true);
        return variant && variant.available ? variant : null;
      },

      // === SIMPLIFIED PUBLIC METHODS ===
      
      isSizeAvailable(size) {
        return !!this.findAvailableVariant(size);
      },

      getSizeStock(size) {
        const variant = this.findVariant(size, true);
        
        if (!variant) {
          return { available: false, stock: 0, policy: 'deny', variantId: null };
        }

        return {
          available: variant.available,
          stock: variant.inventory_quantity,
          policy: variant.inventory_policy,
          variantId: variant.id
        };
      },

      // === UTILITY METHODS ===
      
      getAllSizes() {
        const variants = this.getVariants();
        const allOptions = variants.map(v => v.options).flat();
        
        if (!this.hasColorVariants()) {
          return [...new Set(allOptions)];
        }
        
        // Filter out colors to get only sizes
        return [...new Set(allOptions.filter(option => option !== this.selectedColor))];
      },

      debugStockLevels() {
        const hasColors = this.hasColorVariants();
        const title = hasColors 
          ? `=== Stock Debug for Product ${this.productId} - Color: ${this.selectedColor} ===`
          : `=== Stock Debug for Product ${this.productId} - No Color Variants ===`;
        
        console.log(title);
        
        this.getAllSizes().forEach(size => {
          const stockInfo = this.getSizeStock(size);
          console.log(`Size ${size}:`, stockInfo);
        });
        
        console.log('=== End Stock Debug ===');
      },

      handleSizeClick(size) {
        if (!this.isSizeAvailable(size)) return;
        
        const variant = this.findAvailableVariant(size);
        if (variant) {
          this.selectSize(size, variant.id);
        }
      },

      handlePlusClick() {
        // Debug stock levels when opening size selector
        this.debugStockLevels();
        
        // Check if product has Talla option using the product data
        const productOptions = {{ product.options | json }};
        const hasTalla = productOptions.includes('Talla');
        const hasColor = productOptions.includes('Color');

        if (hasTalla) {
          // If product has sizes, open size selector (only on mobile, desktop uses hover)
          if (!this.isDesktop) {
            this.toggleSizeSelector();
          } else {
            // On desktop, ensure size selector is visible when plus is clicked
            this.showSizeSelector = true;
          }
        } else {
          // If no sizes, add to cart directly
          this.addToCart(this.selectedVariantId);
        }
      },

      toggleSizeSelector() {
        this.showSizeSelector = !this.showSizeSelector;
      },

      selectSize(size, variantId) {
        this.selectedSize = size;
        this.selectedVariantId = variantId;

        // Check if product has Color option using the product data
        const productOptions = {{ product.options | json }};
        const hasColor = productOptions.includes('Color');

        if (hasColor) {
          // If product has colors, we need to find the variant with current color and selected size
          const currentColor = this.selectedColor;
          // Find the variant that matches both size and color
          const targetVariantId = this.findVariantBySizeAndColor(size, currentColor);
          if (targetVariantId) {
            this.addToCart(targetVariantId);
          } else {
            this.addToCart(variantId);
          }
        } else {
          // If no colors, just add the selected variant
          this.addToCart(variantId);
        }

        this.showSizeSelector = false;
      },



      async addToCart(variantId) {
        try {
          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              items: [{
                id: variantId,
                quantity: 1
              }]
            })
          });

                    if (response.ok) {
            // Trigger cart update event
            this.$dispatch('cart:updated');

            // Open cart drawer
            this.$dispatch('cart:open');

            // Show success feedback
            this.showSuccessMessage();
          }
        } catch (error) {
          console.error('Error adding to cart:', error);
        }
      },

      showSuccessMessage() {
        // Create a temporary success message
        const message = document.createElement('div');
        message.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
        message.textContent = 'Added to cart!';
        document.body.appendChild(message);

        // Remove after 2 seconds
        setTimeout(() => {
          document.body.removeChild(message);
        }, 2000);
      },

      findVariantByColor(color) {
        // Get all variants from the product with their options
        const variants = [
          {% for variant in product.variants %}
            {
              id: {{ variant.id }},
              options: [{% for option in variant.options %}'{{ option }}'{% unless forloop.last %}, {% endunless %}{% endfor %}]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];

        // Find variant that matches the color
        const targetVariant = variants.find(variant =>
          variant.options.includes(color)
        );

        return targetVariant ? targetVariant.id : null;
      },

      findVariantBySizeAndColor(size, color) {
        // Get all variants from the product with their options
        const variants = [
          {% for variant in product.variants %}
            {
              id: {{ variant.id }},
              options: [{% for option in variant.options %}'{{ option }}'{% unless forloop.last %}, {% endunless %}{% endfor %}]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];

        // Find variant that matches both size and color
        const targetVariant = variants.find(variant =>
          variant.options.includes(size) && variant.options.includes(color)
        );

        return targetVariant ? targetVariant.id : null;
      },

      toggleWishlist() {
        this.isInWishlist = !this.isInWishlist;
        // Here you would typically make an API call to add/remove from wishlist
      },

      // === INITIALIZATION ===

      initializeColorSelection() {
        if (!this.hasColorVariants()) {
          console.log(`Initializing Product Card ${this.productId} - No Color Variants`);
          return;
        }
        
        const firstColor = this.getFirstColorWithSwatch();
        if (firstColor && firstColor !== this.selectedColor) {
          console.log(`Correcting selected color from ${this.selectedColor} to ${firstColor}`);
          this.selectedColor = firstColor;
        }
        console.log(`Initializing Product Card ${this.productId} - Selected Color: ${this.selectedColor}`);
      },

      initializeCarousel() {
        
        this.$nextTick(() => {
          const carouselElement = this.$el.querySelector('.product-image-carousel');
          if (carouselElement && typeof Swiper !== 'undefined') {
            const carouselId = carouselElement.id;

            // Check if this carousel is already initialized
            if (carouselElement.swiper) {
              return;
            }

            // Create swiper instance
            const swiperInstance = new Swiper(carouselElement, {
              slidesPerView: 1,
              spaceBetween: 0,
              allowTouchMove: true,
              grabCursor: false,
              touchRatio: 1,
              touchAngle: 45,
              simulateTouch: true,
              touchStartPreventDefault: false,
              touchStartForcePreventDefault: false,
              touchMoveStopPropagation: false,
              navigation: {
                nextEl: carouselElement.querySelector('.product-next'),
                prevEl: carouselElement.querySelector('.product-prev'),
              }
            });

            // Function to update arrow states
            const updateArrowStates = () => {
              const prevArrow = carouselElement.querySelector('.product-prev');
              const nextArrow = carouselElement.querySelector('.product-next');

              if (prevArrow) {
                if (swiperInstance.isBeginning) {
                  prevArrow.style.opacity = '0';
                  prevArrow.style.pointerEvents = 'none';
                  prevArrow.style.visibility = 'hidden';
                } else {
                  prevArrow.style.opacity = '';
                  prevArrow.style.pointerEvents = '';
                  prevArrow.style.visibility = '';
                }
              }

              if (nextArrow) {
                if (swiperInstance.isEnd) {
                  nextArrow.style.opacity = '0';
                  nextArrow.style.pointerEvents = 'none';
                  nextArrow.style.visibility = 'hidden';
                } else {
                  nextArrow.style.opacity = '';
                  nextArrow.style.pointerEvents = '';
                  nextArrow.style.visibility = '';
                }
              }
            };

            // Set initial state and add event listeners
            swiperInstance.on('slideChange', updateArrowStates);
            swiperInstance.on('reachBeginning', updateArrowStates);
            swiperInstance.on('reachEnd', updateArrowStates);

            // Initial state update
            setTimeout(updateArrowStates, 100);

            // Add touch event listeners for mobile
            const prevArrow = carouselElement.querySelector('.product-prev');
            const nextArrow = carouselElement.querySelector('.product-next');

            if (prevArrow) {
              prevArrow.addEventListener('touchstart', () => {
                if (!swiperInstance.isBeginning) {
                  swiperInstance.slidePrev();
                }
              });
            }

            if (nextArrow) {
              nextArrow.addEventListener('touchstart', () => {
                if (!swiperInstance.isEnd) {
                  swiperInstance.slideNext();
                }
              });
            }

            // Add click event to go to product page (only if not clicking on controls)
            carouselElement.addEventListener('click', (e) => {
              // Check if click is on navigation buttons or size selector
              if (e.target.closest('.product-prev') || 
                  e.target.closest('.product-next') || 
                  e.target.closest('.size-selector-hover') ||
                  e.target.closest('[data-carousel-id]')) {
                return; // Don't navigate if clicking on controls
              }
              
              // Navigate to product page
              window.location.href = '{{ product.url }}';
            });

            // Store the swiper instance on the element to avoid conflicts
            carouselElement.swiper = swiperInstance;
          }
        });
      }
    }
  }
</script>

<style>
  /* Smooth transitions for size selector */
  .product-card .size-selector-hover {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Ensure size selector is properly positioned and styled */
  .product-card .size-selector-hover {
    backdrop-filter: blur(8px);
    border: 1px solid rgba(229, 231, 235, 0.8);
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  /* Size button hover effects */
  .size-selector-hover button {
    transition: all 0.2s ease-in-out;
  }

  .size-selector-hover button:hover:not(:disabled) {
    background-color: rgba(255, 255, 255, 0.9);
    transform: translateY(-1px);
  }

  /* Product image carousel improvements */
  .product-image-carousel {
    touch-action: pan-y;
    -webkit-overflow-scrolling: touch;
    cursor: default;
  }

  .product-image-carousel .swiper-slide {
    touch-action: pan-y;
    cursor: default;
  }

  .product-image-carousel .swiper-slide img {
    pointer-events: none;
    user-select: none;
    -webkit-user-drag: none;
    cursor: default;
  }

  .product-image-carousel .swiper-wrapper {
    cursor: default;
  }
</style>
