{% comment %}
  Content Carousel Section
  Supports content cards with configurable options
{% endcomment %}

<div class="py-16 md:py-8" id="content-carousel-{{ section.id }}">
  <div class="container mx-auto px-4">
    {% if section.settings.title != blank %}
      <div class="flex justify-between items-center mb-8">
        <h2 class="text-3xl font-bold text-gray-900">{{ section.settings.title }}</h2>
        {% if section.settings.show_view_all and section.settings.view_all_link != blank %}
          <a href="{{ section.settings.view_all_link }}" class="text-gray-600 hover:text-gray-900 transition-colors">
            {{ section.settings.view_all_text | default: 'Ver todos' }}
          </a>
        {% endif %}
        {% if section.settings.show_arrows and section.blocks.size > 1 %}
          {% render 'carousel-arrows' %}
        {% endif %}
      </div>
    {% endif %}

    {% if section.blocks.size > 0 %}
      <div class="content-carousel swiper-{{ section.id }} overflow-hidden" data-carousel-id="{{ section.id }}">
        <div class="swiper-wrapper">
          {% for block in section.blocks %}
            <div class="swiper-slide px-2">
              {% render 'content-card',
                content_image: block.settings.content_image,
                content_title: block.settings.content_title,
                product_count: block.settings.product_count,
                content_description: block.settings.content_description,
                content_link: block.settings.content_link
              %}
            </div>
          {% endfor %}
        </div>
      </div>
    {% endif %}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const carouselId = '{{ section.id }}';
    const carouselElement = document.querySelector('.swiper-{{ section.id }}');

    if (carouselElement && typeof Swiper !== 'undefined') {
      const swiper = new Swiper(carouselElement, {
        slidesPerView: 2,
        spaceBetween: {{ section.settings.gap | default: 24 }},
        freeMode: {
          enabled: true,
          sticky: true,
          momentum: true,
        },
        grabCursor: true,
        breakpoints: {
          768: {
            slidesPerView: 3,
            spaceBetween: {{ section.settings.gap | default: 24 }},
          },
          1024: {
            slidesPerView: {{ section.settings.items_per_view | default: 5 }},
            spaceBetween: {{ section.settings.gap | default: 24 }},
          },
        },
      });

      // Custom arrow controls with dynamic states
      const prevButton = carouselElement.closest('[id^="content-carousel-"]').querySelector('.carousel-prev');
      const nextButton = carouselElement.closest('[id^="content-carousel-"]').querySelector('.carousel-next');

      // Function to update arrow states
      function updateArrowStates() {
        if (prevButton) {
          if (swiper.isBeginning) {
            prevButton.style.opacity = '0.3';
            prevButton.style.cursor = 'not-allowed';
            prevButton.disabled = true;
          } else {
            prevButton.style.opacity = '1';
            prevButton.style.cursor = 'pointer';
            prevButton.disabled = false;
          }
        }

        if (nextButton) {
          if (swiper.isEnd) {
            nextButton.style.opacity = '0.3';
            nextButton.style.cursor = 'not-allowed';
            nextButton.disabled = true;
          } else {
            nextButton.style.opacity = '1';
            nextButton.style.cursor = 'pointer';
            nextButton.disabled = false;
          }
        }
      }

      if (prevButton) {
        prevButton.addEventListener('click', (e) => {
          e.stopPropagation();
          swiper.slidePrev();
        });
      }

      if (nextButton) {
        nextButton.addEventListener('click', (e) => {
          e.stopPropagation();
          swiper.slideNext();
        });
      }

      // Update arrow states on slide change
      swiper.on('slideChange', updateArrowStates);
      swiper.on('init', updateArrowStates);
      swiper.on('reachBeginning', updateArrowStates);
      swiper.on('reachEnd', updateArrowStates);

      // Initial state update
      setTimeout(updateArrowStates, 100);
    }
  });
</script>

{% schema %}
{
  "name": "Content Carousel",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Carousel Title",
      "default": "Content Carousel"
    },
    {
      "type": "header",
      "content": "View All Link"
    },
    {
      "type": "checkbox",
      "id": "show_view_all",
      "label": "Show View All Link",
      "default": false
    },
    {
      "type": "text",
      "id": "view_all_text",
      "label": "View All Text",
      "default": "Ver todos"
    },
    {
      "type": "url",
      "id": "view_all_link",
      "label": "View All Link"
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "label": "Show Navigation Arrows",
      "default": true
    },
    {
      "type": "header",
      "content": "Carousel Settings"
    },
    {
      "type": "range",
      "id": "items_per_view",
      "label": "Items per view (desktop)",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 5
    },
    {
      "type": "range",
      "id": "gap",
      "label": "Gap between items",
      "min": 0,
      "max": 40,
      "step": 4,
      "default": 24
    }
  ],
  "blocks": [
    {
      "type": "content_card",
      "name": "Content Card",
      "settings": [
        {
          "type": "image_picker",
          "id": "content_image",
          "label": "Content Image"
        },
        {
          "type": "text",
          "id": "content_title",
          "label": "Content Title"
        },
        {
          "type": "text",
          "id": "product_count",
          "label": "Product Count (e.g., '3 Productos')"
        },
        {
          "type": "textarea",
          "id": "content_description",
          "label": "Content Description"
        },
        {
          "type": "url",
          "id": "content_link",
          "label": "Content Link"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Content Carousel",
      "blocks": [
        {
          "type": "content_card"
        }
      ]
    }
  ]
}
{% endschema %}
