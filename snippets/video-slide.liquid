{% comment %}
  Video Slide Snippet

  Usage:
  {% render 'video-slide',
    block: block,
    aspect_ratio: '3/4'
  %}

  Parameters:
  - block: Block object with video settings
  - aspect_ratio: Aspect ratio class (default: '3/4')
{% endcomment %}

{% assign aspect_ratio = aspect_ratio | default: '3/4' %}

<div
  class="video-slide-container relative overflow-hidden  bg-gray-100 aspect-[3/4]"
  x-data="videoSlide()"
  @mouseenter="handleMouseEnter"
  @mouseleave="handleMouseLeave"
  {{ block.shopify_attributes }}
>
  {% if block.settings.video_file != blank %}
    <!-- Video Element -->
    <video
      x-ref="video"
      class="absolute inset-0 w-full h-full object-cover"
      muted
      loop
      playsinline
      preload="metadata"
      @loadedmetadata="onVideoLoaded"
    >
      {% for source in block.settings.video_file.sources %}
        <source src="{{ source.url }}" type="{{ source.mime_type }}">
      {% endfor %}
      Your browser does not support the video tag.
    </video>

    <!-- Play Button Overlay -->
    <div
      x-show="!isPlaying && showPlayButton"
      x-transition:enter="transition ease-out duration-300"
      x-transition:enter-start="opacity-0 "
      x-transition:enter-end="opacity-100 "
      x-transition:leave="transition ease-in duration-200"
      x-transition:leave-start="opacity-100 "
      x-transition:leave-end="opacity-0 "
      class="absolute inset-0 flex items-center justify-center z-20 bg-black/20"
    >
      <div class="w-16 h-16 bg-white/90 backdrop-blur-sm rounded-full flex items-center justify-center shadow-lg hover:bg-white/100 transition-all duration-200">
        <svg class="w-6 h-6 text-gray-800 ml-1" fill="currentColor" viewBox="0 0 24 24">
          <path d="M8 5v14l11-7z"/>
        </svg>
      </div>
    </div>

    <!-- Video Content Overlay -->
    {% if block.settings.video_title != blank or block.settings.video_description != blank %}
      <div
        x-show="showOverlay"
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0 translate-y-4"
        x-transition:enter-end="opacity-100 translate-y-0"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="opacity-100 translate-y-0"
        x-transition:leave-end="opacity-0 translate-y-4"
        class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent p-4 z-30"
      >
        {% if block.settings.video_title != blank %}
          <h3 class="text-white font-semibold text-lg mb-1 leading-tight">
            {{ block.settings.video_title }}
          </h3>
        {% endif %}
        {% if block.settings.video_description != blank %}
          <p class="text-white/90 text-sm leading-relaxed mb-2">
            {{ block.settings.video_description }}
          </p>
        {% endif %}
        {% if block.settings.video_link != blank %}
          <a
            href="{{ block.settings.video_link }}"
            class="inline-flex items-center text-white text-sm font-medium hover:text-white/80 transition-colors duration-200"
            {% if block.settings.video_link contains 'http' %}
              target="_blank" rel="noopener"
            {% endif %}
          >
            {{ block.settings.link_text | default: 'Watch Full Video' }}
            <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
            </svg>
          </a>
        {% endif %}
      </div>
    {% endif %}

  {% else %}
    <!-- No Video Placeholder -->
    <div class="absolute inset-0 flex flex-col items-center justify-center bg-gray-100 text-gray-400">
      <svg class="w-12 h-12 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/>
      </svg>
      <span class="text-sm font-medium">Add Video</span>
    </div>
  {% endif %}
</div>

<script>
  function videoSlide() {
    return {
      isPlaying: false,
      videoLoaded: false,
      showPlayButton: true,
      showOverlay: false,
      hoverTimeout: null,

      onVideoLoaded() {
        console.log('Video metadata loaded');
        this.videoLoaded = true;
        // Set initial video state
        const video = this.$refs.video;
        if (video) {
          video.currentTime = 0;
          video.muted = true;
          console.log('Video initial state set');
        }
      },

      handleMouseEnter() {
        console.log('Mouse entered, videoLoaded:', this.videoLoaded);
        if (!this.videoLoaded) return;

        // Clear any existing timeout
        if (this.hoverTimeout) {
          clearTimeout(this.hoverTimeout);
        }

        // Show overlay immediately
        this.showOverlay = true;

        // Start playing after a short delay
        this.hoverTimeout = setTimeout(() => {
          console.log('Starting video playback');
          this.playVideo();
        }, 200);
      },

      handleMouseLeave() {
        // Clear hover timeout
        if (this.hoverTimeout) {
          clearTimeout(this.hoverTimeout);
        }

        // Hide overlay
        this.showOverlay = false;

        // Pause video and reset
        this.pauseVideo();
      },

      playVideo() {
        const video = this.$refs.video;
        console.log('playVideo called, video:', video, 'videoLoaded:', this.videoLoaded);
        if (!video || !this.videoLoaded) return;

        video
          .play()
          .then(() => {
            console.log('Video playing successfully');
            this.isPlaying = true;
            this.showPlayButton = false;
          })
          .catch((error) => {
            console.log('Video play failed:', error);
            // Fallback: ensure video is muted and try again
            video.muted = true;
            video
              .play()
              .then(() => {
                console.log('Video playing after mute');
                this.isPlaying = true;
                this.showPlayButton = false;
              })
              .catch(() => {
                console.log('Video play completely failed');
                // If still fails, just hide the play button
                this.showPlayButton = false;
              });
          });
      },

      pauseVideo() {
        const video = this.$refs.video;
        if (!video) return;

        video.pause();
        video.currentTime = 0;
        this.isPlaying = false;
        this.showPlayButton = true;
      },

      // Handle click events
      togglePlay() {
        if (this.isPlaying) {
          this.pauseVideo();
        } else {
          this.playVideo();
        }
      },

      init() {
        // Initialize video state
        this.$nextTick(() => {
          const video = this.$refs.video;
          if (video) {
            // Ensure video is muted for autoplay compliance
            video.muted = true;
            video.playsInline = true;

            // Check if HLS.js is available and needed
            const videoSrc = video.querySelector('source')?.src;
            if (videoSrc && videoSrc.includes('.m3u8')) {
              console.log('HLS video detected:', videoSrc);
              if (typeof Hls !== 'undefined' && Hls.isSupported()) {
                console.log('Using HLS.js for video playback');
                const hls = new Hls();
                hls.loadSource(videoSrc);
                hls.attachMedia(video);
                hls.on(Hls.Events.MANIFEST_PARSED, () => {
                  console.log('HLS manifest parsed');
                  this.videoLoaded = true;
                });
              } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                console.log('Native HLS support detected');
                video.src = videoSrc;
              } else {
                console.error('HLS not supported');
              }
            }

            video.addEventListener('ended', () => {
              this.pauseVideo();
            });

            video.addEventListener('error', (e) => {
              console.error('Video loading error:', e);
              this.showPlayButton = false;
            });

            // Handle click to play/pause
            video.addEventListener('click', (e) => {
              e.preventDefault();
              this.togglePlay();
            });
          }
        });
      },
    };
  }
</script>
