{% comment %}
  Optimized Search Drawer Component
  - Uses Alpine.js native transitions
  - Maximizes Tailwind utilities
  - Removes unnecessary custom CSS
  - Smoother animations with better performance
{% endcomment %}

<div
  x-cloak
  x-data="searchDrawer()"
  x-show="isOpen"
  class="fixed inset-0 z-50 overflow-hidden"
  @click.self="closeDrawer()"
  @keydown.escape.window="closeDrawer()"
  @search:open.window="openDrawer()"
>
  <!-- Backdrop -->
  <div
    x-cloak
    x-show="isOpen"
    x-transition:enter="transition ease-out duration-500"
    x-transition:enter-start="opacity-0"
    x-transition:enter-end="opacity-100"
    x-transition:leave="transition ease-in duration-400"
    x-transition:leave-start="opacity-100"
    x-transition:leave-end="opacity-0"
    class="absolute inset-0 bg-black/70"
  ></div>

  <!-- Drawer -->
  <div
    x-cloak
    x-show="isOpen"
    x-transition:enter="transform transition ease-out duration-350"
    x-transition:enter-start="translate-x-full "
    x-transition:enter-end="translate-x-0 "
    x-transition:leave="transform transition ease-in duration-300"
    x-transition:leave-start="translate-x-0 "
    x-transition:leave-end="translate-x-full "
    class="absolute right-0 top-0 h-full  w-[88vw] lg:w-[420px] bg-white shadow-xl flex flex-col overflow-hidden transform-gpu will-change-transform"
    @click.outside="closeDrawer()"
  >
    <!-- Header -->
    <div class="lg:p-6 p-4  flex-shrink-0">
      <div class="flex items-center justify-between mb-4">
        <h5>Search</h5>
        <button
          @click="closeDrawer()"
          class="text-gray-400 hover:text-gray-600 transition-colors duration-200 "
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>

      <!-- Search Input -->
      <div class="relative">
        <input
          type="text"
          x-model="searchQuery"
          @input="handleSearch"
          @keydown.enter="viewAllResults"
          placeholder="Search products, categories..."
          class="w-full pl-12 py-3 border-b border-gray-300  focus:ring-0 focus:outline-none   transition-all duration-200"
        >
        {% render 'search-icon', class: 'absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-black' %}

        <button
          x-show="searchQuery.length > 0"
          x-transition.scale.origin.right.duration.200ms
          @click="clearSearch"
          class="absolute right-4 top-1/2 -translate-y-1/2 text-gray-700 hover:text-gray-900 transition-colors duration-200"
        >
          <p class="body-sm lg:body underline cursor-pointer opacity-80">Clear</p>
        </button>
      </div>
    </div>

    <!-- Scrollable Content -->
    <div class="flex-1 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100">
      <!-- Featured Tags -->
      <div
        x-show="searchQuery.length === 0"
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0 -translate-y-2"
        x-transition:enter-end="opacity-100 translate-y-0"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="opacity-100 translate-y-0"
        x-transition:leave-end="opacity-0 -translate-y-2"
      >
        {% if settings.search_show_featured_tags and settings.search_featured_collections != blank %}
          <div class="py-6  space-y-4 border-gray-200">
            <h5 class=" lg:px-6">
              {{ settings.search_featured_tags_title | default: 'Popular Categories' }}
            </h5>

            <div class="search-tags-carousel swiper overflow-hidden" data-carousel-id="search-tags">
              <div class="swiper-wrapper  lg:px-6">
                {% for collection in settings.search_featured_collections %}
                  <div class="swiper-slide">
                    {% render 'collection-tag', collection: collection %}
                  </div>
                {% endfor %}
              </div>
            </div>
          </div>
        {% endif %}

        <!-- Search History -->
        <div
          x-show="searchHistory.length > 0"
          x-transition:enter="transition ease-out duration-300"
          x-transition:enter-start="opacity-0 -translate-y-2"
          x-transition:enter-end="opacity-100 translate-y-0"
          class="lg:p-6 p-4 "
        >
          <div class="flex items-center justify-between mb-4">
            <h5>
              {{ settings.search_history_title | default: 'Recent Searches' }}
            </h5>
            <button
              @click="clearHistory"
              class="text-sm text-gray-500 hover:text-gray-700 underline transition-colors duration-200"
            >
              Clear all
            </button>
          </div>

          <div class="space-y-2">
            <template x-for="term in searchHistory" :key="term">
              <div class="flex items-center justify-between w-full p-2 text-left text-gray-700 hover:bg-gray-50 rounded-lg group transition-all duration-200">
                <!-- Clickable search term area -->
                <button
                  @click="searchFromHistory(term)"
                  class="flex items-center space-x-3 flex-1 min-w-0 text-left  transition-transform duration-200"
                >
                  <svg
                    class="w-4 h-4 text-gray-400 flex-shrink-0"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                  </svg>
                  <span x-text="term" class="truncate"></span>
                </button>

                <!-- Remove button - always visible but subtle -->
                <button
                  @click.stop="removeFromHistory(term)"
                  class="flex-shrink-0 ml-2 p-1 text-gray-400 hover:text-black hover:bg-gray-200 rounded-full transition-all duration-200 "
                  :title="`Remove '${term}' from history`"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                  </svg>
                </button>
              </div>
            </template>
          </div>
        </div>

        <!-- Categories -->
        {% if settings.search_show_category_grid %}
          <div class="py-6 ">
            <h5 class="mb-4  lg:px-6">
              {{ settings.search_category_grid_title | default: 'Shop by Category' }}
            </h5>

            <div class="search-categories-carousel swiper overflow-hidden" data-carousel-id="search-categories">
              <div class="swiper-wrapper  lg:px-6">
                {% for collection in settings.search_category_collections %}
                  <div class="swiper-slide">
                    {% render 'collection-card', category: collection, aspect_ratio: 'portrait' %}
                  </div>
                {% endfor %}
              </div>
            </div>
          </div>
        {% endif %}

        <!-- Products -->
        {% if settings.search_show_product_carousel %}
          <div class="py-6 space-y-4">
            <div class=" lg:px-6">
              <h5>
                {{ settings.search_product_carousel_title | default: 'Featured Products' }}
              </h5>
            </div>

            {% assign products = '' %}
            {% case settings.search_product_source %}
              {% when 'collection' %}
                {% if settings.search_collection != blank %}
                  {% assign products = settings.search_collection.products %}
                {% endif %}
              {% when 'tags' %}
                {% if settings.search_product_tags != blank %}
                  {% assign tag_array = settings.search_product_tags | split: ',' %}
                  {% assign products = collections.all.products %}
                  {% for tag in tag_array %}
                    {% assign tag_trimmed = tag | strip %}
                    {% assign products = products | where: 'tags', tag_trimmed %}
                  {% endfor %}
                {% endif %}
              {% when 'manual' %}
                {% assign products = settings.search_products %}
            {% endcase %}

            {% if products != blank and products.size > 0 %}
              <div class="search-products-carousel swiper overflow-hidden" data-carousel-id="search-products">
                <div class="swiper-wrapper  lg:px-6">
                  {% assign products_shown = 0 %}
                  {% for product in products %}
                    {% if product.available and products_shown < 8 %}
                      <div class="swiper-slide">
                        {% render 'product-card', product: product, show_badges: true, show_rating: true %}
                      </div>
                      {% assign products_shown = products_shown | plus: 1 %}
                    {% endif %}
                  {% endfor %}
                </div>
              </div>
            {% else %}
              <p class="text-gray-500 text-center py-8">No products available</p>
            {% endif %}
          </div>
        {% endif %}
      </div>

      <!-- Matching Categories -->
      <div
        x-show="searchQuery.length > 0 && matchingCategories.length > 0"
        x-transition:enter="transition ease-out duration-400"
        x-transition:enter-start="opacity-0 translate-y-4"
        x-transition:enter-end="opacity-100 translate-y-0"
        class="lg:p-6 p-4 space-y-4 "
      >
        <h5>Categor√≠as que coinciden</h5>

        <div class="flex flex-col gap-2">
          <template x-for="category in matchingCategories" :key="category.id">
            <a
              :href="category.url"
              class="body"
              x-text="`'${category.title}'`"
              @click="addToHistory(searchQuery); closeDrawer()"
            ></a>
          </template>
        </div>
      </div>

      <!-- Search Results -->
      <div
        x-show="searchQuery.length > 0 && searchResults.length > 0"
        x-transition:enter="transition ease-out duration-400"
        x-transition:enter-start="opacity-0 translate-y-4"
        x-transition:enter-end="opacity-100 translate-y-0"
        class="p-6 space-y-4"
      >
        <h5>Productos encontrados (<span x-text="searchResults.length"></span>)</h5>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
          <template x-for="result in searchResults" :key="result.id">
            <div class="product-result-card">
              <a
                :href="result.url"
                class=" group flex flex-col"
                @click="addToHistory(searchQuery); closeDrawer()"
              >
                <div class="relative overflow-hidden aspect-[3/4] bg-gray-100 mb-3 ">
                  <img
                    :src="result.featured_image.url"
                    :alt="result.title"
                    class="w-full h-full object-cover  transition-transform duration-300"
                    width="400"
                    height="400"
                    loading="lazy"
                  >
                  <div class="absolute top-2 left-2">
                    <span class="bg-white/90 backdrop-blur-sm text-black py-1 px-2 text-xs font-medium"> Nuevo </span>
                  </div>
                </div>
                <div class="space-y-2">
                  <p
                    class="body-sm lg:body font-semibold"
                    x-text="result.title"
                  ></p>
                </div>
              </a>
            </div>
          </template>
        </div>

        <div x-show="searchResults.length > 10" class="mt-6 text-center">
          <button
            @click="viewAllResults"
            class="px-6 py-3 bg-black text-white font-medium rounded-lg hover:bg-gray-800 transition-all duration-200 "
          >
            Ver todos los <span x-text="searchResults.length"></span> resultados
          </button>
        </div>
      </div>

      <!-- No Results -->
      <div
        x-show="searchQuery.length > 0 && searchResults.length === 0 && !isSearching"
        x-transition.scale.duration.400ms
        class="p-6 text-center"
      >
        <svg class="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 011 4z"/>
        </svg>
        <h5>No results found</h5>
        <p class="body-sm lg:body">Try searching with different keywords</p>
      </div>

      <!-- Loading -->
      <div
        x-show="isSearching"
        x-transition.opacity.duration.300ms
        class="p-6 text-center"
      >
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto"></div>
        <p class="text-gray-500 mt-2">Searching...</p>
      </div>
    </div>
  </div>
</div>

<script>
  function searchDrawer() {
    return {
      isOpen: false,
      searchQuery: '',
      searchResults: [],
      matchingCategories: [],
      searchHistory: [],
      isSearching: false,
      searchTimeout: null,
      scrollY: 0, // Store scroll position for drawer

      init() {
        this.loadSearchHistory();
        this.$nextTick(() => this.initializeCarousels());
      },

      openDrawer() {
        this.isOpen = true;
        // Store current scroll position
        this.scrollY = window.scrollY;
        document.body.style.overflow = 'hidden';
        document.body.style.position = 'fixed';
        document.body.style.width = '100%';
        document.body.style.top = `-${this.scrollY}px`;
        document.body.classList.add('search-drawer-open');
        // Focus after the transition to prevent abrupt scroll/focus jump
        this.$nextTick(() => {
          const input = this.$el.querySelector('input[type="text"]');
          setTimeout(() => input?.focus(), 380);
        });
      },

      closeDrawer() {
        this.isOpen = false;
        document.body.style.overflow = '';
        document.body.style.position = '';
        document.body.style.width = '';
        document.body.style.top = '';
        document.body.classList.remove('search-drawer-open');
        // Restore scroll position
        window.scrollTo(0, this.scrollY || 0);
        setTimeout(() => {
          this.searchQuery = '';
          this.searchResults = [];
          this.matchingCategories = [];
        }, 300);
      },

      handleSearch() {
        clearTimeout(this.searchTimeout);
        if (this.searchQuery.length < 2) {
          this.searchResults = [];
          return;
        }
        this.searchTimeout = setTimeout(() => this.performSearch(), 300);
      },

      async performSearch() {
        if (this.searchQuery.length < 2) return;

        this.isSearching = true;
        try {
          // Search for products
          const productsResponse = await fetch(
            `/search/suggest.json?q=${encodeURIComponent(this.searchQuery)}&resources[type]=product&resources[limit]=20`
          );
          const productsData = await productsResponse.json();
          this.searchResults = productsData.resources.results.products || [];

          // Search for collections/categories
          const collectionsResponse = await fetch(
            `/search/suggest.json?q=${encodeURIComponent(
              this.searchQuery
            )}&resources[type]=collection&resources[limit]=5`
          );
          const collectionsData = await collectionsResponse.json();
          this.matchingCategories = collectionsData.resources.results.collections || [];

          if (this.searchResults.length > 0 || this.matchingCategories.length > 0) {
            this.addToHistory(this.searchQuery);
          }
        } catch (error) {
          console.error('Search error:', error);
          this.searchResults = [];
          this.matchingCategories = [];
        } finally {
          this.isSearching = false;
        }
      },

      clearSearch() {
        this.searchQuery = '';
        this.searchResults = [];
        this.matchingCategories = [];
      },

      addToHistory(term) {
        if (!term?.trim()) return;
        const trimmedTerm = term.trim();
        this.searchHistory = [trimmedTerm, ...this.searchHistory.filter((item) => item !== trimmedTerm)].slice(0, 3);
        this.saveSearchHistory();
      },

      removeFromHistory(term) {
        this.searchHistory = this.searchHistory.filter((item) => item !== term);
        this.saveSearchHistory();
      },

      clearHistory() {
        this.searchHistory = [];
        this.saveSearchHistory();
      },

      searchFromHistory(term) {
        this.searchQuery = term;
        this.performSearch();
      },

      loadSearchHistory() {
        try {
          const saved = localStorage.getItem('search_history');
          if (saved) this.searchHistory = JSON.parse(saved);
        } catch (error) {
          console.error('Error loading search history:', error);
        }
      },

      saveSearchHistory() {
        try {
          localStorage.setItem('search_history', JSON.stringify(this.searchHistory));
        } catch (error) {
          console.error('Error saving search history:', error);
        }
      },

      viewAllResults() {
        const searchUrl = `/search?q=${encodeURIComponent(this.searchQuery)}`;
        this.addToHistory(this.searchQuery);
        this.closeDrawer();
        window.location.href = searchUrl;
      },

      initializeCarousels() {
        if (typeof Swiper === 'undefined') return;

        // Tags carousel
        const tagsCarousel = this.$el.querySelector('.search-tags-carousel');
        if (tagsCarousel) {
          new Swiper(tagsCarousel, {
            slidesPerView: 'auto',
            spaceBetween: 8,
            freeMode: { enabled: true, sticky: true },
            grabCursor: false,
          });
        }

        // Categories carousel
        const categoriesCarousel = this.$el.querySelector('.search-categories-carousel');
        if (categoriesCarousel) {
          new Swiper(categoriesCarousel, {
            slidesPerView: 1.5,
            spaceBetween: 2,
            freeMode: { enabled: true, sticky: true },
            grabCursor: false,
            breakpoints: { 1024: { slidesPerView: 2.2, spaceBetween: 4 } },
          });
        }

        // Products carousel
        const productsCarousel = this.$el.querySelector('.search-products-carousel');
        if (productsCarousel) {
          new Swiper(productsCarousel, {
            slidesPerView: 1.5,
            spaceBetween: 2,
            freeMode: { enabled: true, sticky: true },
            grabCursor: false,
            breakpoints: { 1024: { slidesPerView: 2.2, spaceBetween: 4 } },
          });
        }
      },
    };
  }
</script>

<style>
  .search-tags-carousel .swiper-slide {
    width: auto;
  }

  .search-categories-carousel .swiper-slide,
  .search-products-carousel .swiper-slide {
    height: auto;
  }
</style>
