{% comment %}
  Product Card Snippet
  Features:
  - Product image with color variant switching
  - Product badges (New, Best Seller)
  - Wishlist heart icon
  - Star rating
  - Product name and price
  - Color swatches with image switching
  - Size selection grid that appears on plus icon click
  - Add to cart functionality
{% endcomment %}

<div class="product-card relative group w-full flex flex-col h-full max-w-full" x-data="productCard({{ product.id }})">
  <!-- Product Image Container -->
  <div class="relative overflow-hidden aspect-[3/4] bg-gray-100 mb-4 w-full group/image flex-shrink-0 max-w-full">
    <!-- Product Image Carousel -->
    {% if product.images.size > 1 %}
      <div
        class="product-image-carousel swiper-product-images-{{ product.id }}-{{ section.id }} w-full h-full pointer-events-none"
        data-product-id="{{ product.id }}"
        data-section-id="{{ section.id }}"
        data-carousel-type="product-images"
        id="product-images-carousel-{{ product.id }}-{{ section.id }}"
      >
        <div class="swiper-wrapper h-full">
          {% for image in product.images %}
            <div class="swiper-slide w-full h-full flex-shrink-0">
              <img
                src="{{ image | image_url: width: 600 }}"
                alt="{{ product.title }} - Image {{ forloop.index }}"
                class="w-full h-full object-cover"
                width="600"
                height="600"
                loading="eager"
              >
            </div>
          {% endfor %}
        </div>

        <!-- Navigation Arrows -->
        <div class="absolute inset-0 pointer-events-none">
          <button
            class="product-prev absolute left-2 top-1/2 -translate-y-1/2 w-10 h-10 md:w-8 md:h-8 bg-black/20 md:bg-transparent border border-white flex items-center justify-center shadow-md opacity-100 md:opacity-0 md:group-hover/image:opacity-100 transition-all duration-200 hover:bg-black/10 active:bg-black/20 z-50 pointer-events-auto cursor-pointer touch-manipulation md:left-2 md:right-auto"
            data-carousel-id="product-images-carousel-{{ product.id }}-{{ section.id }}"
            type="button"
          >
            <svg class="w-5 h-5 md:w-4 md:h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
            </svg>
          </button>
          <button
            class="product-next absolute right-2 top-1/2 -translate-y-1/2 w-10 h-10 md:w-8 md:h-8 bg-black/20 md:bg-transparent border border-white flex items-center justify-center shadow-md opacity-100 md:opacity-0 md:group-hover/image:opacity-100 transition-all duration-200 hover:bg-black/10 active:bg-black/20 z-50 pointer-events-auto cursor-pointer touch-manipulation md:right-2 md:left-auto"
            data-carousel-id="product-images-carousel-{{ product.id }}-{{ section.id }}"
            type="button"
          >
            <svg class="w-5 h-5 md:w-4 md:h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
            </svg>
          </button>
        </div>
      </div>
    {% else %}
      <!-- Single Image -->
      <img
        src="{{ product.featured_image | image_url: width: 400 }}"
        alt="{{ product.title }}"
        class="w-full h-full object-cover"
        width="400"
        height="400"
        loading="eager"
      >
    {% endif %}

    <!-- Product Badges -->
    {% if show_badges and product.tags.size > 0 %}
      <div class="absolute top-2 left-2 flex flex-col gap-1 z-30">
        {% for tag in product.tags %}
          {% assign tag_lower = tag | downcase %}
          {% if tag_lower contains 'nuevo' %}
            <span class="bg-white text-black text-xs px-2 py-1 font-bold">{{ tag |  upcase}}</span>
          {% endif %}
        {% endfor %}
      </div>
    {% endif %}

    <!-- Product Link Overlay (for clicking to go to product page) - positioned behind interactive elements -->
    <a
      href="{{ product.url }}"
      class="absolute inset-0 z-20 pointer-events-auto"
      aria-label="View {{ product.title }}"
    ></a>
  </div>

  <!-- Product Information -->
  <div class="space-y-2 p-1 w-full flex-1 flex flex-col justify-between">
    <!-- Star Rating and Plus Icon -->
    {% if show_rating %}
      <div class="flex items-center justify-between">
        <div class="flex items-center gap-1">
          <div class="flex text-yellow-400">
            {% assign rating = product.metafields.reviews.rating.value | default: 3.5 %}
            {% assign full_stars = rating | floor %}
            {% assign next_star = full_stars | plus: 1 %}
            {% for i in (1..5) %}
              {% if i <= full_stars %}
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              {% elsif i == next_star and rating > full_stars %}
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <defs>
                    <linearGradient id="half-star-{{ product.id }}-{{ i }}">
                      <stop offset="50%" stop-color="currentColor"/>
                      <stop offset="50%" stop-color="#e5e7eb"/>
                    </linearGradient>
                  </defs>
                  <path fill="url(#half-star-{{ product.id }}-{{ i }})" d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              {% else %}
                <svg class="w-4 h-4" fill="#e5e7eb" viewBox="0 0 24 24">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              {% endif %}
            {% endfor %}
          </div>
          <span class="text-sm text-gray-500">({{ product.metafields.reviews.rating.value | default: 0 }})</span>
        </div>
        {% if show_size_selector %}
          <button
            class="text-gray-600 hover:text-gray-800 transition-colors"
            @click="toggleSizeSelector"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
            </svg>
          </button>
        {% endif %}
      </div>
    {% endif %}

    <!-- Product Name and Price -->
    <div class="flex items-start justify-between space-y-2">
      <!-- Product Title Section -->
      <div class="flex flex-col items-start space-y-1">
        <h3 class="font-semibold text-gray-900 text-sm leading-tight">{{ product.title }}</h3>
      </div>

      <!-- Price Section -->
      <div class="flex flex-col items-start space-y-1">
        <span class="font-bold text-gray-900 text-sm"> ${{ product.price | money_without_currency }} </span>
        {% if product.compare_at_price > product.price %}
          <span class="text-xs text-gray-500 line-through">
            ${{ product.compare_at_price | money_without_currency }}s
          </span>
        {% endif %}
      </div>
    </div>
  </div>

  <!-- Size Selector Grid -->
  {% if show_size_selector %}
    <div
      x-show="showSizeSelector"
      x-transition:enter="transition ease-out duration-300"
      x-transition:enter-start="opacity-0 transform translate-y-4"
      x-transition:enter-end="opacity-100 transform translate-y-0"
      x-transition:leave="transition ease-in duration-200"
      x-transition:leave-start="opacity-100 transform translate-y-0"
      x-transition:leave-end="opacity-0 transform translate-y-4"
      class="absolute bottom-full right-0 mb-2 bg-white border border-gray-200 shadow-lg p-3 z-10 min-w-48"
    >
      <div class="grid grid-cols-3 gap-2">
        {% for variant in product.variants %}
          {% if variant.option2 != blank %}
            <button
              class="px-3 py-2 text-sm border border-gray-300 hover:bg-gray-50 transition-colors"
              :class="selectedSize === '{{ variant.option2 }}' ? 'bg-gray-800 text-white border-gray-800' : ''"
              @click="selectSize('{{ variant.option2 }}', {{ variant.id }})"
            >
              {{ variant.option2 }}
            </button>
          {% endif %}
        {% endfor %}
      </div>
    </div>
  {% endif %}
</div>

<script>
  function productCard(productId) {
    return {
      productId: productId,
      selectedVariantId: {{ product.selected_or_first_available_variant.id }},
      selectedVariantImage: null,
      selectedSize: null,
      showSizeSelector: false,
      isInWishlist: false,

      selectVariant(variantId, imageUrl) {
        this.selectedVariantId = variantId;
        if (imageUrl && imageUrl !== '') {
          this.selectedVariantImage = imageUrl;
        }
      },

      toggleSizeSelector() {
        this.showSizeSelector = !this.showSizeSelector;
      },

      selectSize(size, variantId) {
        this.selectedSize = size;
        this.selectedVariantId = variantId;
        this.addToCart(variantId);
        this.showSizeSelector = false;
      },

      async addToCart(variantId) {
        try {
          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              items: [{
                id: variantId,
                quantity: 1
              }]
            })
          });

          if (response.ok) {
            // Trigger cart update event
            document.dispatchEvent(new CustomEvent('cart:updated'));
          }
        } catch (error) {
          console.error('Error adding to cart:', error);
        }
      },

      toggleWishlist() {
        this.isInWishlist = !this.isInWishlist;
        // Here you would typically make an API call to add/remove from wishlist
      },

             // Initialize product image carousel
       init() {
         this.$nextTick(() => {
           const carouselElement = this.$el.querySelector('.product-image-carousel');
           if (carouselElement && typeof Swiper !== 'undefined') {
             const carouselId = carouselElement.id;

             // Check if this carousel is already initialized
             if (carouselElement.swiper) {
               return;
             }

                                                                     const swiper = new Swiper(carouselElement, {
                slidesPerView: 1,
                spaceBetween: 0,
                allowTouchMove: true,
                grabCursor: true,
                navigation: {
                  nextEl: carouselElement.querySelector('.product-next'),
                  prevEl: carouselElement.querySelector('.product-prev'),
                },
                on: {
                  init: function() {
                    updateArrowStates();
                  },
                  slideChange: function() {
                    updateArrowStates();
                  }
                }
              });

              // Function to update arrow states
              function updateArrowStates() {
                const prevArrow = carouselElement.querySelector('.product-prev');
                const nextArrow = carouselElement.querySelector('.product-next');

                if (prevArrow) {
                  if (swiper.isBeginning) {
                    prevArrow.style.opacity = '0.3';
                    prevArrow.style.cursor = 'not-allowed';
                    prevArrow.disabled = true;
                  } else {
                    prevArrow.style.opacity = '1';
                    prevArrow.style.cursor = 'pointer';
                    prevArrow.disabled = false;
                  }
                }

                if (nextArrow) {
                  if (swiper.isEnd) {
                    nextArrow.style.opacity = '0.3';
                    nextArrow.style.cursor = 'not-allowed';
                    nextArrow.disabled = true;
                  } else {
                    nextArrow.style.opacity = '1';
                    nextArrow.style.cursor = 'pointer';
                    nextArrow.disabled = false;
                  }
                }
              }

              // Set initial state and add event listeners
              swiper.on('slideChange', updateArrowStates);
              swiper.on('reachBeginning', updateArrowStates);
              swiper.on('reachEnd', updateArrowStates);

              // Initial state update
              setTimeout(updateArrowStates, 100);

              // Add touch event listeners for mobile
              const prevArrow = carouselElement.querySelector('.product-prev');
              const nextArrow = carouselElement.querySelector('.product-next');

              if (prevArrow) {
                prevArrow.addEventListener('touchstart', () => {
                  if (!swiper.isBeginning) {
                    swiper.slidePrev();
                  }
                });
              }

              if (nextArrow) {
                nextArrow.addEventListener('touchstart', () => {
                  if (!swiper.isEnd) {
                    swiper.slideNext();
                  }
                });
              }

             // Store the swiper instance on the element to avoid conflicts
             carouselElement.swiper = swiper;
           }
         });
       }
    }
  }
</script>
