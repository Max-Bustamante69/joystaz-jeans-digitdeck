{% comment %}
  Product Reviews Section - Clean Version

  Modular reviews section that can be placed anywhere in product templates
  Features:
  - Reviews statistics and list
  - Review form drawer
  - Fully self-contained JavaScript
  - Works with any product context
{% endcomment %}

<div id="product-reviews" class="product-reviews-section py-12 lg:px-12 px-4 lg:py-16 bg-white">
  <div class="reviews-container">
    <!-- Reviews Statistics (Liquid-rendered from metafield) -->
    {% assign reviews = product.metafields.custom.ratings.value %}

    {% if reviews and reviews.count > 0 %}
      {% assign total_reviews = reviews.count %}
      {% assign sum_ratings = 0 %}
      {% for r in reviews %}
        {% assign r_rating = r.rating | default: 0 | plus: 0 %}
        {% assign sum_ratings = sum_ratings | plus: r_rating %}
      {% endfor %}
      {% assign average_rating = sum_ratings | divided_by: total_reviews %}

      {%- comment -%}
        Compute average fit rating across reviews that include `fit_rating` (1-5)
      {%- endcomment -%}
      {% assign sum_fit = 0 %}
      {% assign count_fit = 0 %}
      {% for r in reviews %}
        {% if r.fit_rating %}
          {% assign sum_fit = sum_fit | plus: r.fit_rating %}
          {% assign count_fit = count_fit | plus: 1 %}
        {% endif %}
      {% endfor %}
      {% if count_fit > 0 %}
        {% assign average_fit_float = sum_fit | times: 1.0 | divided_by: count_fit %}
        {% assign average_fit = average_fit_float %}
        {% assign fit_avg_position = average_fit | minus: 1 | times: 25 %}
      {% endif %}

      <!-- Reviews Stats -->
      <div id="reviews-stats-{{ product.id }}" class="reviews-stats mb-8">
        <div class="grid grid-cols-1 lg:grid-cols-5 gap-8 items-end">
          <!-- Left side: Rating and breakdown -->
          <div class="space-y-6 lg:col-span-2">
            <!-- Main rating display -->
            <div class="flex gap-2  text-center lg:text-left  items-center ">
              <div class="text-[18px] font-semibold ">{{ average_rating | round: 1 }}</div>

              {% render 'star-rating',
                rating: average_rating,
                size: 'lg',
                color: 'text-[#f3a000]',
                show_count: false,
                show_review_count: false,
                show_rating_value: false
              %}
              <span class="body-sm">
                Basado en {{ total_reviews }} opinión{% unless total_reviews == 1 %}es{% endunless %}
              </span>
            </div>

            <!-- Rating breakdown -->
            <div class="space-y-1 rating-breakdown lg:col-span-2">
              {% for i in (1..5) %}
                {% assign current_rating = 6 | minus: i %}
                {% assign star_count = 0 %}
                {% for r in reviews %}
                  {% if r.rating == current_rating %}
                    {% assign star_count = star_count | plus: 1 %}
                  {% endif %}
                {% endfor %}
                {% assign percentage = star_count | times: 100 | divided_by: total_reviews %}
                <div class="flex items-center gap-2 rating-bar-item" data-delay="{{ i | minus: 1 | times: 200 }}">
                  <div class="flex items-center gap-2">
                    <span class="text-yellow-400 text-sm">★</span>
                    <span class="text-sm font-medium text-gray-700">{{ current_rating }}</span>
                  </div>
                  <div class="flex-1 bg-gray-200 rounded-full h-1">
                    <div
                      class="rating-bar-fill bg-black h-1 rounded-full"
                      style="width: 0%; --target-width: {{ percentage }}%;"
                      data-target-width="{{ percentage }}%"
                    ></div>
                  </div>
                  <span class="text-sm text-gray-600 text-right">{{ star_count }}</span>
                </div>
              {% endfor %}
            </div>
          </div>

          {%- if count_fit > 0 -%}
            <!-- Middle: Average Fit Bar -->
            <div class="lg:col-span-2">
              <div class="fit-average">
                <div class="relative">
                  <!-- Track -->
                  <div class="relative w-full max-w-sm h-1 bg-gray-300 rounded-full">
                    <!-- 5 position dots -->
                    <div class="absolute inset-0 flex items-center justify-between">
                      <div class="w-1 h-1 bg-gray-400 rounded-full"></div>
                      <div class="w-1 h-1 bg-gray-400 rounded-full"></div>
                      <div class="w-1 h-1 bg-gray-400 rounded-full"></div>
                      <div class="w-1 h-1 bg-gray-400 rounded-full"></div>
                      <div class="w-1 h-1 bg-gray-400 rounded-full"></div>
                    </div>

                    <!-- Marker based on average -->
                    <div
                      class="absolute top-1/2 transform -translate-y-1/2 w-2.5 h-2.5 bg-gray-800 rounded-full"
                      style="left: calc({{ fit_avg_position }}% - 8px);"
                      aria-label="Average fit rating"
                    ></div>
                  </div>

                  <!-- Labels and value -->
                  <div class="flex justify-between mt-3 text-xs text-gray-600 max-w-sm">
                    <span>Muy pequeño</span>
                    <span class="text-center">Tamaño real</span>
                    <span>Muy grande</span>
                  </div>
                </div>
              </div>
            </div>
          {%- endif -%}

          <!-- Review Form Toggle Button -->
          {% if section.settings.show_review_form %}
            <div class="review-form-toggle lg:col-span-1">
              <button
                class="body-lg font-semibold py-4 bg-primary border border-primary text-white hover:bg-transparent hover:border-black hover:text-black transition-colors duration-300  w-full"
                id="write-review-btn-{{ product.id }}"
              >
                {{ section.settings.write_review_text | default: 'Write a Review' }}
              </button>
            </div>
          {% endif %}
        </div>
      </div>

      <!-- Reviews List -->
      <div id="reviews-list-{{ product.id }}" class="reviews-list mb-8">
        {% for review in reviews %}
          <div class="">
            <div class="review-layout grid grid-cols-1 lg:grid-cols-12 gap-6 items-start">
              <!-- Left Column: Reviewer Info (3 cols) -->
              <div class="reviewer-info lg:col-span-3">
                <div class="space-y-2.5">
                  <!-- Reviewer name -->
                  <div class="flex flex-wrap gap-2 items-end">
                    <div class="body font-semibold ">{{ review.author_name }}</div>
                    <!-- Verified buyer badge -->
                    {% if review.is_verified_buyer %}
                      <div class="flex items-center gap-2">
                        <div class="w-4 h-4 bg-green-600 rounded-full flex items-center justify-center">
                          {% render 'check-icon', class: 'size-2.5 stroke-2 text-white' %}
                        </div>
                        <span class="body-sm">Verified Buyer</span>
                      </div>
                    {% endif %}
                  </div>

                  <!-- Reviewer details -->
                  <div class="space-y-2 text-sm">
                    <div class="space-y-2 text-sm">
                      {% if review.age_range %}
                        <div class="flex items-center gap-2">
                          <span class="text-gray-500 font-medium">Rango de edad:</span>
                          <div class="text-gray-900">{{ review.age_range }}</div>
                        </div>
                      {% endif %}

                      {% if review.size_purchased %}
                        <div class="flex items-center gap-2">
                          <span class="text-gray-500 font-medium">Tamaño adquirido:</span>
                          <div class="text-gray-900">{{ review.size_purchased }}</div>
                        </div>
                      {% endif %}

                      {% if review.shipping_rating %}
                        <div class="flex items-center gap-2">
                          <span class="text-gray-500 font-medium">Calificación de envío:</span>
                          <div class="flex items-center gap-1">
                            {% comment %}si el shipping rating es 1 -> renderizar un texto que dice muy malo, 2 -> malo, 3 -> regular, 4 -> bueno, 5 -> muy bueno {% endcomment %}
                            <span class="text-gray-600 text-xs ml-1">
                              {% if review.shipping_rating == 1 %}
                                Muy malo
                              {% elsif review.shipping_rating == 2 %}
                                Malo
                              {% elsif review.shipping_rating == 3 %}
                                Regular
                              {% elsif review.shipping_rating == 4 %}
                                Bueno
                              {% elsif review.shipping_rating == 5 %}
                                Excelente
                              {% endif %}
                            </span>
                            <span class="text-gray-600 text-xs ml-1">({{ review.shipping_rating }}/5)</span>
                          </div>
                        </div>
                      {% endif %}

                      {% if review.recommends_product != null %}
                        <div class="flex items-center gap-2">
                          <span class="text-gray-500 font-medium">Recomienda el producto:</span>
                          <div class="flex items-center gap-1">
                            {% if review.recommends_product %}
                              <span class="text-green-600 text-sm">✓</span>
                              <span class="text-green-600 text-sm font-medium">Si</span>
                            {% else %}
                              <span class="text-red-500 text-sm">✗</span>
                              <span class="text-red-500 text-sm font-medium">No</span>
                            {% endif %}
                          </div>
                        </div>
                      {% endif %}
                    </div>
                  </div>
                </div>
              </div>

              <!-- Middle Column: Review Content (6 cols) -->
              <div class="review-content lg:col-span-6">
                <div class="space-y-2">
                  <!-- Star rating -->
                  {% render 'star-rating',
                    rating: review.rating,
                    size: 'md',
                    color: 'text-[#f3a000]',
                    show_count: false,
                    show_review_count: false,
                    show_rating_value: false
                  %}
                  {% if review.title %}
                    <h5>{{ review.title }}</h5>
                  {% endif %}

                  {% if review.body %}
                    <p class="text-gray-700 text-base leading-relaxed">{{ review.body }}</p>
                  {% endif %}

                  <!-- Fit evaluation bar -->
                  {% if review.fit_rating %}
                    <div class="fit-evaluation">
                      <div class="relative">
                        <!-- Fit slider track -->
                        <div class="relative w-full max-w-sm h-1 bg-gray-300 rounded-full">
                          <!-- Position dots (5 positions for scale 1-5) -->
                          <div class="absolute inset-0 flex items-center justify-between">
                            <div class="w-1 h-1 bg-gray-400 rounded-full"></div>
                            <div class="w-1 h-1 bg-gray-400 rounded-full"></div>
                            <div class="w-1 h-1 bg-gray-400 rounded-full"></div>
                            <div class="w-1 h-1 bg-gray-400 rounded-full"></div>
                            <div class="w-1 h-1 bg-gray-400 rounded-full"></div>
                          </div>

                          <!-- Active marker - Fixed positioning for 1-5 scale -->
                          {% assign fit_position = review.fit_rating | minus: 1 | times: 25 %}
                          <div
                            class="absolute top-1/2 transform -translate-y-1/2 w-2.5 h-2.5 bg-gray-800 rounded-full"
                            style="left: calc({{ fit_position }}% - 8px);"
                          ></div>
                        </div>

                        <!-- Labels -->
                        <div class="flex justify-between mt-3 text-xs text-gray-600 max-w-sm">
                          <span>Muy pequeño</span>
                          <span class="text-center">Tamaño real</span>
                          <span>Muy grande</span>
                        </div>
                      </div>
                    </div>
                  {% endif %}
                </div>
              </div>

              <!-- Right Column: Media & Timestamp (3 cols) -->
              <div class="review-media lg:col-span-3">
                <div class="flex flex-col items-end gap-4">
                  <!-- Timestamp -->
                  {% if review.created_at %}
                    <span class="text-sm text-gray-500 text-right">
                      {{ review.created_at | date: '%B %d, %Y' }}
                    </span>
                  {% endif %}

                  <!-- Media carousel -->
                  {% if review.image or review.video %}
                    <div class="review-media-carousel relative w-32 h-40">
                      <div class="swiper review-swiper-{{ forloop.index }}">
                        <div class="swiper-wrapper">
                          {% if review.image %}
                            <div class="swiper-slide">
                              <div class="w-full h-full bg-gray-100  overflow-hidden">
                                <img
                                  src="{{ review.image | image_url: width: 300 }}"
                                  alt="Review image"
                                  class="w-full h-full object-cover"
                                  width="128"
                                  height="160"
                                  loading="lazy"
                                >
                              </div>
                            </div>
                          {% endif %}

                          {% if review.video %}
                            <div class="swiper-slide">
                              <div class="w-full h-full bg-gray-100  overflow-hidden">
                                {% if review.video.sources %}
                                  <video
                                    controls
                                    class="w-full h-full object-cover"
                                    muted
                                    loop
                                    playsinline
                                    preload="metadata"
                                  >
                                    {% for source in review.video.sources %}
                                      <source src="{{ source.url }}" type="{{ source.mime_type }}">
                                    {% endfor %}
                                    Your browser does not support the video tag.
                                  </video>
                                {% elsif review.video.value and review.video.value.sources %}
                                  <video
                                    controls
                                    class="w-full h-full object-cover"
                                    muted
                                    loop
                                    playsinline
                                    preload="metadata"
                                  >
                                    {% for source in review.video.value.sources %}
                                      <source src="{{ source.url }}" type="{{ source.mime_type }}">
                                    {% endfor %}
                                    Your browser does not support the video tag.
                                  </video>
                                {% elsif review.video contains 'gid://shopify/Video/' %}
                                  <video
                                    controls
                                    class="w-full h-full object-cover"
                                    muted
                                    loop
                                    playsinline
                                    preload="metadata"
                                  >
                                    <source src="{{ review.video | file_url }}" type="video/mp4">
                                    Your browser does not support the video tag.
                                  </video>
                                {% elsif review.video contains '.mp4' %}
                                  <video
                                    controls
                                    class="w-full h-full object-cover"
                                    muted
                                    loop
                                    playsinline
                                    preload="metadata"
                                  >
                                    <source src="{{ review.video }}" type="video/mp4">
                                    Your browser does not support the video tag.
                                  </video>
                                {% else %}
                                  <div class="w-full h-full flex items-center justify-center bg-gray-800 ">
                                    <a
                                      href="{{ review.video }}"
                                      target="_blank"
                                      rel="noopener"
                                      class="text-white text-center p-2"
                                    >
                                      <div class="text-2xl mb-1">▶️</div>
                                      <div class="text-xs">Ver video</div>
                                    </a>
                                  </div>
                                {% endif %}
                              </div>
                            </div>
                          {% endif %}
                        </div>

                        <!-- Navigation arrows -->
                        {% if review.image and review.video %}
                          <div class="swiper-button-next review-next-{{ forloop.index }}"></div>
                          <div class="swiper-button-prev review-prev-{{ forloop.index }}"></div>
                        {% endif %}
                      </div>
                    </div>
                  {% else %}
                    <div class="w-32 h-40 bg-gray-100  flex items-center justify-center">
                      <span class="text-gray-400 text-xs text-center">Sin medios</span>
                    </div>
                  {% endif %}
                </div>
              </div>
            </div>
          </div>
        {% endfor %}
      </div>
    {% else %}
      <div id="reviews-stats-{{ product.id }}" class="reviews-stats mb-8">
        <p class="text-gray-500 text-center py-4">No reviews yet</p>
      </div>
      <div id="reviews-list-{{ product.id }}" class="reviews-list mb-8">
        <p class="text-gray-500 text-center py-4">No reviews found</p>
      </div>
      {% if section.settings.show_review_form %}
        <div class="review-form-toggle max-w-sm mx-auto">
          <button
            class="body-lg font-semibold py-3 bg-primary border border-primary text-white hover:bg-transparent hover:border-black hover:text-black transition-colors duration-300  w-full"
            id="write-review-btn-{{ product.id }}-empty"
          >
            {{ section.settings.write_review_text | default: 'Write a Review' }}
          </button>
        </div>
      {% endif %}
    {% endif %}
  </div>
</div>

<script>
  // Simple initialization
  (function() {
    const productId = {{ product.id }};

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeReviews);
    } else {
      initializeReviews();
    }

    function initializeReviews() {
       // Initialize Swiper carousels for reviews with multiple media
       if (typeof Swiper !== 'undefined') {
         setTimeout(() => {
           const reviewSwipers = document.querySelectorAll('[class*="review-swiper-"]');
           reviewSwipers.forEach((swiperElement, index) => {
             if (!swiperElement.swiper) {
               const swiperIndex = swiperElement.className.match(/review-swiper-(\d+)/)[1];
               new Swiper(swiperElement, {
                 direction: 'horizontal',
                 slidesPerView: 1,
                 spaceBetween: 0,
                 loop: false,
                 navigation: {
                   nextEl: `.review-next-${swiperIndex}`,
                   prevEl: `.review-prev-${swiperIndex}`,
                 },
               });
             }
           });
         }, 200);
       }

       // Initialize rating bar animations
       initializeRatingBars();
       
       // Initialize video elements
       initializeVideos();

       // Wire review form drawer open/close
       initializeReviewFormDrawer();

       // Initialize review form fields and handlers
       initializeReviewForm();
     }

     function initializeRatingBars() {
       const ratingBars = document.querySelectorAll('.rating-bar-fill');

       // Reset all bars to 0 width
       ratingBars.forEach(bar => {
         bar.style.width = '0%';
       });

       // Animate bars sequentially using data attribute fallback
       ratingBars.forEach((bar, index) => {
         const delay = index * 200; // 200ms delay between each bar

         setTimeout(() => {
           // Prefer CSS custom property; fallback to data attribute
           let targetWidth = bar.style.getPropertyValue('--target-width');
           if (!targetWidth || targetWidth === '0%') {
             targetWidth = bar.getAttribute('data-target-width');
           }
           if (targetWidth && targetWidth !== '0%') {
             bar.style.width = targetWidth;
           }
         }, delay);
       });
     }

     function initializeVideos() {
       const videos = document.querySelectorAll('.review-media-carousel video');
       
       videos.forEach(video => {
         // Ensure video is muted for autoplay compliance
         video.muted = true;
         video.playsInline = true;

         // Check if HLS.js is available and needed
         const videoSrc = video.querySelector('source')?.src;
         if (videoSrc && videoSrc.includes('.m3u8')) {
           if (typeof Hls !== 'undefined' && Hls.isSupported()) {
             const hls = new Hls();
             hls.loadSource(videoSrc);
             hls.attachMedia(video);
             hls.on(Hls.Events.MANIFEST_PARSED, () => {
               console.log('HLS manifest parsed for review video');
             });
           } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
             video.src = videoSrc;
           }
         }

         video.addEventListener('error', (e) => {
           console.error('Review video loading error:', e);
         });

         video.addEventListener('loadedmetadata', () => {
           console.log('Review video metadata loaded');
         });
       });
     }

    function initializeReviewFormDrawer() {
      const openButtons = [
        document.getElementById('write-review-btn-{{ product.id }}'),
        document.getElementById('write-review-btn-{{ product.id }}-empty')
      ].filter(Boolean);

      const inlineForm = document.getElementById('review-form-inline-{{ product.id }}');
      const firstInput = inlineForm ? inlineForm.querySelector('input[name="authorName"]') : null;

      function openInline() {
        if (!inlineForm) return;
        inlineForm.style.display = 'block';
        inlineForm.scrollIntoView({ behavior: 'smooth', block: 'start' });
        setTimeout(() => { if (firstInput) firstInput.focus(); }, 250);
      }

      function closeInline() {
        if (!inlineForm) return;
        inlineForm.style.display = 'none';
      }

      function showSuccessMessage() {
        const successMessage = document.getElementById('review-success-{{ product.id }}');
        if (successMessage) {
          successMessage.classList.remove('hidden');
          successMessage.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }

      function hideSuccessMessage() {
        const successMessage = document.getElementById('review-success-{{ product.id }}');
        if (successMessage) {
          successMessage.classList.add('hidden');
        }
      }

      openButtons.forEach(btn => btn.addEventListener('click', openInline));
      
      // Close button functionality
      const closeBtn = document.getElementById('close-review-form-{{ product.id }}');
      if (closeBtn) {
        closeBtn.addEventListener('click', closeInline);
      }

      // Success message close button
      const closeSuccessBtn = document.getElementById('close-success-message-{{ product.id }}');
      if (closeSuccessBtn) {
        closeSuccessBtn.addEventListener('click', hideSuccessMessage);
      }

      // expose for programmatic use
      window.openReviewDrawer = openInline;
      window.closeReviewDrawer = closeInline;
      window.showReviewSuccess = showSuccessMessage;
    }

    function initializeReviewForm() {
      const form = document.getElementById('review-form-{{ product.id }}');
      if (!form) return;

      const API_BASE_URL = '{{ section.settings.reviews_api_url | default: "http://localhost:3001/api/reviews" }}';

      // Set product id
      const productIdInput = form.querySelector('#reviewProductId');
      if (productIdInput) productIdInput.value = {{ product.id }};

      // Star rating helpers
      function initStars(containerId, hiddenInputId, textId) {
        const container = document.getElementById(containerId);
        const input = document.getElementById(hiddenInputId);
        const textEl = textId ? document.getElementById(textId) : null;
        if (!container || !input) return;
        const stars = Array.from(container.querySelectorAll('[data-rating]'));
        function paint(r) {
          stars.forEach((s, i) => s.classList.toggle('active', i < r));
          if (textEl) {
            const labels = ['', 'Poor', 'Fair', 'Good', 'Very Good', 'Excellent'];
            textEl.textContent = labels[r] || '';
          }
        }
        stars.forEach((star, idx) => {
          star.addEventListener('click', () => { input.value = idx + 1; paint(idx + 1); });
          star.addEventListener('mouseenter', () => paint(idx + 1));
        });
        container.addEventListener('mouseleave', () => paint(parseInt(input.value) || 0));
      }

      initStars('overallRating-{{ product.id }}', 'rating-{{ product.id }}', 'ratingText-{{ product.id }}');
      // Removed star init for fit; using slider instead
      initStars('shippingRating-{{ product.id }}', 'shippingRatingValue-{{ product.id }}');

      // Fit slider functionality
      (function initFitSlider(){
        const container = document.querySelector('.fit-slider-container');
        if (!container) return;
        const marker = document.getElementById('fit-marker-{{ product.id }}');
        const hiddenInput = document.getElementById('fitRatingValue-{{ product.id }}');
        const labels = container.querySelectorAll('[data-fit]');
        const positions = 5;
        function setPosition(pos){
          const clamped = Math.max(1, Math.min(5, pos));
          const percent = ((clamped - 1) / (positions - 1)) * 100;
          marker.style.left = `calc(${percent}% - 8px)`;
          hiddenInput.value = String(clamped);
        }
        // default center (3 = Tamaño real)
        setPosition(3);
        labels.forEach(label=>{
          label.addEventListener('click',()=>{
            const val = parseInt(label.getAttribute('data-fit'));
            setPosition(val);
          });
        });
        let dragging = false;
        const trackWrapper = container.querySelector('.relative');
        function handleMove(clientX){
          const rect = trackWrapper.getBoundingClientRect();
          const rel = Math.max(0, Math.min(rect.width, clientX - rect.left));
          const pct = (rel / rect.width) * 100;
          const pos = Math.round((pct / 100) * (positions - 1)) + 1;
          setPosition(pos);
        }
        marker.addEventListener('mousedown', (e)=>{ dragging = true; e.preventDefault(); });
        document.addEventListener('mousemove', (e)=>{ if (dragging) handleMove(e.clientX); });
        document.addEventListener('mouseup', ()=>{ dragging = false; });
        marker.addEventListener('touchstart', (e)=>{ dragging = true; e.preventDefault(); });
        document.addEventListener('touchmove', (e)=>{ if (dragging) handleMove(e.touches[0].clientX); });
        document.addEventListener('touchend', ()=>{ dragging = false; });
        // expose reset helper
        window.resetFitSlider = ()=> setPosition(3);
      })();

      // Size slider functionality
      function initSizeSlider() {
        const container = document.querySelector('.size-slider-container');
        if (!container) return;
        
        const marker = document.getElementById('size-marker-{{ product.id }}');
        const hiddenInput = document.getElementById('sizePurchased-{{ product.id }}');
        const sizeLabels = container.querySelectorAll('[data-size]');
        
        if (!marker || !hiddenInput || sizeLabels.length === 0) return;
        
        const sizes = Array.from(sizeLabels).map(label => label.dataset.size);
        const totalPositions = sizes.length;
        
        function updateMarker(position) {
          if (position < 0 || position >= totalPositions) return;
          const percentage = (position / (totalPositions - 1)) * 100;
          marker.style.left = `calc(${percentage}% - 8px)`;
          hiddenInput.value = sizes[position];
        }
        
        // Click on size labels
        sizeLabels.forEach((label, index) => {
          label.addEventListener('click', () => updateMarker(index));
        });
        
        // Drag functionality for marker
        let isDragging = false;
        
        marker.addEventListener('mousedown', (e) => {
          isDragging = true;
          e.preventDefault();
        });
        
        document.addEventListener('mousemove', (e) => {
          if (!isDragging) return;
          
          const containerRect = container.querySelector('.relative').getBoundingClientRect();
          const relativeX = e.clientX - containerRect.left;
          const percentage = Math.max(0, Math.min(100, (relativeX / containerRect.width) * 100));
          const position = Math.round((percentage / 100) * (totalPositions - 1));
          
          updateMarker(position);
        });
        
        document.addEventListener('mouseup', () => {
          isDragging = false;
        });
        
        // Touch support
        marker.addEventListener('touchstart', (e) => {
          isDragging = true;
          e.preventDefault();
        });
        
        document.addEventListener('touchmove', (e) => {
          if (!isDragging) return;
          
          const containerRect = container.querySelector('.relative').getBoundingClientRect();
          const relativeX = e.touches[0].clientX - containerRect.left;
          const percentage = Math.max(0, Math.min(100, (relativeX / containerRect.width) * 100));
          const position = Math.round((percentage / 100) * (totalPositions - 1));
          
          updateMarker(position);
        });
        
        document.addEventListener('touchend', () => {
          isDragging = false;
        });
        
        // Initialize with first size
        updateMarker(0);
      }
      
      function resetSizeSlider() {
        const marker = document.getElementById('size-marker-{{ product.id }}');
        const hiddenInput = document.getElementById('sizePurchased-{{ product.id }}');
        if (marker && hiddenInput) {
          marker.style.left = '0%';
          hiddenInput.value = '';
        }
      }
      
      initSizeSlider();

      // File selection feedback (validation + counts)
      function setupFileUploadFeedback() {
        const imageInput = document.getElementById('imageFiles-{{ product.id }}');
        const videoInput = document.getElementById('videoFiles-{{ product.id }}');
        const imageFeedback = document.getElementById('image-files-feedback-{{ product.id }}');
        const videoFeedback = document.getElementById('video-files-feedback-{{ product.id }}');

        if (imageInput && imageFeedback) {
          imageInput.addEventListener('change', (e) => {
            const files = Array.from(e.target.files || []);
            if (files.length === 0) {
              imageFeedback.className = 'mt-2 text-sm hidden';
              imageFeedback.textContent = '';
              return;
            }

            const maxSize = 5 * 1024 * 1024; // 5MB per image
            const invalid = files.filter(f => !f.type.startsWith('image/') || f.size > maxSize);

            if (invalid.length > 0) {
              imageFeedback.className = 'mt-2 text-sm text-red-600';
              imageFeedback.textContent = '⚠️ Algunos archivos no son válidos (solo imágenes, máx 5MB).';
            } else {
              imageFeedback.className = 'mt-2 text-sm text-green-600';
              imageFeedback.textContent = `✅ ${files.length} imagen${files.length > 1 ? 'es' : ''} seleccionada${files.length > 1 ? 's' : ''}`;
            }
          });
        }

        if (videoInput && videoFeedback) {
          videoInput.addEventListener('change', (e) => {
            const file = (e.target.files || [])[0];
            if (!file) {
              videoFeedback.className = 'mt-2 text-sm hidden';
              videoFeedback.textContent = '';
              return;
            }

            const maxSize = 20 * 1024 * 1024; // 20MB
            const isValid = file.type.startsWith('video/') && file.size <= maxSize;

            if (!isValid) {
              videoFeedback.className = 'mt-2 text-sm text-red-600';
              videoFeedback.textContent = '⚠️ Archivo no válido (solo videos, máx 20MB).';
            } else {
              videoFeedback.className = 'mt-2 text-sm text-green-600';
              videoFeedback.textContent = '✅ Video seleccionado';
            }
          });
        }
      }

      setupFileUploadFeedback();

      const submitBtn = form.querySelector('[type="submit"]');
      const loading = document.getElementById('review-loading-{{ product.id }}');
      const alertContainer = document.getElementById('review-alert-{{ product.id }}');

      function showAlert(type, message) {
        if (!alertContainer) return;
        alertContainer.innerHTML = `<div class="alert ${type === 'success' ? 'alert-success' : 'alert-error'}">${message}</div>`;
      }

      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const fd = new FormData(form);
        if (!fd.get('sizePurchased')) {
          showAlert('error', 'Por favor selecciona una {{ settings.size_option_label | default: "talla" }} comprada.');
          return;
        }
        if (submitBtn) submitBtn.disabled = true;
        if (loading) loading.style.display = 'block';
        alertContainer.innerHTML = '';

        try {
          const API_BASE_URL = '{{ section.settings.reviews_api_url | default: "http://localhost:3001/api/reviews" }}';
          if (API_BASE_URL) {
            // Create JSON payload with all form data
            const payload = {
              productId: parseInt('{{ product.id }}'),
              rating: parseInt(fd.get('rating')),
              title: fd.get('title'),
              body: fd.get('body'),
              authorName: fd.get('authorName'),
              authorEmail: fd.get('authorEmail'),
              isVerifiedBuyer: false,
              ageRange: fd.get('ageRange') || undefined,
              sizePurchased: fd.get('sizePurchased') || undefined,
              fitRating: fd.get('fitRating') ? parseInt(fd.get('fitRating')) : undefined,
              shippingRating: fd.get('shippingRating') ? parseInt(fd.get('shippingRating')) : undefined,
              recommendsProduct: false
            };

            // Optional media: convert first selected image/video to base64 Data URL
            const imageInput = document.getElementById('imageFiles-{{ product.id }}');
            const videoInput = document.getElementById('videoFiles-{{ product.id }}');
            const MAX = 5 * 1024 * 1024; // 5MB per file
            const IMG_TYPES = ['image/jpeg','image/png','image/gif'];
            const VID_TYPES = ['video/mp4','video/webm'];
            const fileToBase64 = (file) => new Promise((resolve, reject) => {
              const reader = new FileReader();
              reader.onload = () => resolve(reader.result);
              reader.onerror = reject;
              reader.readAsDataURL(file);
            });

            // Handle image (take first image if multiple selected)
            if (imageInput && imageInput.files && imageInput.files.length > 0) {
              const img = imageInput.files[0];
              if (!IMG_TYPES.includes(img.type)) {
                throw new Error('Tipo de imagen no soportado (usa JPG, PNG o GIF)');
              }
              if (img.size > MAX) {
                throw new Error('La imagen excede 5MB');
              }
              payload.image = await fileToBase64(img);
            }

            // Handle video (single)
            if (videoInput && videoInput.files && videoInput.files.length > 0) {
              const vid = videoInput.files[0];
              if (!VID_TYPES.includes(vid.type)) {
                throw new Error('Tipo de video no soportado (usa MP4 o WebM)');
              }
              if (vid.size > MAX) {
                throw new Error('El video excede 5MB');
              }
              payload.video = await fileToBase64(vid);
            }

            // Debug: Log payload (without huge media)
            console.log('Review payload:', {
              ...payload,
              image: payload.image ? '[base64 image]' : undefined,
              video: payload.video ? '[base64 video]' : undefined,
            });

            // Send JSON payload
            const res = await fetch(API_BASE_URL, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(payload)
            });
            const result = await res.json().catch(() => ({}));
            if (!res.ok || result.success === false) {
              throw new Error(result.message || 'Failed to submit review');
            }
          }

          // Close form and show success message
          if (window.closeReviewDrawer) window.closeReviewDrawer();
          if (window.showReviewSuccess) window.showReviewSuccess();

          // Reset form for next use
          form.reset();
          // reset stars
          ['overallRating-{{ product.id }}','fitRating-{{ product.id }}','shippingRating-{{ product.id }}']
            .forEach(id => {
              const c = document.getElementById(id);
              if (!c) return;
              c.querySelectorAll('[data-rating]')
                .forEach(el => el.classList.remove('active'));
            });
          // reset fit slider
          if (window.resetFitSlider) window.resetFitSlider();
          // reset file feedback
          const imgFb = document.getElementById('image-files-feedback-{{ product.id }}');
          const vidFb = document.getElementById('video-files-feedback-{{ product.id }}');
          if (imgFb) { imgFb.className = 'mt-2 text-sm hidden'; imgFb.textContent = ''; }
          if (vidFb) { vidFb.className = 'mt-2 text-sm hidden'; vidFb.textContent = ''; }
        } catch (err) {
          console.error(err);
          showAlert('error', err.message || 'Error enviando la reseña. Intenta nuevamente.');
        } finally {
          if (submitBtn) submitBtn.disabled = false;
          if (loading) loading.style.display = 'none';
        }
      });
    }
  })();
</script>

<style>
  /* Review Card Styles */
  .review-card {
    transition: all 0.2s ease;
  }

  .review-card:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  /* Rating Bar Animation Styles */
  .rating-bar-fill {
    transition: width 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    transform-origin: left;
  }

  .rating-bar-item {
    opacity: 0;
    animation: fadeInUp 0.6s ease forwards;
  }

  .rating-bar-item:nth-child(1) {
    animation-delay: 0ms;
  }
  .rating-bar-item:nth-child(2) {
    animation-delay: 200ms;
  }
  .rating-bar-item:nth-child(3) {
    animation-delay: 400ms;
  }
  .rating-bar-item:nth-child(4) {
    animation-delay: 600ms;
  }
  .rating-bar-item:nth-child(5) {
    animation-delay: 800ms;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Review Layout Grid */
  .review-layout {
    align-items: flex-start;
  }

  /* Reviewer Info Column */
  .reviewer-info {
    position: sticky;
    top: 20px;
  }

  /* Review Media Column */
  .review-media {
    position: sticky;
    top: 20px;
  }

  /* Fit Evaluation Styles */
  .fit-evaluation {
    padding: 16px 0;
  }

  /* Enhanced Fit Slider for 5-position scale */
  .fit-evaluation .relative {
    max-width: 320px;
  }

  .fit-evaluation .w-3 {
    width: 12px;
    height: 12px;
  }

  .fit-evaluation .w-4 {
    width: 16px;
    height: 16px;
    z-index: 10;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  /* Review Media Carousel Styles */
  .review-media-carousel {
    position: relative;
    width: 128px;
    height: 160px;
  }

  .review-media-carousel .swiper {
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .review-media-carousel .swiper-slide {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .review-media-carousel .swiper-button-next,
  .review-media-carousel .swiper-button-prev {
    color: #374151;
    background: rgba(255, 255, 255, 0.9);
    width: 24px;
    height: 24px;
    border-radius: 50%;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    transition: all 0.2s ease;
  }

  .review-media-carousel .swiper-button-next:hover,
  .review-media-carousel .swiper-button-prev:hover {
    background: rgba(255, 255, 255, 1);
    transform: scale(1.1);
  }

  .review-media-carousel .swiper-button-next:after,
  .review-media-carousel .swiper-button-prev:after {
    font-size: 10px;
    font-weight: bold;
  }

  .review-media-carousel .swiper-button-next {
    right: 4px;
  }

  .review-media-carousel .swiper-button-prev {
    left: 4px;
  }

  /* Review Drawer Transitions */
  #review-form-overlay-{{ product.id }}.is-open {
    opacity: 1;
  }
  #review-form-drawer-{{ product.id }}.is-open {
    transform: translateY(0);
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .review-layout {
      grid-template-columns: 1fr !important;
      gap: 1rem;
    }

    .reviewer-info,
    .review-media {
      position: static;
    }

    .review-media {
      order: -1;
      align-items: center;
    }

    .review-media-carousel {
      width: 120px;
      height: 150px;
    }

    .fit-evaluation .relative {
      max-width: 280px;
    }
  }

  @media (max-width: 640px) {
    .review-card {
      padding: 1rem;
    }

    .review-media-carousel {
      width: 100px;
      height: 130px;
    }
  }

  /* Star visual state */
  #overallRating-{{ product.id }} [data-rating],
  #fitRating-{{ product.id }} [data-rating],
  #shippingRating-{{ product.id }} [data-rating] { color: #d1d5db; transition: color .15s ease; }
  #overallRating-{{ product.id }} [data-rating].active,
  #fitRating-{{ product.id }} [data-rating].active,
  #shippingRating-{{ product.id }} [data-rating].active { color: #f59e0b; }

  /* Size Slider Styles */
  .size-slider-container {
    padding: 16px 0;
  }

  .size-slider-container .relative {
    max-width: 320px;
  }

  .size-slider-container .w-1 {
    width: 4px;
    height: 4px;
  }

  .size-slider-container .w-2\.5 {
    width: 10px;
    height: 10px;
    z-index: 10;
  }

  .size-slider-container [data-size] {
    transition: color 0.2s ease;
  }

  .size-slider-container [data-size]:hover {
    color: #374151;
  }

  /* Fit Slider Styles (match the review card style) */
  .fit-slider-container { padding: 16px 0; }
  .fit-slider-container .relative { max-width: 320px; }
  .fit-slider-container .w-1 { width: 4px; height: 4px; }
  .fit-slider-container .w-2\.5 { width: 10px; height: 10px; z-index: 10; }
  .fit-slider-container [data-fit] { transition: color 0.2s ease; }
  .fit-slider-container [data-fit]:hover { color: #374151; }
</style>

<!-- Review Form Inline (always visible) -->
<div id="review-form-inline-{{ product.id }}" class="max-w-2xl mx-auto my-8 px-4" style="display:none;">
  <div class="bg-white border border-gray-200 rounded-xl shadow-sm p-6">
    <div class="flex items-center justify-between mb-4">
      <h4 class="font-semibold text-lg">Escribe una reseña</h4>
      <div class="flex items-center gap-3">
        <span class="text-gray-400 body-sm">Producto #{{ product.id }}</span>
        <button
          id="close-review-form-{{ product.id }}"
          class="text-gray-400 hover:text-gray-600 transition-colors"
          type="button"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      </div>
    </div>
    <div id="review-alert-{{ product.id }}" class="mb-3"></div>
    <form id="review-form-{{ product.id }}" class="space-y-5">
      <input id="reviewProductId" type="hidden" name="productId" value="{{ product.id }}">

      <div>
        <label class="block text-sm font-medium mb-1">Calificación general *</label>
        <div class="flex items-center gap-3">
          <div id="overallRating-{{ product.id }}" class="flex gap-1 text-2xl text-yellow-400">
            <span data-rating="1" class="cursor-pointer">★</span>
            <span data-rating="2" class="cursor-pointer">★</span>
            <span data-rating="3" class="cursor-pointer">★</span>
            <span data-rating="4" class="cursor-pointer">★</span>
            <span data-rating="5" class="cursor-pointer">★</span>
          </div>
          <span id="ratingText-{{ product.id }}" class="text-sm text-gray-500">Click para calificar</span>
        </div>
        <input id="rating-{{ product.id }}" name="rating" type="hidden" required>
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div>
          <label class="block text-sm font-medium mb-1">Título *</label>
          <input name="title" type="text" maxlength="200" class="w-full border border-gray-300 rounded-md p-2" required>
        </div>
        <div>
          <label class="block text-sm font-medium mb-1">Tu nombre *</label>
          <input
            name="authorName"
            type="text"
            maxlength="100"
            class="w-full border border-gray-300 rounded-md p-2"
            required
          >
        </div>
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div>
          <label class="block text-sm font-medium mb-1">Tu email *</label>
          <input name="authorEmail" type="email" class="w-full border border-gray-300 rounded-md p-2" required>
        </div>
        <div>
          <label class="block text-sm font-medium mb-1">Rango de edad</label>
          <select name="ageRange" class="w-full border border-gray-300 rounded-md p-2">
            <option value="">Seleccionar</option>
            <option value="18-24">18-24</option>
            <option value="25-34">25-34</option>
            <option value="35-44">35-44</option>
            <option value="45-54">45-54</option>
            <option value="55-64">55-64</option>
            <option value="65+">65+</option>
          </select>
        </div>
      </div>

      <div>
        <label class="block text-sm font-medium mb-1">Reseña *</label>
        <textarea
          name="body"
          maxlength="2000"
          class="w-full border border-gray-300 rounded-md p-2"
          rows="5"
          required
        ></textarea>
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div>
          <label class="block text-sm font-medium mb-1">Ajuste (Fit)</label>
          <!-- Fit slider -->
          <div class="fit-slider-container">
            <div class="relative">
              <div class="relative w-full max-w-sm h-1 bg-gray-300 rounded-full">
                <div class="absolute inset-0 flex items-center justify-between">
                  <div class="w-1 h-1 bg-gray-400 rounded-full"></div>
                  <div class="w-1 h-1 bg-gray-400 rounded-full"></div>
                  <div class="w-1 h-1 bg-gray-400 rounded-full"></div>
                  <div class="w-1 h-1 bg-gray-400 rounded-full"></div>
                  <div class="w-1 h-1 bg-gray-400 rounded-full"></div>
                </div>
                <div
                  id="fit-marker-{{ product.id }}"
                  class="absolute top-1/2 transform -translate-y-1/2 w-2.5 h-2.5 bg-gray-800 rounded-full cursor-pointer transition-all duration-200 hover:scale-110"
                  style="left: calc(50% - 8px);"
                ></div>
              </div>
              <div class="flex justify-between mt-3 text-xs text-gray-600 max-w-sm">
                <span class="cursor-pointer hover:text-gray-800 transition-colors" data-fit="1">Muy pequeña</span>
                <span class="cursor-pointer hover:text-gray-800 transition-colors" data-fit="3">Tamaño real</span>
                <span class="cursor-pointer hover:text-gray-800 transition-colors" data-fit="5">Muy grande</span>
              </div>
            </div>
            <input id="fitRatingValue-{{ product.id }}" name="fitRating" type="hidden">
          </div>
        </div>
        <div>
          <label class="block text-sm font-medium mb-1">
            {{- settings.size_option_label | default: 'Talla' }} comprada</label
          >
          {% assign size_option = '' %}
          {% for opt in product.options_with_values %}
            {% assign opt_down = opt.name | downcase %}
            {% assign size_handle_down = settings.size_option_handle | default: 'talla' | downcase %}
            {% if opt_down contains 'size' or opt_down contains size_handle_down %}
              {% assign size_option = opt %}
              {% break %}
            {% endif %}
          {% endfor %}
          <select name="sizePurchased" class="w-full border border-gray-300 rounded-md p-2">
            <option value="">Seleccionar</option>
            {% if size_option != '' %}
              {% for v in size_option.values %}
                <option value="{{ v }}">{{ v }}</option>
              {% endfor %}
            {% endif %}
          </select>
        </div>
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div>
          <label class="block text-sm font-medium mb-1">Envío</label>
          <div id="shippingRating-{{ product.id }}" class="flex gap-1 text-2xl text-yellow-400">
            <span data-rating="1" class="cursor-pointer">★</span>
            <span data-rating="2" class="cursor-pointer">★</span>
            <span data-rating="3" class="cursor-pointer">★</span>
            <span data-rating="4" class="cursor-pointer">★</span>
            <span data-rating="5" class="cursor-pointer">★</span>
          </div>
          <input id="shippingRatingValue-{{ product.id }}" name="shippingRating" type="hidden">
        </div>
        <div>
          <label class="block text-sm font-medium mb-1">Imágenes (opcional)</label>
          <label class="inline-flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 border border-gray-300 rounded-md cursor-pointer w-full justify-center">
            <input
              name="imageFiles"
              id="imageFiles-{{ product.id }}"
              type="file"
              accept="image/*"
              multiple
              class="hidden"
            >
            <svg class="w-4 h-4 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7h18M3 7a2 2 0 012-2h14a2 2 0 012 2M3 7v10a2 2 0 002 2h14a2 2 0 002-2V7m-5 4l-3 3-2-2-4 4"/>
            </svg>
            <span>Seleccionar imágenes</span>
          </label>
          <small class="text-gray-500">JPG, PNG, GIF. Máx 5MB c/u.</small>
          <div id="image-files-feedback-{{ product.id }}" class="mt-2 text-sm hidden"></div>
        </div>
      </div>

      <div>
        <label class="block text-sm font-medium mb-1">Video (opcional)</label>
        <label class="inline-flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 border border-gray-300 rounded-md cursor-pointer w-full justify-center">
          <input name="videoFiles" id="videoFiles-{{ product.id }}" type="file" accept="video/*" class="hidden">
          <svg class="w-4 h-4 text-gray-700" fill="currentColor" viewBox="0 0 24 24">
            <path d="M8 5v14l11-7z"/>
          </svg>
          <span>Seleccionar video</span>
        </label>
        <small class="text-gray-500">MP4, WebM. Máx 20MB.</small>
        <div id="video-files-feedback-{{ product.id }}" class="mt-2 text-sm hidden"></div>
      </div>

      <button
        type="submit"
        class="py-3 px-4 bg-primary text-white border border-primary hover:bg-transparent hover:text-black w-full rounded-md"
      >
        Enviar reseña
      </button>
    </form>

    <div id="review-loading-{{ product.id }}" class="text-center py-4 hidden">
      <div
        class="spinner mx-auto mb-2"
        style="border: 3px solid #eee; border-top-color: #111; border-radius: 50%; width: 28px; height: 28px; animation: spin 1s linear infinite;"
      ></div>
      <div class="text-sm text-gray-600">Enviando reseña...</div>
    </div>
  </div>
</div>

<!-- Success Message (hidden by default) -->
<div id="review-success-{{ product.id }}" class="max-w-2xl mx-auto my-8 px-4 hidden">
  <div class="bg-white border border-gray-200 rounded-xl shadow-sm p-6 text-center">
    <div class="mb-4">
      <svg class="w-16 h-16 text-green-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
      </svg>
      <h4 class="text-xl font-semibold text-gray-900 mb-2">¡Gracias por tu reseña!</h4>
      <p class="text-gray-600">
        Tu reseña ha sido enviada y está pendiente de aprobación. Te notificaremos cuando sea publicada.
      </p>
    </div>
    <button
      id="close-success-message-{{ product.id }}"
      class="px-6 py-2 bg-primary text-white rounded-md hover:bg-primary/90 transition-colors"
      type="button"
    >
      Cerrar
    </button>
  </div>
</div>

{% schema %}
{
  "name": "Product Reviews",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "reviews_api_url",
      "label": "Reviews API URL",
      "info": "Endpoint to POST new reviews as JSON",
      "default": "http://localhost:3001/api/reviews"
    },
    {
      "type": "header",
      "content": "Review Form Settings"
    },
    {
      "type": "checkbox",
      "id": "show_review_form",
      "label": "Show Review Form",
      "default": true,
      "info": "Enable/disable the review form functionality"
    },
    {
      "type": "text",
      "id": "write_review_text",
      "label": "Write Review Button Text",
      "default": "Write a Review",
      "info": "Text for the write review button"
    }
  ],
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}
