{% comment %}
  Cart Drawer Section
  Features:
  - Slide-in drawer from right
  - Cart items with quantity controls
  - Progress bar for free shipping
  - Secure payment button
  - Responsive design
  - Fully customizable via schema
{% endcomment %}

<div
  x-cloak
  x-data="cartDrawer()"
  x-show="isOpen"
  class="fixed inset-0 z-50 overflow-hidden"
  @cart:open.window="openDrawer()"
  @cart:updated.window="loadCart()"
>
  <!-- Backdrop -->
  <div
    x-show="isOpen"
    x-transition:enter="transition ease-out duration-500"
    x-transition:enter-start="opacity-0"
    x-transition:enter-end="opacity-100"
    x-transition:leave="transition ease-in duration-400"
    x-transition:leave-start="opacity-100"
    x-transition:leave-end="opacity-0"
    class="absolute inset-0 bg-black/70"
  ></div>

  <!-- Drawer -->
  <div
    x-show="isOpen"
    x-transition:enter="transform transition ease-out duration-350"
    x-transition:enter-start="translate-x-full"
    x-transition:enter-end="translate-x-0"
    x-transition:leave="transform transition ease-in duration-300"
    x-transition:leave-start="translate-x-0"
    x-transition:leave-end="translate-x-full"
    class="absolute right-0 top-0 h-full   w-[88vw] lg:w-[{{ section.settings.drawer_width | default: 420 }}px] bg-white shadow-xl flex flex-col overflow-hidden"
    @click.outside="closeDrawer()"
  >
    <!-- Header - Sticky at top -->
    <div class="sticky top-0 lg:px-5 px-4 z-10 bg-white flex items-center justify-between ">
      <h2 class="text-lg font-semibold text-gray-900">
        {{ section.settings.cart_title | default: 'Tu Carrito' }}
        <span class="opacity-50" x-text="cartItems.length"></span>
      </h2>
      <button
        @click="closeDrawer()"
        class="text-black p-4 h-full transition-colors -mr-4"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Cart Items -->
    <div
      class="flex overflow-y-auto flex-col scrollbar-hide justify-between h-full"
      style="-webkit-overflow-scrolling: touch;"
    >
      <!-- Dynamic Cart Thresholds -->
      {% assign sorted_thresholds = section.blocks
        | where: 'type', 'cart_threshold'
        | sort: 'settings.threshold_value'
      %}

      {% if sorted_thresholds.size > 0 %}
        <div class="py-4 lg:px-5 px-4 border-gray-100">
          <!-- Progress Bar with Dynamic Segments -->
          <div class="w-full h-[4.8px] mb-2 flex gap-1">
            {% for block in sorted_thresholds %}
              <div
                class="flex-1 bg-gray-200 overflow-hidden "
                data-threshold
                data-threshold-id="{{ block.id }}"
                data-threshold-title="{{ block.settings.threshold_title }}"
                data-threshold-value="{{ block.settings.threshold_value | times: 100 }}"
              >
                <div
                  class="bg-[#468847] h-full transition-all duration-300"
                  :style="`width: ${getThresholdSegmentProgress({{ block.settings.threshold_value | times: 100 }}, {{ forloop.index0 }})}%`"
                ></div>
              </div>
            {% endfor %}
          </div>

          <!-- Current Threshold Status -->
          <div class="text-left">
            <template x-for="threshold in sortedThresholds" :key="threshold.id">
              <div x-show="isCurrentThreshold(threshold)" class="text-sm">
                <p class="text-black font-semibold" x-show="!isThresholdAchieved(threshold)">
                  {{ section.settings.progress_text | default: 'Estas a' }}
                  <span class="font-bold" x-text="'$' + formatMoney(threshold.value - cartTotal)"></span>
                  {{ section.settings.goal_text | default: 'de conseguir' }}
                  <span class="font-semibold" x-text="threshold.title"></span>
                </p>
                <p class="text-green-600 font-semibold" x-show="isThresholdAchieved(threshold)">
                  {{ section.settings.achieved_text | default: '¡Felicidades! Has conseguido' }}
                  <span class="font-medium" x-text="threshold.title"></span>
                </p>
              </div>
            </template>
          </div>
        </div>
      {% endif %}

    

      <template x-if="cartItems.length === 0">
        <div class="text-center flex flex-col gap-4 py-12 px-4 lg:px-5 h-full justify-center">
          <h6>
            {{ section.settings.empty_cart_title | default: 'Tu carrito está vacío' }}
          </h6>

          {% if section.settings.empty_buttons_collections.count > 0 %}
            <div class="flex flex-col gap-2 w-full">
              {% for collection in section.settings.empty_buttons_collections %}
                {% if collection %}
                  <a
                    href="{{ collection.url }}"
                    class="block w-full border border-primary  py-3 body font-semibold   transition-colors duration-200 hover:bg-primary hover:text-white"
                  >
                    {{ collection.title }}
                  </a>
                {% endif %}
              {% endfor %}
            </div>
          {% endif %}
        </div>
      </template>

      <div class="flex flex-col gap-4 relative mb-7">
        <template x-for="item in cartItems" :key="item.key">
          {% render 'cart-product-card' %}
        </template>
        <!-- Subtle white fade at bottom -->
        <div
          class="absolute bottom-0 left-0 right-0 h-8 bg-gradient-to-t from-white to-transparent pointer-events-none"
        ></div>
      </div>

      <!-- Cart Add-on Item -->
      {% assign addon_block = section.blocks | where: 'type', 'cart_addon' | first %}
      {% if addon_block and addon_block.settings.addon_product %}
        <div
          class="border-t border-b border-gray-200 lg:mx-5 mx-4 mb-7"
          x-show="!addonInCart"
          x-transition:enter="transition ease-out duration-200"
          x-transition:enter-start="opacity-0 transform scale-95"
          x-transition:enter-end="opacity-100 transform scale-100"
          x-transition:leave="transition ease-in duration-150"
          x-transition:leave-start="opacity-100 transform scale-100"
          x-transition:leave-end="opacity-0 transform scale-95"
        >
          <div class="flex items-center gap-3">
            <!-- Product Image -->
            <div class="w-12 h-12 flex-shrink-0">
              {% if addon_block.settings.addon_product.featured_image %}
                <img
                  src="{{ addon_block.settings.addon_product.featured_image | image_url: width: 48 }}"
                  alt="{{ addon_block.settings.addon_product.title }}"
                  class="w-full h-full object-cover"
                  width="48"
                  height="48"
                  loading="lazy"
                >
              {% else %}
                <div class="w-full h-full bg-gray-200  flex items-center justify-center">
                  <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                </div>
              {% endif %}
            </div>

            <!-- Product Info -->
            <div class="flex-1">
              <p class="body font-semibold">
                {{ addon_block.settings.addon_title | default: addon_block.settings.addon_product.title }}
                <span class="text-gray-600"
                  >por COP {{ addon_block.settings.addon_product.price | money_without_currency -}}
                </span>
              </p>
            </div>

            <!-- Checkbox -->

            <input
              type="checkbox"
              id="addon-{{ addon_block.id }}"
              class="w-6 h-6 rounded-none text-primary appearance-none border-black border "
              x-model="addonSelected"
              data-variant-id="{{ addon_block.settings.addon_product.variants.first.id }}"
              @change="toggleAddon('{{ addon_block.settings.addon_product.variants.first.id }}', $event.target.checked)"
            >
          </div>
        </div>
      {% endif %}


        <!-- Cart Accordion -->
      {% assign accordion_blocks = section.blocks | where: 'type', 'cart_accordion' %}
      {% if accordion_blocks.size > 0 %}
        <div class="lg:px-5 px-4 py-4">
          {% render 'accordion',
            items: accordion_blocks,
            accordion_id: 'cart-accordion',
            title_color: '#1f2937',
            answer_color: '#6b7280'
          %}
        </div>
      {% endif %}


      
      {% if section.settings.show_product_carousel %}
        <div class="flex flex-col gap-3">
          <h5 class=" lg:px-5 px-4">
            {{ section.settings.carousel_title | default: 'También te puede interesar' }}
          </h5>

          {% comment %} Simplified, portable recommendation logic {% endcomment %}
          {% assign max_products = section.settings.carousel_max_products | default: 8 %}
          {% assign final_products = '' %}
          {% assign products_added = 0 %}
          {% assign total_cart_items = 0 %}
          {% assign cart_product_handles = '' %}
          {% for item in cart.items %}
            {% assign total_cart_items = total_cart_items | plus: item.quantity %}
            {% assign cart_product_handles = cart_product_handles | append: item.product.handle | append: ',' %}
          {% endfor %}

          {% assign col1 = blank %}
          {% assign col2 = blank %}

          {% if total_cart_items > 0 %}
            {% comment %} Cart has items - use related products from cart item collections {% endcomment %}
            {% for item in cart.items %}
              {% for collection in item.product.collections %}
                {% if col1 == blank %}
                  {% assign col1 = collection %}
                {% elsif col2 == blank and collection.handle != col1.handle %}
                  {% assign col2 = collection %}
                {% endif %}
                {% if col1 and col2 %}{% break %}{% endif %}
              {% endfor %}
              {% if col1 and col2 %}{% break %}{% endif %}
            {% endfor %}
          {% else %}
            {% comment %} Cart is empty - use fallback logic {% endcomment %}
            {% if section.settings.fallback_type == 'products' and section.settings.fallback_products.count > 0 %}
              {% comment %} Use manual fallback products {% endcomment %}
              {% assign fallback_products_count = section.settings.fallback_products.count %}
              {% if fallback_products_count > 0 %}
                {% assign max_products = fallback_products_count %}
              {% endif %}
              {% for product in section.settings.fallback_products %}
                {% assign is_in_cart = false %}
                {% if cart_product_handles contains product.handle %}
                  {% assign is_in_cart = true %}
                {% endif %}
                {% if product.available and products_added < max_products and is_in_cart == false %}
                  {% assign final_products = final_products | append: product.handle | append: ',' %}
                  {% assign products_added = products_added | plus: 1 %}
                {% endif %}
                {% if products_added >= max_products %}{% break %}{% endif %}
              {% endfor %}
            {% else %}
              {% comment %} Use fallback collections when cart is empty {% endcomment %}
              {% for collection in section.settings.fallback_collections %}
                {% if col1 == blank %}
                  {% assign col1 = collection %}
                {% elsif col2 == blank and collection.handle != col1.handle %}
                  {% assign col2 = collection %}
                {% endif %}
                {% if col1 and col2 %}{% break %}{% endif %}
              {% endfor %}
            {% endif %}
          {% endif %}

          {% comment %} Use collection logic when cart has items OR when using fallback collections {% endcomment %}
          {% if total_cart_items > 0
            or section.settings.fallback_type != 'products'
            or section.settings.fallback_products.count == 0
          %}
            {% assign quota1 = max_products %}
            {% assign quota2 = 0 %}
            {% if col2 %}
              {% assign quota1 = max_products | divided_by: 2 %}
              {% assign quota2 = max_products | minus: quota1 %}
            {% endif %}

            {% if col1 %}
              {% assign added1 = 0 %}
              {% for product in col1.products %}
                {% assign is_in_cart = false %}
                {% if cart_product_handles contains product.handle %}
                  {% assign is_in_cart = true %}
                {% endif %}
                {% if product.available and added1 < quota1 and products_added < max_products and is_in_cart == false %}
                  {% assign final_products = final_products | append: product.handle | append: ',' %}
                  {% assign added1 = added1 | plus: 1 %}
                  {% assign products_added = products_added | plus: 1 %}
                {% endif %}
                {% if products_added >= max_products or added1 >= quota1 %}{% break %}{% endif %}
              {% endfor %}
            {% endif %}

            {% if col2 and products_added < max_products %}
              {% assign added2 = 0 %}
              {% for product in col2.products %}
                {% assign is_in_cart = false %}
                {% if cart_product_handles contains product.handle %}
                  {% assign is_in_cart = true %}
                {% endif %}
                {% if product.available and added2 < quota2 and products_added < max_products and is_in_cart == false %}
                  {% assign final_products = final_products | append: product.handle | append: ',' %}
                  {% assign added2 = added2 | plus: 1 %}
                  {% assign products_added = products_added | plus: 1 %}
                {% endif %}
                {% if products_added >= max_products or added2 >= quota2 %}{% break %}{% endif %}
              {% endfor %}
            {% endif %}
          {% endif %}

          {% if final_products != blank %}
            <div
              class="cart-product-carousel swiper-cart-carousel overflow-hidden lg:px-5 px-4 touch-pan-y"
              data-carousel-id="cart-carousel"
              data-carousel-type="cart-carousel"
              @touchstart.stop
              @touchmove.stop
              @touchend.stop
              @mousedown.stop
              @mousemove.stop
              @mouseup.stop
            >
              <div class="swiper-wrapper">
                {% assign product_handles = final_products | split: ',' %}
                {% for handle in product_handles %}
                  {% if handle != blank %}
                    {% assign product = all_products[handle] %}
                    {% if product and product.available %}
                      <div class="swiper-slide h-auto" @click.stop @touchstart.stop @touchend.stop>
                        <div class="w-full h-full">
                          {% render 'product-card',
                            product: product,
                            show_badges: false,
                            show_rating: false,
                            show_color_swatches: false,
                            show_size_selector: true,
                            hide_info: true,
                            show_wishlist: true
                          %}
                        </div>
                      </div>
                    {% endif %}
                  {% endif %}
                {% endfor %}
              </div>
            </div>
          {% endif %}

          {% comment %} Removed old empty-state collections carousel (replaced by simplified logic above) {% endcomment %}
        </div>
      {% endif %}
    </div>

    <!-- Footer - Sticky at bottom -->
    <div
      x-show="cartItems.length > 0"
      class="sticky bottom-0 z-10 bg-white border-t border-gray-100 lg:px-5 px-4 pt-4 pb-5 space-y-2.5 shadow-lg"
      style="box-shadow: 0 -4px 6px -1px rgba(0, 0, 0, 0.1), 0 -2px 4px -1px rgba(0, 0, 0, 0.06);"
    >
      <!-- Discount Savings -->
      <div class="flex justify-between items-center" x-show="cartSavings > 0">
        <span class="body-sm   font-semibold text-green-600">
          {{ section.settings.discount_savings_text | default: 'DESCUENTOS APLICADOS:' }}
        </span>
        <div class="text-right">
          <span class=" body-sm font-semibold text-green-600" x-text="'-$' + formatMoney(cartSavings)"></span>
        </div>
      </div>

      <!-- Subtotal -->
      <div class="flex justify-between items-center">
        <span class="lg:body body-sm uppercase font-semibold">
          {{- section.settings.subtotal_text | default: 'SUBTOTAL:' -}}
        </span>
        <div class="text-right">
          <div class="flex items-center space-x-2">
            <span class="bg-green-100 text-green-800 text-xs px-2 py-1 rounded font-medium">
              {{ section.settings.savings_text | default: 'AHORRA' }} $<span x-text="formatMoney(cartSavings)"></span>
            </span>

            <span
              class="line-through opacity-50 lg:body body-sm"
              x-show="cartSavings > 0"
              x-text="'$' + formatMoney(originalTotal)"
            ></span>
            <span class="lg:body body-sm font-semibold" x-text="'$' + formatMoney(cartTotal)"></span>
          </div>
        </div>
      </div>

      <!-- Payment Button -->
      <button
        @click="proceedToCheckout()"
        class="group"
        :disabled="cartItems.length === 0"
        :class="cartItems.length > 0 ? 'w-full bg-primary text-white py-4 px-6 font-semibold body border border-primary hover:bg-transparent hover:border-black hover:text-black transition-colors duration-300 flex items-center justify-center gap-2' : 'w-full bg-gray-300 text-gray-500 py-4 px-6 font-semibold body border border-gray-300 cursor-not-allowed transition-colors duration-300 flex items-center justify-center gap-2'"
      >
        {% render 'lock-icon', class: 'w-5 h-5 fill-white group-hover:fill-black' %}
        {{ section.settings.checkout_button_text | default: 'Paga de forma segura' }}
      </button>

      <!-- Payment Methods -->
      {% assign payment_icons = section.blocks | where: 'type', 'payment_icon' %}
      {% if payment_icons.size > 0 %}
        <div class="flex items-center justify-center gap-1">
          {% for block in payment_icons %}
            {% if block.settings.payment_type != blank %}
              {{ block.settings.payment_type | payment_type_svg_tag: class: 'w-6 h-6 text-gray-400' }}
            {% elsif block.settings.custom_icon != blank %}
              <img
                src="{{ block.settings.custom_icon | image_url: width: 24 }}"
                alt="{{ block.settings.icon_alt | default: 'Payment Method' }}"
                class="w-6 h-6 text-gray-400 object-contain"
                width="24"
                height="24"
                loading="lazy"
                {{ block.shopify_attributes }}
              >
            {% endif %}
          {% endfor %}
        </div>
      {% endif %}
    </div>
  </div>
</div>

<script>
  function cartDrawer() {
    return {
      isOpen: false,
      cartItems: [],
      cartTotal: 0,
      originalTotal: 0,
      cartSavings: 0,
      // Reactive wishlist state
      wishlistHandles: [],
      loading: false,
      scrollY: 0, // Store scroll position for drawer
      freeShippingThreshold: {{ section.settings.free_shipping_threshold | default: 150 | times: 100 | times: 4000 }}, // Convert USD to COP (1 USD ≈ 4000 COP)
      
      // Add-on state
      addonSelected: false,
      addonVariantId: null,
      addonInCart: false,
      
      // Cart thresholds
      sortedThresholds: [],
      appliedDiscounts: new Set(),

      init() {
        this.loadCart();
        this.tryGetShopifyFreeShippingThreshold();
        this.initThresholds();
        this.initAddon();
        
        // Use $nextTick to ensure DOM is ready
        this.$nextTick(() => {
          this.initializeCartCarousel();
        });
        
        // Load wishlist state
        try {
          const raw = localStorage.getItem('wishlist_v1');
          this.wishlistHandles = raw ? JSON.parse(raw) : [];
        } catch(e) { this.wishlistHandles = []; }
        
        // Listen for cart updates to refresh product carousel
        this.$watch('cartItems', () => {
          this.refreshProductCarousel();
          this.checkAddonInCart();
        });
        
        // Listen for cart updates from other components (like product cards)
        window.addEventListener('cart:updated', () => {
          this.loadCart();
          // Refresh recommendations when cart is updated from external sources
          this.$nextTick(() => {
            this.refreshProductCarousel();
          });
        });
      },

      // Cleanup when component is destroyed
      destroy() {
        // Clean up any event listeners or timers
        if (this.cartCarouselSwiper) {
          this.cartCarouselSwiper.destroy(true, true);
        }
      },

      async tryGetShopifyFreeShippingThreshold() {
        // Try to get free shipping threshold from Shopify's shipping zones
        try {
          const response = await fetch('/admin/shipping_zones.json');
          if (response.ok) {
            const shippingZones = await response.json();
            // Look for free shipping rates in shipping zones
            for (const zone of shippingZones.shipping_zones) {
              for (const rate of zone.weight_based_shipping_rates || []) {
                if (rate.name.toLowerCase().includes('free') && rate.price === '0.00') {
                  // Found a free shipping rate, but we need the threshold
                  // This is limited as Shopify doesn't expose free shipping thresholds via API
                  console.log('Found free shipping rate:', rate);
                }
              }
            }
          }
        } catch (error) {
          // Silently fail - we'll use the theme setting instead
          console.log('Could not fetch shipping zones, using theme setting');
        }
      },

      openDrawer() {
        this.isOpen = true;
        // Store current scroll position
        this.scrollY = window.scrollY;
        document.body.style.overflow = 'hidden';
        document.body.style.position = 'fixed';
        document.body.style.width = '100%';
        document.body.style.top = `-${this.scrollY}px`;
        document.body.classList.add('cart-drawer-open');
      },

      closeDrawer() {
        this.isOpen = false;
        document.body.style.overflow = '';
        document.body.style.position = '';
        document.body.style.width = '';
        document.body.style.top = '';
        document.body.classList.remove('cart-drawer-open');
        // Restore scroll position
        window.scrollTo(0, this.scrollY || 0);
      },

      async loadCart() {
        try {
          const response = await fetch('/cart.js');
          const cart = await response.json();
          
          // Clean product titles by removing numbers and special characters
          this.cartItems = cart.items.map(item => ({
            ...item,
            product_title: this.cleanProductTitle(item.product_title)
          }));
          
          // Store cart totals for discount calculation
          this.cartTotal = cart.total_price;
          this.originalTotal = cart.original_total_price || cart.total_price;
          this.cartSavings = this.originalTotal - this.cartTotal;

        } catch (error) {
          console.error('Error loading cart:', error);
        }
      },

      // Clean product title by removing numbers and special characters
      cleanProductTitle(title) {
        if (!title) return '';
        
        let cleaned = title;
        
        // Remove numbers
        cleaned = cleaned.replace(/[0-9]/g, '');
        
        // Remove special characters
        cleaned = cleaned.replace(/[!@#$%^&*()_+\-=\[\]{};:,.<>?~'"\\\/]/g, '');
        
        // Clean up extra spaces
        cleaned = cleaned.replace(/\s+/g, ' ').trim();
        
        return cleaned;
      },


      async updateQuantity(itemKey, newQuantity) {
        if (newQuantity < 1) {
          await this.removeItem(itemKey);
          return;
        }

        this.loading = true;
        try {
          const response = await fetch('/cart/change.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              id: itemKey,
              quantity: newQuantity,
            }),
          });

          if (response.ok) {
            await this.loadCart();
            this.$dispatch('cart:updated');
            // Also dispatch to window to ensure header receives the event
            window.dispatchEvent(new CustomEvent('cart:updated'));
          }
        } catch (error) {
          console.error('Error updating quantity:', error);
        } finally {
          this.loading = false;
        }
      },

      async removeItem(itemKey) {
        this.loading = true;
        try {
          const response = await fetch('/cart/change.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              id: itemKey,
              quantity: 0,
            }),
          });

          if (response.ok) {
            await this.loadCart();
            this.$dispatch('cart:updated');
            // Also dispatch to window to ensure header receives the event
            window.dispatchEvent(new CustomEvent('cart:updated'));
            this.showRemoveMessage();
          }
        } catch (error) {
          console.error('Error removing item:', error);
        } finally {
          this.loading = false;
        }
      },

      showRemoveMessage() {
        // Remove message removed as requested
        // Item removed from cart silently
      },

      formatMoney(cents) {
        return (cents / 100).toLocaleString('es-CO', {
          minimumFractionDigits: 0,
          maximumFractionDigits: 0,
        });
      },

      proceedToCheckout() {
        window.location.href = '/checkout';
      },

      // ===== Wishlist helpers (shared with product cards) =====
      getWishlist() {
        return Array.isArray(this.wishlistHandles) ? this.wishlistHandles : [];
      },
      setWishlist(list) {
        try { localStorage.setItem('wishlist_v1', JSON.stringify(list)); } catch(e) { /* noop */ }
        this.wishlistHandles = list;
      },
      isInWishlist(handle) {
        if (!handle) return false;
        return this.getWishlist().includes(String(handle));
      },
      normalizeHandleFromItem(item) {
        if (!item) return '';
        if (item.handle) return String(item.handle);
        if (item.product_handle) return String(item.product_handle);
        if (item.url && item.url.indexOf('/products/') >= 0) {
          try {
            const seg = item.url.split('/products/')[1];
            return String(seg.split('?')[0]).replace(/\/$/, '');
          } catch(e) { return ''; }
        }
        return '';
      },
      toggleWishlistByHandle(handle) {
        if (!handle) return;
        const list = [...this.getWishlist()];
        const idx = list.indexOf(String(handle));
        if (idx >= 0) { list.splice(idx, 1); } else { list.push(String(handle)); }
        this.setWishlist(list);
        this.$dispatch('wishlist:updated', { handles: list });
      },

      editItem(item) {
        // Implement edit item functionality here
        console.log('Edit item:', item);
        // This could open a modal or navigate to product page
      },

      initializeCartCarousel() {
        this.$nextTick(() => {
          const carouselElements = this.$el.querySelectorAll('.swiper-cart-carousel');
          if (carouselElements && typeof Swiper !== 'undefined') {
            carouselElements.forEach((carouselElement) => {
              // Skip if already initialized
              if (carouselElement.swiper) return;

              // Create swiper instance for each carousel
              const swiperInstance = new Swiper(carouselElement, {
              slidesPerView: 2,
              spaceBetween: 2,
              freeMode: {
                enabled: true,
                sticky: true,
                momentum: true,
                momentumRatio: 0.25,
                momentumVelocityRatio: 0.5,
                momentumBounce: true,
                momentumBounceRatio: 0.3,
              },
              grabCursor: false,
              navigation: {
                nextEl: carouselElement.querySelector('.cart-carousel-next'),
                prevEl: carouselElement.querySelector('.cart-carousel-prev'),
              },
              breakpoints: {
                1024: {
                  spaceBetween: 2,
                },
              },
                on: {
                  init: function() {
                    updateCartCarouselArrowStates(this);
                  },
                  slideChange: function() {
                    updateCartCarouselArrowStates(this);
                  },
                  reachBeginning: function() {
                    updateCartCarouselArrowStates(this);
                  },
                  reachEnd: function() {
                    updateCartCarouselArrowStates(this);
                  },
                },
              });

              // Function to update arrow states for cart carousel
              function updateCartCarouselArrowStates(swiper) {
                const prevArrow = carouselElement.querySelector('.cart-carousel-prev');
                const nextArrow = carouselElement.querySelector('.cart-carousel-next');

                if (prevArrow) {
                  if (swiper.isBeginning) {
                    prevArrow.style.opacity = '0.3';
                    prevArrow.style.cursor = 'not-allowed';
                    prevArrow.disabled = true;
                  } else {
                    prevArrow.style.opacity = '1';
                    prevArrow.style.cursor = 'pointer';
                    prevArrow.disabled = false;
                  }
                }

                if (nextArrow) {
                  if (swiper.isEnd) {
                    nextArrow.style.opacity = '0.3';
                    nextArrow.style.cursor = 'not-allowed';
                    nextArrow.disabled = true;
                  } else {
                    nextArrow.style.opacity = '1';
                    nextArrow.style.cursor = 'pointer';
                    nextArrow.disabled = false;
                  }
                }
              }

              // Store the swiper instance on the element to avoid conflicts
              carouselElement.swiper = swiperInstance;
            });
          }
        });
       },

       // Refresh product carousel when cart items change
       async refreshProductCarousel() {
         try {
           // Get fresh cart data to update recommendations
           const response = await fetch('/cart.js');
           const cart = await response.json();
           
           // Update cart items with fresh data
           this.cartItems = cart.items.map(item => ({
             ...item,
             product_title: this.cleanProductTitle(item.product_title)
           }));
           
           // Update cart totals with fresh data
           this.cartTotal = cart.total_price;
           this.originalTotal = cart.original_total_price || cart.total_price;
           this.cartSavings = this.originalTotal - this.cartTotal;
           
           // Update carousel display based on new cart state
           this.updateCarouselDisplay();
           
         } catch (error) {
           console.error('Error refreshing product carousel:', error);
         }
       },
       
       // Update carousel display based on current cart state
       updateCarouselDisplay() {
         this.$nextTick(() => {
           const carouselElement = this.$el.querySelector('.cart-product-carousel');
           if (carouselElement) {
             const slides = carouselElement.querySelectorAll('.swiper-slide');
             slides.forEach(slide => {
               const productCard = slide.querySelector('[data-wishlist-card]');
               if (productCard) {
                 const productHandle = productCard.getAttribute('data-handle');
                 const isInCart = this.cartItems.some(item => item.handle === productHandle);
                 
                 if (isInCart) {
                   slide.style.display = 'none';
                   slide.classList.add('product-in-cart');
                 } else {
                   slide.style.display = '';
                   slide.classList.remove('product-in-cart');
                 }
               }
             });
             
             // Update swiper if it exists
             if (carouselElement.swiper) {
               carouselElement.swiper.update();
             }
           }
         });
       },

       // Cart Thresholds methods
       initThresholds() {
         try {
           // Get thresholds from Liquid template
           const thresholdElements = this.$el.querySelectorAll('[data-threshold]');
           this.sortedThresholds = Array.from(thresholdElements).map(el => ({
             id: el.dataset.thresholdId,
             title: el.dataset.thresholdTitle,
             value: parseInt(el.dataset.thresholdValue)
           })).sort((a, b) => a.value - b.value);
           
           // Set up watchers after thresholds are initialized
           this.$watch('cartTotal', () => {
             this.checkThresholds();
           });
         } catch (error) {
           console.error('Error initializing thresholds:', error);
           this.sortedThresholds = [];
         }
       },

       getThresholdProgress(thresholdValue) {
         if (this.cartTotal >= thresholdValue) return 100;
         return Math.min((this.cartTotal / thresholdValue) * 100, 100);
       },

       getThresholdSegmentProgress(thresholdValue, segmentIndex) {
         try {
           if (!this.sortedThresholds || this.sortedThresholds.length === 0) return 0;
           
           const currentThresholdIndex = this.getCurrentThresholdIndex();
           
           // If this segment is before the current threshold, fill it completely
           if (segmentIndex < currentThresholdIndex) {
             return 100;
           }
           
           // If this is the current threshold segment, show partial progress
           if (segmentIndex === currentThresholdIndex) {
             if (this.cartTotal >= thresholdValue) return 100;
             return Math.min((this.cartTotal / thresholdValue) * 100, 100);
           }
           
           // If this segment is after the current threshold, don't fill it
           return 0;
         } catch (error) {
           console.error('Error calculating segment progress:', error);
           return 0;
         }
       },

       getCurrentThresholdIndex() {
         try {
           if (!this.sortedThresholds || this.sortedThresholds.length === 0) return 0;
           
           for (let i = 0; i < this.sortedThresholds.length; i++) {
             if (this.cartTotal < this.sortedThresholds[i].value) {
               return i;
             }
           }
           // If all thresholds are achieved, return the last index
           return this.sortedThresholds.length - 1;
         } catch (error) {
           console.error('Error getting current threshold index:', error);
           return 0;
         }
       },

       isCurrentThreshold(threshold) {
         try {
           if (!this.sortedThresholds || this.sortedThresholds.length === 0) return false;
           
           const currentIndex = this.sortedThresholds.findIndex(t => t.id === threshold.id);
           
           if (currentIndex === -1) return false;
           
           // Only show the next unachieved threshold
           for (let i = 0; i < this.sortedThresholds.length; i++) {
             if (this.cartTotal < this.sortedThresholds[i].value) {
               return i === currentIndex;
             }
           }
           
           // If all thresholds are achieved, show the last one
           return currentIndex === this.sortedThresholds.length - 1;
         } catch (error) {
           console.error('Error checking current threshold:', error);
           return false;
         }
       },

       isThresholdAchieved(threshold) {
         return this.cartTotal >= threshold.value;
       },

      async checkThresholds() {
        try {
          if (!this.sortedThresholds || this.sortedThresholds.length === 0) return;
          
          for (const threshold of this.sortedThresholds) {
            if (this.cartTotal >= threshold.value && !this.appliedDiscounts.has(threshold.id)) {
              this.appliedDiscounts.add(threshold.id);
              console.log('✅ Threshold achieved:', threshold.title);
            } else if (this.cartTotal < threshold.value && this.appliedDiscounts.has(threshold.id)) {
              this.appliedDiscounts.delete(threshold.id);
              console.log('❌ Threshold no longer met:', threshold.title);
            }
          }
        } catch (error) {
          console.error('Error checking thresholds:', error);
        }
      },

      // ===== Add-on functionality =====
      initAddon() {
        // Get add-on variant ID from the template
        this.$nextTick(() => {
          const addonCheckbox = this.$el.querySelector('input[id^="addon-"]');
          if (addonCheckbox) {
            this.addonVariantId = addonCheckbox.getAttribute('data-variant-id');
          }
          
          // Check if add-on is already in cart
          this.checkAddonInCart();
        });
      },

      checkAddonInCart() {
        if (!this.addonVariantId) return;
        
        // Check if the add-on variant is already in the cart
        const addonInCart = this.cartItems.find(item => item.variant_id == this.addonVariantId);
        this.addonInCart = !!addonInCart;
        this.addonSelected = !!addonInCart;
      },

      async toggleAddon(variantId, isSelected) {
        this.loading = true;
        try {
          if (isSelected) {
            // Add add-on to cart
            const response = await fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                id: variantId,
                quantity: 1,
              }),
            });

            if (response.ok) {
              await this.loadCart();
              this.addonInCart = true;
              this.$dispatch('cart:updated');
              window.dispatchEvent(new CustomEvent('cart:updated'));
            } else {
              // If add failed, uncheck the checkbox
              this.addonSelected = false;
              this.addonInCart = false;
              const error = await response.json();
              console.error('Error adding add-on:', error);
            }
          } else {
            // Remove add-on from cart
            const addonItem = this.cartItems.find(item => item.variant_id == variantId);
            if (addonItem) {
              await this.removeItem(addonItem.key);
              this.addonInCart = false;
            }
          }
        } catch (error) {
          console.error('Error toggling add-on:', error);
          // If error occurred, uncheck the checkbox
          this.addonSelected = false;
          this.addonInCart = false;
        } finally {
          this.loading = false;
        }
      },


    };
   }
</script>

{% schema %}
{
  "name": "Cart Drawer",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "header",
      "content": "General Settings"
    },
    {
      "type": "text",
      "id": "cart_title",
      "label": "Cart Title",
      "default": "Tu Carrito"
    },
    {
      "type": "range",
      "id": "drawer_width",
      "min": 300,
      "max": 600,
      "step": 20,
      "unit": "px",
      "label": "Drawer Width (Desktop)",
      "default": 420
    },
    {
      "type": "header",
      "content": "Cart Thresholds"
    },
    {
      "type": "text",
      "id": "progress_text",
      "label": "Progress Text",
      "default": "Estas a"
    },
    {
      "type": "text",
      "id": "goal_text",
      "label": "Goal Text",
      "default": "de conseguir"
    },
    {
      "type": "text",
      "id": "achieved_text",
      "label": "Achieved Text",
      "default": "¡Felicidades! Has conseguido"
    },
    {
      "type": "header",
      "content": "Empty Cart"
    },
    {
      "type": "text",
      "id": "empty_cart_title",
      "label": "Empty Cart Title",
      "default": "Tu carrito está vacío"
    },
    {
      "type": "text",
      "id": "empty_cart_text",
      "label": "Empty Cart Text",
      "default": "Agrega algunos productos para comenzar"
    },
    {
      "type": "header",
      "content": "Product Carousel"
    },
    {
      "type": "checkbox",
      "id": "show_product_carousel",
      "label": "Show Product Carousel",
      "default": true
    },
    {
      "type": "text",
      "id": "carousel_title",
      "label": "Carousel Title",
      "default": "También te puede interesar"
    },
    {
      "type": "range",
      "id": "carousel_max_products",
      "min": 4,
      "max": 20,
      "step": 1,
      "label": "Maximum Products in Carousel",
      "default": 8
    },
    {
      "type": "select",
      "id": "fallback_type",
      "label": "Fallback Type for Empty Cart",
      "options": [
        {
          "value": "collections",
          "label": "Fallback Collections"
        },
        {
          "value": "products",
          "label": "Fallback Products"
        }
      ],
      "default": "collections",
      "info": "Choose whether to show products from collections or manually selected products when cart is empty"
    },
    {
      "type": "collection_list",
      "id": "fallback_collections",
      "label": "Fallback Collections for Empty Cart",
      "info": "Collections to show in cart carousel when cart is empty (only used when Fallback Type is set to Collections)",
      "limit": 5
    },
    {
      "type": "product_list",
      "id": "fallback_products",
      "label": "Fallback Products for Empty Cart",
      "info": "Manually selected products to show in cart carousel when cart is empty (only used when Fallback Type is set to Products). Maximum products setting will be ignored and all selected products will be shown.",
      "limit": 20
    },
    {
      "type": "collection_list",
      "id": "empty_buttons_collections",
      "label": "Collections for Empty Cart Buttons",
      "info": "Selected collections will render as buttons in empty cart",
      "limit": 6
    },
    {
      "type": "header",
      "content": "Checkout"
    },
    {
      "type": "text",
      "id": "discount_savings_text",
      "label": "Discount Savings Label",
      "default": "DESCUENTOS APLICADOS:"
    },
    {
      "type": "text",
      "id": "subtotal_text",
      "label": "Subtotal Label",
      "default": "SUBTOTAL:"
    },
    {
      "type": "text",
      "id": "savings_text",
      "label": "Savings Label",
      "default": "AHORRA"
    },
    {
      "type": "text",
      "id": "checkout_button_text",
      "label": "Checkout Button Text",
      "default": "Paga de forma segura"
    }
  ],
  "blocks": [
    {
      "type": "cart_threshold",
      "name": "Cart Threshold",
      "settings": [
        {
          "type": "text",
          "id": "threshold_title",
          "label": "Threshold Title",
          "default": "Free Shipping",
          "info": "Title shown when this threshold is active"
        },
        {
          "type": "number",
          "id": "threshold_value",
          "label": "Threshold Value (COP)",
          "default": 150000,
          "info": "Cart value needed to reach this threshold in Colombian Pesos"
        }
      ]
    },
    {
      "type": "cart_addon",
      "name": "Cart Add-on Item",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "addon_title",
          "label": "Add-on Title",
          "default": "Add gift bag",
          "info": "Title displayed for the add-on item"
        },
        {
          "type": "product",
          "id": "addon_product",
          "label": "Add-on Product",
          "info": "Select the product to be added as an add-on (e.g., gift bag, protected shipping)"
        }
      ]
    },
    {
      "type": "cart_accordion",
      "name": "Cart Accordion Item",
      "settings": [
        {
          "type": "text",
          "id": "question",
          "label": "Question",
          "default": "¿Cuánto tiempo tarda el envío?",
          "info": "The question that will be displayed in the accordion"
        },
        {
          "type": "richtext",
          "id": "answer",
          "label": "Answer",
          "default": "<p>El tiempo de envío depende de tu ubicación y el método de envío seleccionado. Generalmente, los pedidos se procesan en 1-2 días hábiles.</p>",
          "info": "The answer that will be displayed when the accordion is expanded"
        }
      ]
    },
    {
      "type": "payment_icon",
      "name": "Payment Icon",
      "settings": [
        {
          "type": "select",
          "id": "payment_type",
          "label": "Payment Type",
          "options": [
            {
              "value": "visa",
              "label": "Visa"
            },
            {
              "value": "master",
              "label": "Mastercard"
            },
            {
              "value": "american_express",
              "label": "American Express"
            },
            {
              "value": "paypal",
              "label": "PayPal"
            },
            {
              "value": "apple_pay",
              "label": "Apple Pay"
            },
            {
              "value": "google_pay",
              "label": "Google Pay"
            },
            {
              "value": "shopify_pay",
              "label": "Shopify Pay"
            },
            {
              "value": "diners_club",
              "label": "Diners Club"
            },
            {
              "value": "discover",
              "label": "Discover"
            },
            {
              "value": "jcb",
              "label": "JCB"
            },
            {
              "value": "maestro",
              "label": "Maestro"
            },
            {
              "value": "unionpay",
              "label": "UnionPay"
            }
          ],
          "info": "Select a built-in payment type icon, or upload a custom icon below"
        },
        {
          "type": "image_picker",
          "id": "custom_icon",
          "label": "Custom Icon",
          "info": "Upload a custom payment icon. If uploaded, this will override the payment type selection above."
        },
        {
          "type": "text",
          "id": "icon_alt",
          "label": "Icon Alt Text",
          "default": "Payment Method",
          "info": "Alternative text for accessibility (only used with custom icons)"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Cart Drawer",
      "blocks": [
        {
          "type": "cart_threshold",
          "settings": {
            "threshold_title": "Free Shipping",
            "threshold_value": 100000
          }
        },
        {
          "type": "cart_threshold",
          "settings": {
            "threshold_title": "10% Off",
            "threshold_value": 200000
          }
        },
        {
          "type": "cart_threshold",
          "settings": {
            "threshold_title": "15% Off",
            "threshold_value": 300000
          }
        },
        {
          "type": "cart_threshold",
          "settings": {
            "threshold_title": "20% Off",
            "threshold_value": 500000
          }
        },
        {
          "type": "payment_icon",
          "settings": {
            "payment_type": "visa"
          }
        },
        {
          "type": "payment_icon",
          "settings": {
            "payment_type": "master"
          }
        },
        {
          "type": "payment_icon",
          "settings": {
            "payment_type": "american_express"
          }
        },
        {
          "type": "payment_icon",
          "settings": {
            "payment_type": "paypal"
          }
        },
        {
          "type": "cart_accordion",
          "settings": {
            "question": "¿Cuánto tiempo tarda el envío?",
            "answer": "<p>El tiempo de envío depende de tu ubicación y el método de envío seleccionado. Generalmente, los pedidos se procesan en 1-2 días hábiles y el envío tarda entre 3-7 días hábiles para envíos nacionales.</p>"
          }
        },
        {
          "type": "cart_accordion",
          "settings": {
            "question": "¿Cómo funciona la garantía?",
            "answer": "<p>Ofrecemos una garantía de 30 días en todos nuestros productos. Si no estás satisfecho con tu compra, puedes devolver el producto en su estado original para un reembolso completo o cambio.</p>"
          }
        },
        {
          "type": "cart_accordion",
          "settings": {
            "question": "¿Es seguro comprar en la tienda online?",
            "answer": "<p>Sí, es completamente seguro. Utilizamos tecnología SSL de encriptación para proteger toda la información personal y de pago. Además, nunca almacenamos los datos de tu tarjeta de crédito en nuestros servidores.</p>"
          }
        }
      ]
    }
  ]
}
{% endschema %}
