{% comment %}
  Generic Reusable Grid Snippet

  Parameters:
  - grid_id: Unique ID for the grid (optional, default: 'grid')
  - grid_class: Additional CSS classes (optional)
  - content: The content to be rendered inside grid container
  - columns_mobile: Mobile columns (default: 2)
  - columns_desktop: Desktop columns (default: 4)
  - gap_mobile: Mobile gap between items (default: 4)
  - gap_desktop: Desktop gap between items (default: 6)
  - show_title: Whether to show title (default: false)
  - title: Grid title (optional)
  - total_items: Total number of items (for analytics/tracking)
{% endcomment %}

{% assign grid_id = grid_id | default: 'grid' %}
{% assign grid_class = grid_class | default: '' %}
{% assign columns_mobile = columns_mobile | default: 2 %}
{% assign columns_desktop = columns_desktop | default: 4 %}
{% assign gap_mobile = gap_mobile | default: 4 %}
{% assign gap_desktop = gap_desktop | default: 6 %}
{% assign show_title = show_title | default: false %}
{% assign total_items = total_items | default: 0 %}

<div class="generic-grid-container {{ grid_class }}" data-grid-id="{{ grid_id }}">
  {% if show_title and title != blank %}
    <div class="grid-header mb-6">
      <h3 class="text-2xl font-bold text-gray-900">{{ title }}</h3>
    </div>
  {% endif %}

  <div
    class="
      generic-grid grid
      grid-cols-{{ columns_mobile }}
      lg:grid-cols-{{ columns_desktop }}
      gap-[{{ gap_mobile }}px]
      lg:gap-[{{ gap_desktop }}px]
    "
    data-grid-id="{{ grid_id }}"
    data-total-items="{{ total_items }}"
  >
    {{ content }}
  </div>
</div>

<style>
  .generic-grid-container {
    width: 100%;
  }

  .generic-grid {
    display: grid;
    width: 100%;
  }

  .generic-grid > * {
    width: 100%;
    height: auto;
  }

  /* Responsive grid columns */
  .grid-cols-1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }
  .grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
  .grid-cols-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
  .grid-cols-4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
  .grid-cols-5 {
    grid-template-columns: repeat(5, minmax(0, 1fr));
  }
  .grid-cols-6 {
    grid-template-columns: repeat(6, minmax(0, 1fr));
  }

  @media (min-width: 1024px) {
    .lg\:grid-cols-1 {
      grid-template-columns: repeat(1, minmax(0, 1fr));
    }
    .lg\:grid-cols-2 {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
    .lg\:grid-cols-3 {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
    .lg\:grid-cols-4 {
      grid-template-columns: repeat(4, minmax(0, 1fr));
    }
    .lg\:grid-cols-5 {
      grid-template-columns: repeat(5, minmax(0, 1fr));
    }
    .lg\:grid-cols-6 {
      grid-template-columns: repeat(6, minmax(0, 1fr));
    }
  }

  /* Gap utilities */
  .gap-1 {
    gap: 0.25rem;
  }
  .gap-2 {
    gap: 0.5rem;
  }
  .gap-3 {
    gap: 0.75rem;
  }
  .gap-4 {
    gap: 1rem;
  }
  .gap-5 {
    gap: 1.25rem;
  }
  .gap-6 {
    gap: 1.5rem;
  }
  .gap-8 {
    gap: 2rem;
  }
  .gap-10 {
    gap: 2.5rem;
  }
  .gap-12 {
    gap: 3rem;
  }

  @media (min-width: 1024px) {
    .lg\:gap-1 {
      gap: 0.25rem;
    }
    .lg\:gap-2 {
      gap: 0.5rem;
    }
    .lg\:gap-3 {
      gap: 0.75rem;
    }
    .lg\:gap-4 {
      gap: 1rem;
    }
    .lg\:gap-5 {
      gap: 1.25rem;
    }
    .lg\:gap-6 {
      gap: 1.5rem;
    }
    .lg\:gap-8 {
      gap: 2rem;
    }
    .lg\:gap-10 {
      gap: 2.5rem;
    }
    .lg\:gap-12 {
      gap: 3rem;
    }
  }

  /* Animation for grid items */
  .generic-grid > * {
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
  }

  .generic-grid > *:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
</style>
