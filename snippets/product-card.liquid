{% comment %}
  Product Card Snippet
  Features:
  - Product image with color variant switching
  - Product badges (New, Best Seller)
  - Wishlist heart icon (optional)
  - Star rating
  - Product name and price
  - Color swatches with image switching
  - Size selection grid that appears on plus icon click
  - Add to cart functionality

  Parameters:
  - show_wishlist: boolean (default: true) - Show/hide wishlist heart icon
{% endcomment %}

<div
  class="product-card relative  w-full flex flex-col  h-full max-w-full"
  x-data="productCard{{ product.id }}()"
  {% if wishlist_mode %}
    data-wishlist-card data-handle="{{ product.handle }}"
  {% endif %}
  {% if product.options contains 'Talla' %}
    @mouseenter="isDesktop && (showSizeSelector = true)"
    @mouseleave="isDesktop && (showSizeSelector = false)"
  {% endif %}
>
  <!-- Product Image Container -->
  <div class="relative  aspect-[3/4.5] w-full  max-w-full">
    <!-- Unified Product Image Carousel (handles 1, 2, or many images) -->
    <div class="h-full" x-show="currentImages && currentImages.length >= 1" x-cloak>
      <div
        class="product-image-carousel group block!important swiper-product-images-{{ product.id }}-{{ section.id }} w-full h-full"
        data-section-id="{{ section.id }}"
        data-carousel-type="product-images"
        id="product-images-carousel-{{ product.id }}-{{ section.id }}"
        style="touch-action: pan-y;"
      >
        <div class="swiper-wrapper h-full" @mouseenter="imageHovered = true" @mouseleave="imageHovered = false">
          <!-- Build slides: overlay for first two, then remaining singles -->
          <template
            x-for="
              (slide, index) in (() => {
                const imgs = currentImages || [];
                // Mobile: always render all images as single slides (first eager)
                if (!isDesktop) {
                  return imgs.map((src, i) => ({ type: 'single', src, eager: i === 0 }));
                }
                // Desktop: overlay behavior for first two
                if (imgs.length <= 1) {
                  return imgs.length === 1
                    ? [{ type: 'single', src: imgs[0], eager: true }]
                    : [];
                }
                const slides = [{ type: 'overlay', srcA: imgs[0], srcB: imgs[1], eager: true }];
                for (let i = 2; i < imgs.length; i++) {
                  slides.push({ type: 'single', src: imgs[i], eager: false });
                }
                return slides;
              })()
            "
            :key="slide.type === 'overlay' ? 'overlay' : slide.src"
          >
            <div class="swiper-slide w-full h-full flex-shrink-0" @click="window.location.href = '{{ product.url }}'">
              <template x-if="slide.type === 'overlay'">
                <div class="relative w-full h-full">
                  <img
                    :src="slide.srcA"
                    alt="{{ product.title }} - Image 1"
                    class="absolute inset-0 w-full h-full object-cover z-10 pointer-events-none"
                    width="1800"
                    height="1800"
                    :loading="slide.eager ? 'eager' : 'lazy'"
                  >
                  <img
                    :src="slide.srcB"
                    alt="{{ product.title }} - Image 2"
                    :class="imageHovered ? 'opacity-100' : 'opacity-0'"
                    class="absolute inset-0 w-full h-full object-cover z-20 transition-opacity duration-300 ease-in-out pointer-events-none"
                    width="1800"
                    height="1800"
                    loading="lazy"
                  >
                </div>
              </template>
              <template x-if="slide.type === 'single'">
                <img
                  :src="slide.src || '{{ product.featured_image | image_url: width: 1800 }}'"
                  alt="{{ product.title }}"
                  class="w-full h-full object-cover pointer-events-none"
                  width="1800"
                  height="1800"
                  :loading="slide.eager ? 'eager' : 'lazy'"
                >
              </template>
            </div>
          </template>
        </div>

        <!-- Navigation Arrows -->
        <div
          :class="isDesktop ? 'hidden group-hover:block' : 'block'"
          class="absolute inset-0 pointer-events-none"
          @mouseenter.stop="imageHovered = false"
          @mouseleave.stop
        >
          <button
            class="product-prev absolute  flex items-center justify-start  left-3 top-1/2 -translate-y-1/2 w-10 h-10 md:w-10 md:h-10  md:opacity-0 group-hover:opacity-100  duration-300 z-10 pointer-events-auto cursor-pointer touch-manipulation"
            data-carousel-id="product-images-carousel-{{ product.id }}-{{ section.id }}"
            type="button"
          >
            <svg
              class="w-5 h-5 md:w-5 md:h-5 text-black drop-shadow-md"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              stroke-width="1.5"
            >
              <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7"/>
            </svg>
          </button>
          <button
            class="product-next absolute  flex items-center justify-end right-3 top-1/2 -translate-y-1/2 w-10 h-10 md:w-10 md:h-10  md:opacity-0 group-hover:opacity-100  duration-300 z-10 pointer-events-auto cursor-pointer touch-manipulation"
            data-carousel-id="product-images-carousel-{{ product.id }}-{{ section.id }}"
            type="button"
          >
            <svg
              class="w-5 h-5 md:w-5 md:h-5 text-black drop-shadow-md"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              stroke-width="1.5"
            >
              <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7"/>
            </svg>
          </button>
        </div>
      </div>
    </div>

    {% if wishlist_mode != true and show_wishlist != false %}
      <!-- Wishlist Heart Button -->
      <button
        class="absolute top-3 right-3 z-20 wishlist-toggle text-black/70  "
        :class="isInWishlist ? 'text-red-700 fill-red-800 ' : 'fill-transparent '"
        @click.stop.prevent="toggleWishlistHandle('{{ product.handle }}')"
        aria-pressed="isInWishlist"
        aria-label="Toggle wishlist"
        title="AÃ±adir a la lista de deseos"
        type="button"
      >
        {% render 'heart-icon', class: 'w-5 h-5 text-black' %}
      </button>
    {% endif %}

    <!-- Product Badges -->
    {% if show_badges and product.tags.size > 0 %}
      <div class="absolute top-3 left-3 flex gap-1 z-10">
        {% for tag in product.tags %}
          {% assign tag_lower = tag | downcase %}
          {% if tag_lower contains 'nuevo' %}
            <span class="bg-white/70 backdrop-blur-sm  text-black py-2 px-3 body-xs font-medium">
              {{- 'nuevo' | upcase -}}
            </span>
          {% endif %}
        {% endfor %}
      </div>
    {% endif %}

    <!-- Size Selector Plus Button - positioned in bottom right corner -->
    {% if product.options contains 'Talla' and wishlist_mode != true %}
      <button
        class="absolute right-2 bottom-2 w-8 h-8 lg:hidden  flex items-center justify-center text-gray-600 hover:text-gray-800  duration-200  z-30"
        @click.stop.prevent="handlePlusClick"
        @mouseenter="isDesktop && (showSizeSelector = true)"
        type="button"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
        </svg>
      </button>
    {% endif %}

    <!-- Size Selector Grid - Only show if "Talla" is in product options -->
    {% if product.options contains 'Talla' %}
      <div
        x-show="showSizeSelector && isDesktop"
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0 transform translate-y-4"
        x-transition:enter-end="opacity-100 transform translate-y-0"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="opacity-100 transform translate-y-0"
        x-transition:leave-end="opacity-0 transform translate-y-4"
        @click.outside="isDesktop ? (showSizeSelector = false) : null"
        class="size-selector-hover absolute bottom-0 left-0 right-0 z-30 bg-white/80 backdrop-blur-md border border-gray-200 hidden lg:block"
      >
        <div class="grid grid-cols-5 gap-1 ">
          {% comment %} Get all unique sizes and check their availability for selected color {% endcomment %}
          {% assign unique_sizes = '' %}

          {% comment %} First pass: collect all unique sizes {% endcomment %}
          {% for variant in product.variants %}
            {% assign size_name = '' %}
            {% for option in variant.options %}
              {% assign is_size = true %}
              {% for product_option in product.options_with_values %}
                {% if product_option.name == 'Color' %}
                  {% for color_value in product_option.values %}
                    {% if option == color_value %}
                      {% assign is_size = false %}
                      {% break %}
                    {% endif %}
                  {% endfor %}
                {% endif %}
              {% endfor %}
              {% if is_size %}
                {% assign size_name = option %}
                {% break %}
              {% endif %}
            {% endfor %}

            {% unless unique_sizes contains size_name %}
              {% assign unique_sizes = unique_sizes | append: size_name | append: ',' %}
            {% endunless %}
          {% endfor %}

          {% comment %} Second pass: render size buttons with availability check {% endcomment %}
          {% assign sizes_array = unique_sizes | split: ',' %}
          {% for size_name in sizes_array %}
            {% if size_name != blank %}
              {% comment %} Find variant that matches current selected color and this size {% endcomment %}
              {% for variant in product.variants %}
                {% assign variant_size = '' %}

                {% comment %} Extract color and size from variant options {% endcomment %}
                {% for option in variant.options %}
                  {% assign is_color = false %}
                  {% for product_option in product.options_with_values %}
                    {% if product_option.name == 'Color' %}
                      {% for color_value in product_option.values %}
                        {% if option == color_value %}
                          {% assign is_color = true %}
                          {% break %}
                        {% endif %}
                      {% endfor %}
                    {% endif %}
                  {% endfor %}

                  {% unless is_color %}
                    {% assign variant_size = option %}
                  {% endunless %}
                {% endfor %}

                {% comment %} Check if this variant matches current size {% endcomment %}
                {% if variant_size == size_name %}
                  {% comment %} For now, check if variant is available - color matching will be handled by Alpine.js {% endcomment %}
                  {% if variant.available %}
                    {% break %}
                  {% endif %}
                {% endif %}
              {% endfor %}

              <button
                class="relative px-6 py-4 text-md text-center font-semibold transition-colors"
                x-bind:class="isSizeAvailable('{{ size_name }}') ? 'hover:bg-white text-gray-900' : 'text-gray-400 cursor-not-allowed'"
                @click="handleSizeClick('{{ size_name }}')"
                x-bind:disabled="!isSizeAvailable('{{ size_name }}')"
              >
                {{ size_name }}
                {% comment %} Diagonal line for sold out sizes {% endcomment %}
                <div
                  x-show="!isSizeAvailable('{{ size_name }}')"
                  class="absolute inset-0 pointer-events-none"
                >
                  <div class="absolute top-0 left-0 w-full h-full">
                    <svg class="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
                      <line x1="0" y1="0" x2="100" y2="100"
                            stroke="currentColor"
                            stroke-width="2"
                            class="text-gray-400"/>
                    </svg>
                  </div>
                </div>
              </button>
            {% endif %}
          {% endfor %}
        </div>
      </div>

      {%- comment -%} Mobile Bottom Drawer for Size Selection {%- endcomment -%}
      <div
        x-ref="mobileBackdrop"
        x-show="showSizeSelector && !isDesktop"
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
        class="fixed inset-0 bg-black/50 z-40 lg:hidden"
        @click="closeMobileDrawer()"
        x-cloak
      ></div>

      <div
        x-ref="mobileDrawer"
        x-show="showSizeSelector && !isDesktop"
        x-transition:enter="transition transform ease-out duration-300"
        x-transition:enter-start="opacity-0 translate-y-full"
        x-transition:enter-end="opacity-100 translate-y-0"
        x-transition:leave="transition transform ease-in duration-200"
        x-transition:leave-start="opacity-100 translate-y-0"
        x-transition:leave-end="opacity-0 translate-y-full"
        class="fixed inset-x-0 bottom-0 z-50 bg-white rounded-t-2xl shadow-2xl lg:hidden w-[100dvw]"
        x-cloak
      >
        <div class="p-4">
          <div class="flex items-center justify-between mb-3">
            <h4 class="body font-semibold">AÃ±adir a la cesta</h4>
            <button class="p-2" @click="closeMobileDrawer()" aria-label="Close">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          <div class="space-y-1">
            {% comment %} Build sizes again for mobile list {% endcomment %}
            {% assign unique_sizes = '' %}
            {% for variant in product.variants %}
              {% assign size_name = '' %}
              {% for option in variant.options %}
                {% assign is_size = true %}
                {% for product_option in product.options_with_values %}
                  {% if product_option.name == 'Color' %}
                    {% for color_value in product_option.values %}
                      {% if option == color_value %}
                        {% assign is_size = false %}
                        {% break %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                {% endfor %}
                {% if is_size %}
                  {% assign size_name = option %}
                  {% break %}
                {% endif %}
              {% endfor %}
              {% unless unique_sizes contains size_name %}
                {% assign unique_sizes = unique_sizes | append: size_name | append: ',' %}
              {% endunless %}
            {% endfor %}

            {% assign sizes_array = unique_sizes | split: ',' %}
            {% for size_name in sizes_array %}
              {% if size_name != blank %}
                <button
                  class="w-full text-left py-4 px-4 border-b border-gray-100 body font-semibold"
                  :class="isSizeAvailable('{{ size_name }}') ? 'text-gray-900' : 'text-gray-400 cursor-not-allowed'"
                  @click="isSizeAvailable('{{ size_name }}') && handleSizeClick('{{ size_name }}')"
                >
                  {{ size_name }}
                </button>
              {% endif %}
            {% endfor %}
          </div>
        </div>
      </div>
    {% endif %}
  </div>

  {% unless hide_info %}
    <div class="product-information py-4 px-2 gap-2 w-full   flex flex-col justify-start z-10">
      <!-- Star Rating and Plus Icon -->
      <div class="flex items-start justify-between">
        {% for product_option in product.options_with_values %}
          {% if product_option.name == 'Color' %}
            <div class="flex items-center gap-2">
              {% for product_option_value in product_option.values %}
                {% comment %} Find a variant with this color to get its image {% endcomment %}
                {% assign color_variant = null %}
                {% for variant in product.variants %}
                  {% for option in variant.options %}
                    {% if option == product_option_value %}
                      {% assign color_variant = variant %}
                      {% break %}
                    {% endif %}
                  {% endfor %}
                  {% if color_variant %}
                    {% break %}
                  {% endif %}
                {% endfor %}

                <button
                  @click="selectColor('{{ product_option_value }}', '{{ color_variant.featured_image | image_url: width: 600 }}', {{ color_variant.id }})"
                  class="w-4 h-4 rounded-xs border-1 transition-colors"
                  :class="selectedColor === '{{ product_option_value }}' ? 'ring-1 ring-offset-2 border-transparent ring-black' : 'border-gray-300 hover:border-gray-400'"
                  {% if product_option_value.swatch.color %}
                    style="background-color: {{ product_option_value.swatch.color }};"
                  {% else %}
                    style="background-image: url({{ product_option_value.swatch.image | image_url: width: 600 }}); background-size: cover; background-position: center;"
                  {% endif %}
                  title="{{ product_option_value }}"
                ></button>
              {% endfor %}
            </div>
          {% endif %}
        {% endfor %}
        <div class="flex items-center gap-2">
          {% if show_rating %}
            {% render 'product-rating', product: product, size: 'sm', color: 'text-[#f3a000]' %}
          {% else %}
            <!-- Empty div for spacing when no rating -->
          {% endif %}
        </div>
      </div>

      <!-- Product Name and Price -->
      <div class="flex flex-col gap-1 lg:flex-row items-start  justify-between">
        <!-- Product Title Section -->
        <div class="flex flex-col gap-2 items-start justify-start">
          {% assign cleaned_title = product.title %}

          {% assign cleaned_title = cleaned_title
            | remove: '0'
            | remove: '1'
            | remove: '2'
            | remove: '3'
            | remove: '4'
            | remove: '5'
            | remove: '6'
            | remove: '7'
            | remove: '8'
            | remove: '9'
          %}

          {% assign cleaned_title = cleaned_title
            | remove: '!'
            | remove: '@'
            | remove: '#'
            | remove: '$'
            | remove: '%'
            | remove: '^'
            | remove: '&'
            | remove: '*'
            | remove: '('
            | remove: ')'
            | remove: '_'
            | remove: '+'
            | remove: '='
            | remove: '-'
            | remove: '['
            | remove: ']'
            | remove: '{'
            | remove: '}'
            | remove: ';'
            | remove: ':'
            | remove: ','
            | remove: '.'
            | remove: '<'
            | remove: '>'
            | remove: '?'
            | remove: '~'
            | remove: "'"
            | remove: '"'
            | remove: '\'
            | remove: '/'
          %}

          <p class="body-sm lg:body font-semibold ">{{ cleaned_title }}</p>

          <!-- Color Circles - Using product.options_with_values for proper swatch access -->
          <!-- Pattern: product_option.name == "Color" then product_option_value.swatch.color -->
        </div>

        <!-- Price Section -->
        <div class="flex lg:flex-row-reverse gap-2 items-end">
          <span class="body-sm lg:body font-semibold">${{ product.price | money_without_currency }}</span>
          {% if product.compare_at_price > product.price %}
            <span class="body-sm lg:body text-black/40 line-through">
              ${{ product.compare_at_price | money_without_currency }}
            </span>
          {% endif %}
        </div>
      </div>
    </div>
  {% endunless %}
  {% if wishlist_mode %}
    <div class="mt-2 space-y-2 px-2 product-information">
      <button
        type="button"
        class="w-full bg-primary text-white py-2 font-semibold"
        @click.stop.prevent="handlePlusClick"
      >
        AÃ±adir al carrito
      </button>
      <button
        type="button"
        class="w-full text-sm text-gray-600 underline"
        @click.stop.prevent="
          (function(evt){try{const KEY='wishlist_v1';const raw=localStorage.getItem(KEY)||'[]';const list=JSON.parse(raw);const handle='{{ product.handle }}';const i=list.indexOf(handle);if(i>=0){list.splice(i,1);localStorage.setItem(KEY, JSON.stringify(list));}
            var el = evt && evt.currentTarget;while(el && !el.hasAttribute('data-wishlist-card')){el = el.parentElement;}if(!el){el = document.querySelector('[data-wishlist-card][data-handle=\''+handle+'\']');}
            var container = el;while(container && !container.hasAttribute('data-wishlist-container')){container = container.parentElement;}
            if(container){container.style.display='none';container.remove();}
            var remaining = document.querySelectorAll('[data-wishlist-container]').length;var empty = document.getElementById('wishlist-empty');if(remaining===0 && empty){empty.classList.remove('hidden');}
          }catch(e){}})(event)
        "
      >
        Remover
      </button>
    </div>
  {% endif %}
  <!-- Product Information -->
</div>

<script>
  function productCard{{ product.id }}() {
    return {
      productId: {{ product.id }},
      {% comment %}Find the first color option dynamically{% endcomment %}
      {% assign first_color = '' %}
      {% assign first_color_variant = null %}
      {% for product_option in product.options_with_values %}
        {% for product_option_value in product_option.values %}
          {% if product_option_value.swatch %}
            {% assign first_color = product_option_value %}
            {% comment %}Find a variant with this color{% endcomment %}
            {% for variant in product.variants %}
              {% for option in variant.options %}
                {% if option == first_color %}
                  {% assign first_color_variant = variant %}
                  {% break %}
                {% endif %}
              {% endfor %}
              {% if first_color_variant %}{% break %}{% endif %}
            {% endfor %}
            {% break %}
          {% endif %}
        {% endfor %}
        {% if first_color != '' %}{% break %}{% endif %}
      {% endfor %}

      selectedVariantId: {{ first_color_variant.id | default: product.selected_or_first_available_variant.id }},
      selectedVariantImage: null,
      selectedColor: '{{ first_color | default: product.selected_or_first_available_variant.option1 }}',
      selectedSize: null,
      showSizeSelector: false,
      isDesktop: window.innerWidth >= 1024,
      isInWishlist: false,
      currentImages: [],
      totalSlides: 0,
      currentSlide: 0,
      imageHovered: false,

      // Variant data with metafields (same as product page)
      variantData: [
        {% for variant in product.variants %}
          {
            id: {{ variant.id }},
            options: [{% for option in variant.options %}'{{ option }}'{% unless forloop.last %}, {% endunless %}{% endfor %}],
            color: {% comment %}Find the color option dynamically{% endcomment %}
            {% assign color_value = '' %}
            {% for product_option in product.options_with_values %}
              {% for product_option_value in product_option.values %}
                {% if product_option_value.swatch %}
                  {% for variant_option in variant.options %}
                    {% if variant_option == product_option_value %}
                      {% assign color_value = variant_option %}
                      {% break %}
                    {% endif %}
                  {% endfor %}
                {% endif %}
                {% if color_value != '' %}{% break %}{% endif %}
              {% endfor %}
              {% if color_value != '' %}{% break %}{% endif %}
            {% endfor %}
            '{{ color_value | default: variant.option1 }}',
            gallery: [
              {% if variant.metafields.custom.variant_gallery.value %}
                {% for image in variant.metafields.custom.variant_gallery.value %}
                  '{{ image | image_url: width: 800 }}'{% unless forloop.last %},{% endunless %}
                {% endfor %}
              {% endif %}
            ]
          }{% unless forloop.last %},{% endunless %}
        {% endfor %}
      ],

      // Fallback product images
      productImages: [
        {% for image in product.images %}
          '{{ image | image_url: width: 800 }}'{% unless forloop.last %},{% endunless %}
        {% endfor %}
      ],

      init() {

        // Update isDesktop on window resize
        window.addEventListener('resize', () => {
          this.isDesktop = window.innerWidth >= 1024;
        });

        // Ensure size selector is hidden by default on desktop
        if (this.isDesktop) {
          this.showSizeSelector = false;
        }

        // Initialize other components
        this.initializeColorSelection();
        this.initializeGallery();
        this.initializeCarousel();

        // Initialize wishlist state from LocalStorage
        this.isInWishlist = this.isProductInWishlist('{{ product.handle }}');
      },



      selectColor(color, imageUrl, variantId) {
        this.selectedColor = color;
        this.selectedVariantId = variantId;


        // Update gallery for selected color (same as product page)
        this.updateGalleryForColor(color);
      },

      // === CORE DATA METHODS ===

      getVariants() {
        return [
          {% for variant in product.variants %}
            {
              id: {{ variant.id }},
              options: [{% for option in variant.options %}'{{ option }}'{% unless forloop.last %}, {% endunless %}{% endfor %}],
              available: {{ variant.available | json }},
              inventory_quantity: {{ variant.inventory_quantity | default: 0 }},
              inventory_policy: '{{ variant.inventory_policy | default: "deny" }}'
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];
      },

      getFirstColorWithSwatch() {
        const productOptions = [
          {% for product_option in product.options_with_values %}
            {
              values: [
                {% for product_option_value in product_option.values %}
                  { value: '{{ product_option_value }}', hasSwatch: {{ product_option_value.swatch | json }} }{% unless forloop.last %},{% endunless %}
                {% endfor %}
              ]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];

        for (const option of productOptions) {
          for (const value of option.values) {
            if (value.hasSwatch) return value.value;
          }
        }
        return null;
      },

      hasColorVariants() {
        return !!this.getFirstColorWithSwatch();
      },

      // === GALLERY METHODS (same as product page) ===

      // Check if product has color variants (updated version)
      hasColorVariantsForGallery() {
        // Check if there are multiple different colors in variants
        const uniqueColors = [...new Set(this.variantData.map(v => v.color))];
        return uniqueColors.length > 1;
      },

      // Get images for a specific color
      getImagesForColor(color) {
        // If product doesn't have color variants, always use product images
        if (!this.hasColorVariantsForGallery()) {
          return this.productImages;
        }

        // Find the first variant with this color that has gallery images
        const variantWithGallery = this.variantData.find(variant =>
          variant.color === color && variant.gallery.length > 0
        );

        if (variantWithGallery && variantWithGallery.gallery.length > 0) {
          return variantWithGallery.gallery;
        }

        // Fallback to product images
        return this.productImages;
      },

      // Update gallery for selected color
      updateGalleryForColor(color) {
        this.currentImages = this.getImagesForColor(color);
        this.totalSlides = this.currentImages.length;
        this.currentSlide = 0;

        // Update carousel after Alpine.js updates the DOM
        this.updateCarousel();
      },

      // Update carousel after image changes
      updateCarousel() {
        if (this.carouselSwiper) {
          // Wait for Alpine.js to update the DOM
          this.$nextTick(() => {
            this.carouselSwiper.update();
            this.carouselSwiper.slideTo(0);
          });
        }
      },

      // Initialize gallery
      initializeGallery() {
        if (this.hasColorVariantsForGallery()) {
          // Product has color variants - use variant-specific images
          const firstColor = this.selectedColor || (this.variantData.length > 0 ? this.variantData[0].color : null);
          if (firstColor) {
            this.updateGalleryForColor(firstColor);
          }
        } else {
          // Product has no color variants - always use product images
          this.currentImages = this.productImages;
          this.totalSlides = this.currentImages.length;
        }
      },

      // === VARIANT MATCHING ABSTRACTION ===

      findVariant(size, colorRequired = true) {
        const variants = this.getVariants();
        const hasColors = this.hasColorVariants();

        return variants.find(variant => {
          const matchesSize = variant.options.includes(size);
          const matchesColor = !hasColors || !colorRequired || variant.options.includes(this.selectedColor);
          return matchesSize && matchesColor;
        });
      },

      findAvailableVariant(size) {
        const variant = this.findVariant(size, true);
        return variant && variant.available ? variant : null;
      },

      // === SIMPLIFIED PUBLIC METHODS ===

      isSizeAvailable(size) {
        return !!this.findAvailableVariant(size);
      },

      getSizeStock(size) {
        const variant = this.findVariant(size, true);

        if (!variant) {
          return { available: false, stock: 0, policy: 'deny', variantId: null };
        }

        return {
          available: variant.available,
          stock: variant.inventory_quantity,
          policy: variant.inventory_policy,
          variantId: variant.id
        };
      },

      // === UTILITY METHODS ===

      getAllSizes() {
        const variants = this.getVariants();
        const allOptions = variants.map(v => v.options).flat();

        if (!this.hasColorVariants()) {
          return [...new Set(allOptions)];
        }

        // Filter out colors to get only sizes
        return [...new Set(allOptions.filter(option => option !== this.selectedColor))];
      },


      handleSizeClick(size) {
        if (!this.isSizeAvailable(size)) return;

        const variant = this.findAvailableVariant(size);
        if (variant) {
          this.selectSize(size, variant.id);
        }
      },

      handlePlusClick() {

        // Check if product has Talla option using the product data
        const productOptions = {{ product.options | json }};
        const hasTalla = productOptions.includes('Talla');
        const hasColor = productOptions.includes('Color');

        if (hasTalla) {
          // If product has sizes, open size selector (only on mobile, desktop uses hover)
          if (!this.isDesktop) {
            this.openMobileDrawer();
          } else {
            // On desktop, ensure size selector is visible when plus is clicked
            this.showSizeSelector = true;
          }
        } else {
          // If no sizes, add to cart directly
          this.addToCart(this.selectedVariantId);
        }
      },

      toggleSizeSelector() {
        // Backward compatibility: toggle appropriate UI depending on device
        if (!this.isDesktop) {
          if (this.showSizeSelector) {
            this.closeMobileDrawer();
          } else {
            this.openMobileDrawer();
          }
        } else {
          this.showSizeSelector = !this.showSizeSelector;
        }
      },

      openMobileDrawer() {
        // Show viewport-level drawer
        this.showSizeSelector = true;
        // Ensure drawer/backdrop are appended to body for viewport-relative positioning
        this.$nextTick(() => {
          const backdrop = this.$refs.mobileBackdrop;
          const drawer = this.$refs.mobileDrawer;
          if (backdrop && backdrop.parentElement !== document.body) {
            document.body.appendChild(backdrop);
          }
          if (drawer && drawer.parentElement !== document.body) {
            document.body.appendChild(drawer);
          }
        });
      },

      closeMobileDrawer() {
        // Simply hide overlay without changing scroll position
        this.showSizeSelector = false;
        // Optionally move nodes back to component root if needed
        const backdrop = this.$refs.mobileBackdrop;
        const drawer = this.$refs.mobileDrawer;
        const rootEl = this.$el;
        if (backdrop && backdrop.parentElement === document.body) {
          rootEl.appendChild(backdrop);
        }
        if (drawer && drawer.parentElement === document.body) {
          rootEl.appendChild(drawer);
        }
      },

      selectSize(size, variantId) {
        this.selectedSize = size;
        this.selectedVariantId = variantId;

        // Check if product has Color option using the product data
        const productOptions = {{ product.options | json }};
        const hasColor = productOptions.includes('Color');

        if (hasColor) {
          // If product has colors, we need to find the variant with current color and selected size
          const currentColor = this.selectedColor;
          // Find the variant that matches both size and color
          const targetVariantId = this.findVariantBySizeAndColor(size, currentColor);
          if (targetVariantId) {
            this.addToCart(targetVariantId);
          } else {
            this.addToCart(variantId);
          }
        } else {
          // If no colors, just add the selected variant
          this.addToCart(variantId);
        }

        this.showSizeSelector = false;
        if (!this.isDesktop) {
          this.closeMobileDrawer();
        }
      },



      async addToCart(variantId) {
        try {
          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              items: [{
                id: variantId,
                quantity: 1
              }]
            })
          });

                    if (response.ok) {
            // Trigger cart update event
            this.$dispatch('cart:updated');

            // Open cart drawer
            this.$dispatch('cart:open');

            // Show success feedback
            this.showSuccessMessage();
          }
        } catch (error) {
          console.error('Error adding to cart:', error);
        }
      },



      findVariantByColor(color) {
        // Get all variants from the product with their options
        const variants = [
          {% for variant in product.variants %}
            {
              id: {{ variant.id }},
              options: [{% for option in variant.options %}'{{ option }}'{% unless forloop.last %}, {% endunless %}{% endfor %}]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];

        // Find variant that matches the color
        const targetVariant = variants.find(variant =>
          variant.options.includes(color)
        );

        return targetVariant ? targetVariant.id : null;
      },

      findVariantBySizeAndColor(size, color) {
        // Get all variants from the product with their options
        const variants = [
          {% for variant in product.variants %}
            {
              id: {{ variant.id }},
              options: [{% for option in variant.options %}'{{ option }}'{% unless forloop.last %}, {% endunless %}{% endfor %}]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];

        // Find variant that matches both size and color
        const targetVariant = variants.find(variant =>
          variant.options.includes(size) && variant.options.includes(color)
        );

        return targetVariant ? targetVariant.id : null;
      },

      // === WISHLIST (LocalStorage) ===
      getWishlist() {
        try {
          const raw = localStorage.getItem('wishlist_v1');
          return raw ? JSON.parse(raw) : [];
        } catch (e) {
          return [];
        }
      },

      setWishlist(list) {
        try {
          localStorage.setItem('wishlist_v1', JSON.stringify(list));
        } catch (e) {
          // ignore
        }
      },

      isProductInWishlist(handle) {
        const list = this.getWishlist();
        return list.includes(String(handle));
      },

      toggleWishlistHandle(handle) {
        const list = this.getWishlist();
        const idx = list.indexOf(String(handle));
        if (idx >= 0) {
          list.splice(idx, 1);
          this.isInWishlist = false;
        } else {
          list.push(String(handle));
          this.isInWishlist = true;
        }
        this.setWishlist(list);
        this.$dispatch('wishlist:updated', { handles: list });
      },

      // === INITIALIZATION ===

      initializeColorSelection() {
        if (!this.hasColorVariants()) {
          return;
        }

        const firstColor = this.getFirstColorWithSwatch();
        if (firstColor && firstColor !== this.selectedColor) {
          this.selectedColor = firstColor;
        }
      },

      initializeCarousel() {

        this.$nextTick(() => {
          const carouselElement = this.$el.querySelector('.product-image-carousel');
          if (carouselElement && typeof Swiper !== 'undefined') {
            const carouselId = carouselElement.id;

            // Check if this carousel is already initialized
            if (carouselElement.swiper) {
              return;
            }

            // Create swiper instance
            const swiperInstance = new Swiper(carouselElement, {
              slidesPerView: 1,
              spaceBetween: 0,
              allowTouchMove: true,
              grabCursor: false,
              touchRatio: 1,
              touchAngle: 45,
              simulateTouch: true,
              touchStartPreventDefault: false,
              touchStartForcePreventDefault: false,
              touchMoveStopPropagation: false,
              autoHeight: false,
              centeredSlides: false,
              loop: false,
              navigation: {
                nextEl: carouselElement.querySelector('.product-next'),
                prevEl: carouselElement.querySelector('.product-prev'),
              }
            });

            // Function to update arrow states
            const updateArrowStates = () => {
              const prevArrow = carouselElement.querySelector('.product-prev');
              const nextArrow = carouselElement.querySelector('.product-next');

              if (prevArrow) {
                if (swiperInstance.isBeginning) {
                  prevArrow.style.opacity = '0';
                  prevArrow.style.pointerEvents = 'none';
                  prevArrow.style.visibility = 'hidden';
                } else {
                  prevArrow.style.opacity = '';
                  prevArrow.style.pointerEvents = '';
                  prevArrow.style.visibility = '';
                }
              }

              if (nextArrow) {
                if (swiperInstance.isEnd) {
                  nextArrow.style.opacity = '0';
                  nextArrow.style.pointerEvents = 'none';
                  nextArrow.style.visibility = 'hidden';
                } else {
                  nextArrow.style.opacity = '';
                  nextArrow.style.pointerEvents = '';
                  nextArrow.style.visibility = '';
                }
              }
            };

            // Set initial state and add event listeners
            swiperInstance.on('slideChange', () => {
              this.currentSlide = swiperInstance.activeIndex;
              updateArrowStates();
            });
            swiperInstance.on('reachBeginning', updateArrowStates);
            swiperInstance.on('reachEnd', updateArrowStates);

            // Initial state update
            setTimeout(updateArrowStates, 100);

            // Add touch event listeners for mobile
            const prevArrow = carouselElement.querySelector('.product-prev');
            const nextArrow = carouselElement.querySelector('.product-next');

            if (prevArrow) {
              prevArrow.addEventListener('touchstart', () => {
                if (!swiperInstance.isBeginning) {
                  swiperInstance.slidePrev();
                }
              });
            }

            if (nextArrow) {
              nextArrow.addEventListener('touchstart', () => {
                if (!swiperInstance.isEnd) {
                  swiperInstance.slideNext();
                }
              });
            }

            // Add click event to go to product page (only if not clicking on controls)
            carouselElement.addEventListener('click', (e) => {
              // Check if click is on navigation buttons or size selector
              if (e.target.closest('.product-prev') ||
                  e.target.closest('.product-next') ||
                  e.target.closest('.size-selector-hover') ||
                  e.target.closest('[data-carousel-id]')) {
                return; // Don't navigate if clicking on controls
              }

              // Navigate to product page
              window.location.href = '{{ product.url }}';
            });

            // Store the swiper instance on the element and component to avoid conflicts
            carouselElement.swiper = swiperInstance;
            this.carouselSwiper = swiperInstance;
          }
        });
      }
    }
  }
</script>

<style>
  /* Smooth transitions for size selector */
  .product-card .size-selector-hover {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Size button hover effects */
  .size-selector-hover button {
    transition: all 0.2s ease-in-out;
  }

  .size-selector-hover button:hover:not(:disabled) {
    background-color: rgba(255, 255, 255, 0.9);
    transform: translateY(-1px);
  }
</style>
