{% comment %}
  Product Page Section - Comprehensive product display
  Features:
  - Image gallery with navigation
  - Product information and pricing
  - Color swatches (squared design)
  - Size selector (rounded with border)
  - Add to cart functionality
  - Responsive design for mobile and desktop
{% endcomment %}

<div
  class="product-page bg-white mt-8 lg:mt-23"
  x-data="productPage({{ product.id }}, {{ section.settings.delivery_days | default: 7 }})"
>
  <div class="w-full lg:pr-12">
    <div class="flex flex-col lg:flex-row  gap-8">
      <!-- Product Images Section - 2/3 width -->
      <div class="product-images-section lg:w-3/4">
        <!-- Desktop: Product Images Grid -->
        <div class="hidden lg:grid grid-cols-2 gap-1" x-ref="desktopGallery">
          <template x-for="(imageUrl, index) in currentImages" :key="imageUrl">
            <div class="aspect-[3/4] overflow-hidden bg-gray-100">
              <img
                :src="imageUrl"
                :alt="'{{ product.title }} - Image ' + (index + 1)"
                class="w-full h-full object-cover"
                width="600"
                height="600"
                :loading="index < 2 ? 'eager' : 'lazy'"
              >
            </div>
          </template>
        </div>

        <!-- Mobile: Product Images Carousel -->
        <div class="lg:hidden relative">
          <div
            class="product-mobile-carousel swiper-product-mobile-{{ product.id }} w-full aspect-[3/4]"
            data-product-id="{{ product.id }}"
            data-carousel-type="product-mobile"
            id="product-mobile-carousel-{{ product.id }}"
            x-ref="mobileCarousel"
          >
            <div class="swiper-wrapper h-full" x-ref="mobileWrapper">
              <template x-for="(imageUrl, index) in currentImages" :key="imageUrl">
                <div class="swiper-slide w-full h-full flex-shrink-0">
                  <img
                    :src="imageUrl"
                    :alt="'{{ product.title }} - Image ' + (index + 1)"
                    class="w-full h-full object-cover"
                    width="600"
                    height="600"
                    :loading="index === 0 ? 'eager' : 'lazy'"
                  >
                </div>
              </template>
            </div>

            <!-- Mobile Slide Counter -->
            {% if section.settings.show_slide_counter %}
              <div class="absolute bottom-4 left-4 bg-black/10 text-white px-3 py-1 rounded-full text-sm font-medium z-10">
                <span x-text="currentSlide + 1"></span>/<span x-text="totalSlides"></span>
              </div>
            {% endif %}

            <!-- Mobile Navigation Arrows -->
            {% if section.settings.show_mobile_navigation %}
              <div class="absolute inset-0 pointer-events-none">
                <button
                  class="mobile-prev absolute p-2 left-2 top-1/2 -translate-y-1/2 w-10 h-10 opacity-100 transition-all duration-300 z-30 pointer-events-auto cursor-pointer touch-manipulation"
                  data-carousel-id="product-mobile-carousel-{{ product.id }}"
                  type="button"
                >
                  <svg
                    class="w-5 h-5 text-black drop-shadow-md"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    stroke-width="2.5"
                  >
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7"/>
                  </svg>
                </button>
                <button
                  class="mobile-next absolute p-2 right-2 top-1/2 -translate-y-1/2 w-10 h-10 opacity-100 transition-all duration-300 z-30 pointer-events-auto cursor-pointer touch-manipulation"
                  data-carousel-id="product-mobile-carousel-{{ product.id }}"
                  type="button"
                >
                  <svg
                    class="w-5 h-5 text-black drop-shadow-md"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    stroke-width="2.5"
                  >
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7"/>
                  </svg>
                </button>
              </div>
            {% endif %}

            <!-- Mobile Gallery Plus Button -->
            <button
              class="absolute bottom-3 right-3 w-10 h-10 bg-white/90 backdrop-blur-sm rounded-full flex items-center justify-center shadow-lg z-40 lg:hidden"
              @click="openMobileGallery"
              type="button"
            >
              <svg class="w-5 h-5 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
              </svg>
            </button>
          </div>
        </div>

        <!-- Mobile Gallery Overlay -->
        <div
          x-show="showMobileGallery"
          x-transition:enter="transition ease-out duration-300"
          x-transition:enter-start="opacity-0"
          x-transition:enter-end="opacity-100"
          x-transition:leave="transition ease-in duration-200"
          x-transition:leave-start="opacity-100"
          x-transition:leave-end="opacity-0"
          class="fixed inset-0 bg-black z-50 lg:hidden"
          @click="closeMobileGallery"
          x-cloak
        >
          <!-- Close Button -->
          <button
            class="absolute top-4 right-4 w-10 h-10 bg-white/90 backdrop-blur-sm rounded-full flex items-center justify-center shadow-lg z-10"
            @click="closeMobileGallery"
            type="button"
          >
            <svg class="w-6 h-6 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>

          <!-- Gallery Images Container -->
          <div class="h-full overflow-y-auto">
            <div class="">
              <template x-for="(imageUrl, index) in currentImages" :key="imageUrl">
                <div class="w-full">
                  <img
                    :src="imageUrl"
                    :alt="'{{ product.title }} - Image ' + (index + 1)"
                    class="w-full h-auto object-cover "
                    width="400"
                    height="600"
                    :loading="index < 3 ? 'eager' : 'lazy'"
                  >
                </div>
              </template>
            </div>
          </div>
        </div>
      </div>

      <!-- Product Information Section -->
      <div class="product-info-section space-y-6 px-4 lg:px-0 min-w-[350px] w-full lg:w-1/4">
        <!-- Product Title and Price -->
        <div class="space-y-2">
          <div class="flex items-start gap-2 justify-between">
            <div class="flex flex-col gap-0.5">
              {% assign cleaned_title = product.title %}

              {% assign cleaned_title = cleaned_title
                | remove: '0'
                | remove: '1'
                | remove: '2'
                | remove: '3'
                | remove: '4'
                | remove: '5'
                | remove: '6'
                | remove: '7'
                | remove: '8'
                | remove: '9'
              %}

              {% assign cleaned_title = cleaned_title
                | remove: '!'
                | remove: '@'
                | remove: '#'
                | remove: '$'
                | remove: '%'
                | remove: '^'
                | remove: '&'
                | remove: '*'
                | remove: '('
                | remove: ')'
                | remove: '_'
                | remove: '+'
                | remove: '='
                | remove: '-'
                | remove: '['
                | remove: ']'
                | remove: '{'
                | remove: '}'
                | remove: ';'
                | remove: ':'
                | remove: ','
                | remove: '.'
                | remove: '<'
                | remove: '>'
                | remove: '?'
                | remove: '~'
                | remove: "'"
                | remove: '"'
                | remove: '\'
                | remove: '/'
              %}

              <h6>{{ cleaned_title }}</h6>
              <div class="flex items-center gap-2">
                {% render 'product-rating', product: product, size: 'lg' %}
              </div>
            </div>
            <div class="flex flex-col items-end gap-0.5">
              <h6 class=" {%if product.compare_at_price > product.price %} text-red-700  {% else %} text-black {% endif %} ">
                ${{ product.price | money_without_currency }}
              </h6>
              {% if product.compare_at_price > product.price %}
                <p class="body line-through text-neutral-400">
                  ${{ product.compare_at_price | money_without_currency }}
                </p>
              {% endif %}
            </div>
          </div>

          <!-- Star Rating -->

          <!-- Price -->
        </div>

        <!-- Color Selection -->
        <div
          class="space-y-3 transition-all duration-300"
          :class="purchaseOption === 'duo' ? 'opacity-40 pointer-events-none' : ''"
        >
          {% render 'color-selector',
            product: product,
            selected_color_variable: 'selectedColor',
            click_function: 'selectColor',
            show_main_label: true,
            show_wishlist: true
          %}
        </div>

        <!-- Size Selection -->
        <div
          class="space-y-3 transition-all duration-300"
          :class="purchaseOption === 'duo' ? 'opacity-40 pointer-events-none' : ''"
        >
          {% render 'size-selector',
            product: product,
            selected_size_variable: 'selectedSize',
            click_function: 'selectSize',
            show_main_label: true,
            show_size_guide: true
          %}
        </div>

        <!-- Purchase Options Logic -->
        {% comment %} Check if current product is eligible for duo discount {% endcomment %}
        {% assign duo_eligible = false %}
        {% assign has_sufficient_stock = false %}

        {% comment %} Check stock availability (need more than 1 item) {% endcomment %}
        {% assign total_stock = 0 %}
        {% for variant in product.variants %}
          {% if variant.available %}
            {% assign total_stock = total_stock | plus: variant.inventory_quantity %}
          {% endif %}
        {% endfor %}
        {% if total_stock > 1 %}
          {% assign has_sufficient_stock = true %}
        {% endif %}

        {% comment %} Check if product is in eligible products list {% endcomment %}

        {% for eligible_product in section.settings.duo_eligible_products %}
          {% if eligible_product.id == product.id %}
            {% assign duo_eligible = true %}
            {% break %}
          {% endif %}
        {% endfor %}

        {% comment %} Check if product belongs to eligible collections {% endcomment %}
        {% if duo_eligible == false %}
          {% for collection in product.collections %}
            {% for eligible_collection in section.settings.duo_eligible_collections %}
              {% if eligible_collection.id == collection.id %}
                {% assign duo_eligible = true %}
                {% break %}
              {% endif %}
            {% endfor %}
            {% if duo_eligible %}
              {% break %}
            {% endif %}
          {% endfor %}
        {% endif %}

        {% comment %} If no specific products or collections are selected, make all products eligible {% endcomment %}
        {% if section.settings.duo_eligible_products.size == 0
          and section.settings.duo_eligible_collections.size == 0
        %}
          {% assign duo_eligible = true %}
        {% endif %}

        {% comment %} Final eligibility check: must be eligible AND have sufficient stock {% endcomment %}
        {% assign show_duo_option = false %}
        {% if duo_eligible and has_sufficient_stock %}
          {% assign show_duo_option = true %}
        {% endif %}

        <!-- Purchase Options -->
        <!-- Single Purchase Option -->
         <div class="flex flex-col gap-2">

           <label class="flex items-center  cursor-pointer p-3 gap-2 border border-gray-900  bg-white hover:bg-gray-50 transition-colors">
             <input
               type="radio"
               name="purchase_option"
               value="single"
               x-model="purchaseOption"
               class="w-4 h-4 "
             >
             <div class="flex-1">
               <h6 class="font-semibold">
                 {{ section.settings.single_option_title | default: 'Único' }}
               </h6>
               <div class="body-sm text-black/80">
                 {{ section.settings.single_option_subtitle | default: 'Standard price' }}
               </div>
             </div>
             <h6>${{ product.price | money_without_currency }}</h6>
           </label>
   
           {% if show_duo_option %}
             <div class="border border-gray-900 p-3  bg-white hover:bg-gray-50 transition-colors relative">
               <!-- Duo Purchase Option -->
               <label class="flex items-center gap-2 cursor-pointer ">
                 <input
                   type="radio"
                   name="purchase_option"
                   value="duo"
                   x-model="purchaseOption"
                   class="w-4 h-4 "
                 >
                 <div class="flex-1">
                   <div class="flex items-center gap-2">
                     <h6 class="font-semibold">
                       {{- section.settings.duo_option_title | default: 'Duo' -}}
                     </h6>
                     <span class="bg-green body-sm text-white  uppercase py-1 px-2 rounded-sm font-semibold absolute -top-1 right-0">
                       {{- section.settings.best_value_text | default: 'BEST VALUE' -}}
                     </span>
                   </div>
                   <div class="body-sm text-black/80">
                     {{ section.settings.duo_option_subtitle | default: 'Compra más y ahorra' }}
                   </div>
                 </div>
                 {% render 'duo-price-display',
                   product: product,
                   discount_percentage: section.settings.duo_discount_percentage
                 %}
               </label>
               <!-- Duo Selection Interface -->
               <div x-show="purchaseOption === 'duo'" x-transition class="space-y-6  divide-y divide-gray-400">
   
                 <!-- Product 1 Selection -->
                 {% render 'duo-product-selector', product: product, product_number: 1, product_title: 'Primera prenda' %}
   
                 <!-- Product 2 Selection -->
                 {% render 'duo-product-selector', product: product, product_number: 2, product_title: 'Segunda prenda' %}
               </div>
             </div>
           {% endif %}
         </div>

        <div class="space-y-2">
          <!-- Availability and Delivery -->
          <div class="w-full flex justify-between items-center">
            <div class="flex items-center gap-1">
              <div class="w-2 h-2 bg-green-500 rounded-full"></div>
              <span class="body-sm font-medium text-black">
                {{- section.settings.availability_text | default: 'Aún disponibles' -}}
              </span>
            </div>
            <div class="flex items-center gap-1 text-gray-800 font-medium">
              <svg class="w-4 h-4 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              <span class="body-sm font-medium text-black" x-text="deliveryDate"></span>
            </div>
          </div>
          <!-- Add to Cart Button -->
          <button
            @click="addToCart"
            class="w-full bg-primary text-white py-4 px-6  font-semibold body border border-primary hover:bg-transparent hover:border-black hover:text-black transition-colors duration-200"
          >
            {{ section.settings.cta_button_text | default: 'Paga de forma segura' }}
          </button>
        </div>
        <!-- Shipping and Returns -->
        <div class="space-y-2 text-sm text-gray-600">
          <div class="flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"/>
            </svg>
            <span>{{ section.settings.free_shipping_text | default: 'Envío gratis En ordenes +500.000' }}</span>
          </div>
          <div class="flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
            </svg>
            <span>{{ section.settings.free_returns_text | default: 'Devoluciones gratis y intercambiables' }}</span>
          </div>
        </div>

        {% assign video_count = 0 %}
        {% for media in product.media %}
          {% if media.media_type == 'video' %}
            {% assign video_count = video_count | plus: 1 %}
          {% endif %}
        {% endfor %}

        <!-- See it in Action - Video Carousel -->
        {% if video_count > 0 %}
          <div class="space-y-3" x-data="productVideoCarousel()">
            <div class="flex items-center justify-between">
              <h3 class="text-lg font-semibold text-gray-900">Miralo En Acción</h3>
              {% comment %} Show arrows when there are multiple videos {% endcomment %}

              {% if video_count > 1 %}
                {% render 'carousel-arrows' %}
              {% endif %}
            </div>

            <div class="relative">
              <div
                class="product-video-carousel swiper w-full overflow-hidden"
                data-carousel-id="product-video-carousel-{{ product.id }}"
                id="product-video-carousel-{{ product.id }}"
              >
                <div class="swiper-wrapper w-full">
                  {% for media in product.media %}
                    {% if media.media_type == 'video' %}
                      <div class="swiper-slide">
                        <div
                          class="video-slide-container relative  overflow-hidden bg-gray-100 h-64 lg:h-96"
                          x-data="videoSlide()"
                          @mouseenter="handleMouseEnter"
                          @mouseleave="handleMouseLeave"
                        >
                          <!-- Video Element -->
                          <video
                            x-ref="video"
                            class="absolute  inset-0 w-full h-full object-cover"
                            muted
                            loop
                            playsinline
                            preload="metadata"
                            @loadedmetadata="onVideoLoaded"
                          >
                            {% if media.sources %}
                              {% for source in media.sources %}
                                <source src="{{ source.url }}" type="{{ source.mime_type }}">
                              {% endfor %}
                            {% else %}
                              <source src="{{ media | file_url }}" type="video/mp4">
                            {% endif %}
                            Your browser does not support the video tag.
                          </video>

                          <!-- Play Button Overlay -->
                          <div
                            x-show="!isPlaying && showPlayButton"
                            x-transition:enter="transition ease-out duration-300"
                            x-transition:enter-start="opacity-0 "
                            x-transition:enter-end="opacity-100 "
                            x-transition:leave="transition ease-in duration-200"
                            x-transition:leave-start="opacity-100"
                            x-transition:leave-end="opacity-0 "
                            class="absolute inset-0 flex items-center justify-center z-20 bg-black/20"
                          >
                            <div class="w-6 h-6 bg-white/90 backdrop-blur-sm rounded-full flex items-center justify-center shadow-lg hover:bg-white/100 transition-all duration-200">
                              <svg class="w-6 h-6 text-gray-800 ml-1" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M8 5v14l11-7z"/>
                              </svg>
                            </div>
                          </div>

                          <!-- Video Title Overlay -->
                        </div>
                      </div>
                    {% endif %}
                  {% endfor %}
                </div>

                <!-- Pagination -->
                {% if video_count > 1 %}
                  <div class="swiper-pagination mt-4 flex justify-center gap-2"></div>
                {% endif %}
              </div>
            </div>
          </div>
        {% endif %}

        {% render 'product-look-fits', product: product %}

        {% if section.blocks.size > 0 %}
          {% assign accordion_blocks = section.blocks | where: 'type', 'accordion_item' %}
          {% if accordion_blocks.size > 0 %}
            <div class="product-accordion w-full lg:w-2/3  mt-8  lg:px-0">
              {% render 'accordion',
                items: accordion_blocks,
                accordion_id: 'product-accordion',
                title_color: '#1f2937',
                answer_color: '#374151'
              %}
            </div>
          {% endif %}
        {% endif %}
      </div>
    </div>

    <!-- Look Fits Carousel -->
  </div>

  <!-- Product Gallery Blocks (Full Width) -->
  {% for block in section.blocks %}
    {% if block.type == 'product_gallery' %}
      <div class="product-gallery-block w-full" {{ block.shopify_attributes }}>
        {% render 'product-gallery', block: block, current_product: product %}
      </div>
    {% endif %}
  {% endfor %}

  <!-- Product Reviews Section -->
  <div class="product-reviews-section mt-12 space-y-6">
    <div class="reviews-container">
      {% comment %} Reviews Summary + List inside the same container as the form {% endcomment %}
      {% render 'product-reviews', product: product, show_avg: section.settings.show_reviews_average, show_count: section.settings.show_reviews_count %}
      <!-- Review Form Toggle -->
      <div class="review-form-toggle">
        <button
          class="w-full bg-gray-900 text-white py-3 px-6 rounded-lg font-semibold text-lg hover:bg-gray-800 transition-colors duration-200 flex items-center justify-center gap-2"
          id="write-review-btn-{{ product.id }}"
        >
          <span class="text-xl">✍️</span>
          Write a Review
        </button>
      </div>

      <!-- Review Form (Hidden by default) -->
      <div
        class="review-form-container fixed inset-0 z-50 hidden"
        id="review-form-container-{{ product.id }}"
        style="display: none;"
      >
        <div class="absolute inset-0 bg-black/60"></div>
        <div class="relative mx-auto my-8 w-[95vw] max-w-2xl bg-white rounded-xl shadow-2xl overflow-hidden">
          <div class="review-form-header flex items-center justify-between p-6 border-b border-gray-200 bg-gray-50">
            <h3 class="text-xl font-semibold text-gray-900">Escribir una Reseña</h3>
            <button class="close-form-btn text-gray-400 hover:text-gray-600 text-2xl font-bold" id="close-form-btn-{{ product.id }}">&times;</button>
          </div>
          <div class="p-6">
        <!-- Native Review Form -->
        <form id="review-form-{{ product.id }}" class="review-form space-y-6">
          <div class="form-group">
            <label for="rating-{{ product.id }}" class="block text-sm font-medium text-gray-700 mb-2"
              >Overall Rating *</label
            >
            <div class="rating-group flex items-center gap-4">
              <div class="star-rating flex gap-1" id="overallRating-{{ product.id }}">
                <span
                  class="star text-2xl text-gray-300 cursor-pointer hover:text-yellow-400 transition-colors"
                  data-rating="1"
                  >★</span
                >
                <span
                  class="star text-2xl text-gray-300 cursor-pointer hover:text-yellow-400 transition-colors"
                  data-rating="2"
                  >★</span
                >
                <span
                  class="star text-2xl text-gray-300 cursor-pointer hover:text-yellow-400 transition-colors"
                  data-rating="3"
                  >★</span
                >
                <span
                  class="star text-2xl text-gray-300 cursor-pointer hover:text-yellow-400 transition-colors"
                  data-rating="4"
                  >★</span
                >
                <span
                  class="star text-2xl text-gray-300 cursor-pointer hover:text-yellow-400 transition-colors"
                  data-rating="5"
                  >★</span
                >
              </div>
              <span id="ratingText-{{ product.id }}" class="text-sm text-gray-800 font-medium">Calificación: <span class="font-semibold">Click para calificar</span></span>
            </div>
            <input type="hidden" id="rating-{{ product.id }}" name="rating" required>
          </div>

          <div class="form-group">
            <label for="title-{{ product.id }}" class="block text-sm font-medium text-gray-700 mb-2"
              >Review Title *</label
            >
            <input
              type="text"
              id="title-{{ product.id }}"
              name="title"
              maxlength="200"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Summarize your experience"
            >
          </div>

          <div class="form-group">
            <label for="body-{{ product.id }}" class="block text-sm font-medium text-gray-700 mb-2">Review *</label>
            <textarea
              id="body-{{ product.id }}"
              name="body"
              maxlength="2000"
              placeholder="Tell us about your experience with this product..."
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent h-32 resize-vertical"
            ></textarea>
          </div>

          <!-- Image Upload Section -->
          <div class="form-group">
            <label for="image-{{ product.id }}" class="block text-sm font-medium text-gray-700 mb-2"
              >Product Photo *</label
            >
            <div class="image-upload-container">
              <input
                type="file"
                id="image-{{ product.id }}"
                name="image"
                accept="image/*"
                required
                class="hidden"
              >
              <div
                class="image-upload-area border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-gray-400 transition-colors"
                onclick="document.getElementById('image-{{ product.id }}').click()"
              >
                <div class="image-preview hidden mb-3" id="image-preview-{{ product.id }}">
                  <img id="preview-img-{{ product.id }}" class="max-w-full h-32 object-cover rounded-lg mx-auto">
                </div>
                <div class="upload-placeholder" id="upload-placeholder-{{ product.id }}">
                  <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                    <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                  </svg>
                  <p class="mt-2 text-sm text-gray-600">Click to upload a photo</p>
                  <p class="text-xs text-gray-500">PNG, JPG up to 10MB</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Video Upload Section -->
          <div class="form-group">
            <label for="video-{{ product.id }}" class="block text-sm font-medium text-gray-700 mb-2"
              >Product Video (Optional)</label
            >
            <div class="video-upload-container">
              <input
                type="file"
                id="video-{{ product.id }}"
                name="video"
                accept="video/*"
                class="hidden"
              >
              <div
                class="video-upload-area border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-gray-400 transition-colors"
                onclick="document.getElementById('video-{{ product.id }}').click()"
              >
                <div class="video-preview hidden mb-3" id="video-preview-{{ product.id }}">
                  <video
                    id="preview-video-{{ product.id }}"
                    class="max-w-full h-32 object-cover rounded-lg mx-auto"
                    controls
                  >
                    Your browser does not support the video tag.
                  </video>
                </div>
                <div class="upload-placeholder" id="video-upload-placeholder-{{ product.id }}">
                  <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                    <path d="M15 10l4 4-4 4m6-8h8a2 2 0 012 2v12a2 2 0 01-2 2h-8m-6-4l4 4-4 4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                  </svg>
                  <p class="mt-2 text-sm text-gray-600">Click to upload a video</p>
                  <p class="text-xs text-gray-500">MP4, MOV up to 50MB</p>
                </div>
              </div>
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="form-group">
              <label for="authorName-{{ product.id }}" class="block text-sm font-medium text-gray-700 mb-2"
                >Your Name *</label
              >
              <input
                type="text"
                id="authorName-{{ product.id }}"
                name="authorName"
                maxlength="100"
                required
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
            </div>
            <div class="form-group">
              <label for="authorEmail-{{ product.id }}" class="block text-sm font-medium text-gray-700 mb-2"
                >Your Email *</label
              >
              <input
                type="email"
                id="authorEmail-{{ product.id }}"
                name="authorEmail"
                required
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="form-group">
              <label for="ageRange-{{ product.id }}" class="block text-sm font-medium text-gray-700 mb-2"
                >Age Range</label
              >
              <select
                id="ageRange-{{ product.id }}"
                name="ageRange"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="">Select age range</option>
                <option value="18-24">18-24</option>
                <option value="25-34">25-34</option>
                <option value="35-44">35-44</option>
                <option value="45-54">45-54</option>
                <option value="55-64">55-64</option>
                <option value="65+">65+</option>
              </select>
            </div>
            <div class="form-group">
              <label for="sizePurchased-{{ product.id }}" class="block text-sm font-medium text-gray-700 mb-2"
                >Size Purchased</label
              >
              <input
                type="text"
                id="sizePurchased-{{ product.id }}"
                name="sizePurchased"
                maxlength="50"
                placeholder="e.g., M, L, XL"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
            </div>
          </div>

          <!-- Fit Rating Slider -->
          <div class="form-group">
            <label class="block text-sm font-medium text-gray-700 mb-2">How well does the clothing item fit? *</label>
            <div class="fit-rating-container">
              <div class="fit-slider-wrapper relative">
                <input
                  type="range"
                  id="fitRating-{{ product.id }}"
                  name="fitRating"
                  min="1"
                  max="5"
                  value="3"
                  step="1"
                  class="fit-slider w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                >
                <div class="fit-labels flex justify-between mt-2 text-xs text-gray-600">
                  <span>Muy pequeño</span>
                  <span>Pequeño</span>
                  <span>Perfecto</span>
                  <span>Grande</span>
                  <span>Muy grande</span>
                </div>
                <div class="fit-value text-center mt-2">
                  <span id="fit-value-{{ product.id }}" class="text-sm font-medium text-gray-900">Perfecto</span>
                </div>
              </div>
            </div>
          </div>

          <!-- Shipping Rating -->
          <div class="form-group">
            <label class="block text-sm font-medium text-gray-700 mb-2">Shipping Rating</label>
            <div class="rating-group">
              <div class="star-rating flex gap-1" id="shippingRating-{{ product.id }}">
                <span
                  class="star text-xl text-gray-300 cursor-pointer hover:text-yellow-400 transition-colors"
                  data-rating="1"
                  >★</span
                >
                <span
                  class="star text-xl text-gray-300 cursor-pointer hover:text-yellow-400 transition-colors"
                  data-rating="2"
                  >★</span
                >
                <span
                  class="star text-xl text-gray-300 cursor-pointer hover:text-yellow-400 transition-colors"
                  data-rating="3"
                  >★</span
                >
                <span
                  class="star text-xl text-gray-300 cursor-pointer hover:text-yellow-400 transition-colors"
                  data-rating="4"
                  >★</span
                >
                <span
                  class="star text-xl text-gray-300 cursor-pointer hover:text-yellow-400 transition-colors"
                  data-rating="5"
                  >★</span
                >
              </div>
            </div>
            <input type="hidden" id="shippingRatingValue-{{ product.id }}" name="shippingRating">
          </div>

          <div class="space-y-4">
            <div class="flex items-center">
              <input
                type="checkbox"
                id="isVerifiedBuyer-{{ product.id }}"
                name="isVerifiedBuyer"
                class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              >
              <label for="isVerifiedBuyer-{{ product.id }}" class="ml-2 block text-sm text-gray-700">
                I am a verified buyer of this product
              </label>
            </div>
            <div class="flex items-center">
              <input
                type="checkbox"
                id="recommendsProduct-{{ product.id }}"
                name="recommendsProduct"
                class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              >
              <label for="recommendsProduct-{{ product.id }}" class="ml-2 block text-sm text-gray-700">
                I recommend this product
              </label>
            </div>
          </div>

          <button
            type="submit"
            class="w-full bg-blue-600 text-white py-4 px-6 rounded-lg font-semibold text-lg hover:bg-blue-700 transition-colors duration-200 disabled:bg-gray-400 disabled:cursor-not-allowed"
            id="submitBtn-{{ product.id }}"
          >
            Submit Review
          </button>
        </form>

        <div class="loading hidden p-6 text-center" id="loading-{{ product.id }}">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-3"></div>
          <p class="text-gray-600">Submitting your review...</p>
        </div>
      </div>

      <!-- Reviews List (rendered above via snippet) -->
    </div>
  </div>
</div>

<script>
  function productPage(productId, deliveryDays = 7) {
    return {
      productId: productId,
      selectedVariantId: {{ product.selected_or_first_available_variant.id }},
      selectedColor: {% comment %}Find the color option dynamically for selected variant{% endcomment %}
      {% assign selected_color = '' %}
      {% for product_option in product.options_with_values %}
        {% for product_option_value in product_option.values %}
          {% if product_option_value.swatch %}
            {% for variant_option in product.selected_or_first_available_variant.options %}
              {% if variant_option == product_option_value %}
                {% assign selected_color = variant_option %}
                {% break %}
              {% endif %}
            {% endfor %}
          {% endif %}
          {% if selected_color != '' %}{% break %}{% endif %}
        {% endfor %}
        {% if selected_color != '' %}{% break %}{% endif %}
      {% endfor %}
      '{{ selected_color | default: product.selected_or_first_available_variant.option1 }}',
      selectedSize: null,
      currentSlide: 0,
      totalSlides: 0,
      currentImages: [],
      isInWishlist: false,
      deliveryDate: '',
      purchaseOption: 'single',
      duoAvailable: {{ show_duo_option | json }},
      showMobileGallery: false,
      
      // Watch for purchase option changes to transfer selections
      purchaseOptionWatcher: null,
      
      // Variant data with metafields
      variantData: [
        {% for variant in product.variants %}
          {
            id: {{ variant.id }},
            options: [{% for option in variant.options %}'{{ option }}'{% unless forloop.last %}, {% endunless %}{% endfor %}],
            color: {% comment %}Find the color option dynamically{% endcomment %}
            {% assign color_value = '' %}
            {% for product_option in product.options_with_values %}
              {% for product_option_value in product_option.values %}
                {% if product_option_value.swatch %}
                  {% for variant_option in variant.options %}
                    {% if variant_option == product_option_value %}
                      {% assign color_value = variant_option %}
                      {% break %}
                    {% endif %}
                  {% endfor %}
                {% endif %}
                {% if color_value != '' %}{% break %}{% endif %}
              {% endfor %}
              {% if color_value != '' %}{% break %}{% endif %}
            {% endfor %}
            '{{ color_value | default: variant.option1 }}',
            gallery: [
              {% if variant.metafields.custom.variant_gallery.value %}
                {% for image in variant.metafields.custom.variant_gallery.value %}
                  '{{ image | image_url: width: 800 }}'{% unless forloop.last %},{% endunless %}
                {% endfor %}
              {% endif %}
            ]
          }{% unless forloop.last %},{% endunless %}
        {% endfor %}
      ],
      
      // Fallback product images
      productImages: [
        {% for image in product.images %}
          '{{ image | image_url: width: 800 }}'{% unless forloop.last %},{% endunless %}
        {% endfor %}
      ],
      duoProduct1: {
        color: null,
        size: null,
        variantId: null
      },
      duoProduct2: {
        color: null,
        size: null,
        variantId: null
      },
      forceUpdate: 0,

      selectColor(color, imageUrl, variantId) {
        this.selectedColor = color;
        this.selectedVariantId = variantId;
        
        // Only update gallery if we're in single purchase mode (not duo)
        if (this.purchaseOption === 'single') {
          this.updateGalleryForColor(color);
        }
      },
      
      // Check if product has color variants
      hasColorVariants() {
        // Check if there are multiple different colors in variants
        const uniqueColors = [...new Set(this.variantData.map(v => v.color))];
        return uniqueColors.length > 1;
      },

      // Get images for a specific color
      getImagesForColor(color) {
        // If product doesn't have color variants, always use product images
        if (!this.hasColorVariants()) {
          return this.productImages;
        }
        
        // Find the first variant with this color that has gallery images
        const variantWithGallery = this.variantData.find(variant => 
          variant.color === color && variant.gallery.length > 0
        );
        
        if (variantWithGallery && variantWithGallery.gallery.length > 0) {
          return variantWithGallery.gallery;
        }
        
        // Fallback to product images
        return this.productImages;
      },
      
      // Update gallery for selected color
      updateGalleryForColor(color) {
        this.currentImages = this.getImagesForColor(color);
        this.totalSlides = this.currentImages.length;
        this.currentSlide = 0;
        
        // Update mobile carousel after Alpine.js updates the DOM
        this.updateMobileCarousel();
      },
      
      // Update mobile carousel after image changes
      updateMobileCarousel() {
        if (this.mobileSwiper) {
          // Wait for Alpine.js to update the DOM
          this.$nextTick(() => {
            this.mobileSwiper.update();
            this.mobileSwiper.slideTo(0);
          });
        }
      },

      // === VARIANT MATCHING ABSTRACTION ===
      
      getVariants() {
        return [
          {% for variant in product.variants %}
            {
              id: {{ variant.id }},
              options: [{% for option in variant.options %}'{{ option }}'{% unless forloop.last %}, {% endunless %}{% endfor %}],
              available: {{ variant.available | json }},
              inventory_quantity: {{ variant.inventory_quantity | default: 0 }},
              inventory_policy: '{{ variant.inventory_policy | default: "deny" }}'
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];
      },

      hasColorVariants() {
        // Check if there are multiple different colors in variants
        const uniqueColors = [...new Set(this.variantData.map(v => v.color))];
        return uniqueColors.length > 1;
      },

      findVariant(size = null, color = null, mustBeAvailable = false) {
        const variants = this.getVariants();
        
        // Debug: findVariant called
        
        const result = variants.find(variant => {
          const matchesSize = !size || variant.options.includes(size);
          const matchesColor = !color || variant.options.includes(color);
          const isAvailable = !mustBeAvailable || variant.available;
          
          // Debug: variant matching logic
          
          return matchesSize && matchesColor && isAvailable;
        });
        
        // Debug: findVariant result
        return result;
      },

      isColorAvailable(color) {
        if (!this.hasColorVariants()) return true;
        
        // If no size selected, check if color has any available variants
        if (!this.selectedSize) {
          return !!this.findVariant(null, color, true);
        }
        
        // If size is selected, check if this color+size combination is available
        return !!this.findVariant(this.selectedSize, color, true);
      },

      isSizeAvailable(size) {
        // If no color variants, just check size availability
        if (!this.hasColorVariants()) {
          return !!this.findVariant(size, null, true);
        }
        
        // If no color selected, check if size has any available variants
        if (!this.selectedColor) {
          return !!this.findVariant(size, null, true);
        }
        
        // If color is selected, check if this size+color combination is available
        return !!this.findVariant(size, this.selectedColor, true);
      },

      // Check if a color is available for duo product
      isDuoColorAvailable(productNumber, color) {
        if (!this.hasColorVariants()) return true;
        
        // Get the size for this specific duo product
        let productSize = null;
        if (productNumber === 1) {
          productSize = this.duoProduct1.size;
        } else if (productNumber === 2) {
          productSize = this.duoProduct2.size;
        }
        
        // If no size selected for this product, check if color has any available variants
        if (!productSize) {
          return !!this.findVariant(null, color, true);
        }
        
        // If size is selected, check if this color+size combination is available
        const isAvailable = !!this.findVariant(productSize, color, true);
        return isAvailable;
      },

      // Check if a size is available for duo product
      isDuoSizeAvailable(productNumber, size) {
        // Get the color for this specific duo product
        let productColor = null;
        if (productNumber === 1) {
          productColor = this.duoProduct1.color;
        } else if (productNumber === 2) {
          productColor = this.duoProduct2.color;
        }
        
        // If no color selected for this product, check if size has any available variants
        if (!productColor) {
          return !!this.findVariant(size, null, true);
        }
        
        // If color is selected, check if this size+color combination is available
        const isAvailable = !!this.findVariant(size, productColor, true);
        return isAvailable;
      },

      findVariantIdForSize(size) {
        // If no color variants, find any variant with this size
        if (!this.hasColorVariants()) {
          const variant = this.findVariant(size, null, false);
          return variant ? variant.id : null;
        }
        
        // If color is selected, find variant with both size and color
        if (this.selectedColor) {
          const variant = this.findVariant(size, this.selectedColor, false);
          return variant ? variant.id : null;
        }
        
        // If no color selected, find first available variant with this size
        const variant = this.findVariant(size, null, false);
        return variant ? variant.id : null;
      },

      selectSize(size, variantId) {
        this.selectedSize = size;
        this.selectedVariantId = variantId;
      },

      selectDuoColor(productNumber, color, variantId) {
        // Debug: selectDuoColor called
        
        // Check if this color is available for the duo product
        if (!this.isDuoColorAvailable(productNumber, color)) {
          this.showDuoVariantInfo(productNumber, 'color', color);
          return; // Don't allow selection of unavailable colors
        }
        
        if (productNumber === 1) {
          this.duoProduct1.color = color;
          this.duoProduct1.variantId = variantId;
          
          // If size is already selected, update variant ID to match both
          if (this.duoProduct1.size) {
            const matchingVariant = this.findVariantBySizeAndColor(this.duoProduct1.size, color);
            if (matchingVariant) {
              this.duoProduct1.variantId = matchingVariant;
            }
          }
        } else {
          this.duoProduct2.color = color;
          this.duoProduct2.variantId = variantId;
          
          // If size is already selected, update variant ID to match both
          if (this.duoProduct2.size) {
            const matchingVariant = this.findVariantBySizeAndColor(this.duoProduct2.size, color);
            if (matchingVariant) {
              this.duoProduct2.variantId = matchingVariant;
            }
          }
        }
        
        // Debug: After color selection
        
        // Force Alpine.js to re-evaluate the UI for better visual feedback
        this.$nextTick(() => {
          // Trigger a re-render by updating a reactive property
          this.forceUpdate = Date.now();
        });
      },

      selectDuoSize(productNumber, size, variantId) {
        // Debug: selectDuoSize called
        
        // Check if this size is available for the duo product
        if (!this.isDuoSizeAvailable(productNumber, size)) {
          this.showDuoVariantInfo(productNumber, 'size', size);
          return; // Don't allow selection of unavailable sizes
        }
        
        if (productNumber === 1) {
          this.duoProduct1.size = size;
          // Find variant that matches both color and size for product 1
          const matchingVariant = this.findVariantBySizeAndColor(size, this.duoProduct1.color);
          this.duoProduct1.variantId = matchingVariant || variantId;
        } else {
          this.duoProduct2.size = size;
          // Find variant that matches both color and size for product 2
          const matchingVariant = this.findVariantBySizeAndColor(size, this.duoProduct2.color);
          this.duoProduct2.variantId = matchingVariant || variantId;
        }
        
        // Debug: After size selection
        
        // Force Alpine.js to re-evaluate the UI for better visual feedback
        this.$nextTick(() => {
          // Trigger a re-render by updating a reactive property
          this.forceUpdate = Date.now();
        });
      },

      goToSlide(index) {
        // This function is no longer needed with the grid layout
        // but kept for compatibility
      },

      async addToCart() {
        try {
          let items = [];

          if (this.purchaseOption === 'single') {
            // Validate single product selection
            if (!this.selectedVariantId) {
              this.showErrorToast('Por favor selecciona una variante válida');
              return;
            }

            // Check if selected variant is still available
            const selectedVariant = this.getVariants().find(v => v.id === this.selectedVariantId);
            if (!selectedVariant || !selectedVariant.available) {
              this.showErrorToast('Esta variante ya no está disponible');
              return;
            }

            items = [{
              id: this.selectedVariantId,
              quantity: 1
            }];
          } else if (this.purchaseOption === 'duo' && this.duoAvailable) {
            // Duo purchase - validate both products are selected
            if (!this.duoProduct1.variantId || !this.duoProduct2.variantId) {
              this.showErrorToast('Por favor selecciona color y talla para ambas prendas');
              return;
            }

            // Check if both variants are still available
            const variants = this.getVariants();
            const variant1 = variants.find(v => v.id === this.duoProduct1.variantId);
            const variant2 = variants.find(v => v.id === this.duoProduct2.variantId);
            
            if (!variant1 || !variant1.available || !variant2 || !variant2.available) {
              this.showErrorToast('Una o más variantes seleccionadas ya no están disponibles');
              return;
            }

            items = [
              {
                id: this.duoProduct1.variantId,
                quantity: 1
              },
              {
                id: this.duoProduct2.variantId,
                quantity: 1
              }
            ];
          } else {
            // Fallback to single if duo is selected but not available
            if (!this.selectedVariantId) {
              this.showErrorToast('Por favor selecciona una variante válida');
              return;
            }
            
            items = [{
              id: this.selectedVariantId,
              quantity: 1
            }];
          }

          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ items })
          });

          if (response.ok) {
            const result = await response.json();
            
            // Trigger cart update event
            this.$dispatch('cart:updated');

            // Open cart drawer
            this.$dispatch('cart:open');

            // Show success feedback
            this.showSuccessMessage();
          } else {
            // Handle specific HTTP error codes
            const errorData = await response.json().catch(() => ({}));
            let errorMessage = 'Error al añadir al carrito';
            
            if (response.status === 422) {
              errorMessage = 'Producto agotado o no disponible';
            } else if (response.status === 404) {
              errorMessage = 'Producto no encontrado';
            } else if (errorData.message) {
              errorMessage = errorData.message;
            }
            
            this.showErrorToast(errorMessage);
          }
        } catch (error) {
          console.error('Error adding to cart:', error);
          this.showErrorToast('Error de conexión. Por favor intenta de nuevo.');
        }
      },

      showSuccessMessage() {
        // Success message removed as requested
        // Product added to cart silently
      },

      showErrorToast(message) {
        // Create error toast message
        const toast = document.createElement('div');
        toast.className = 'fixed bottom-4 left-4 bg-red-500 text-white  py-3 rounded-lg shadow-lg z-10 max-w-sm';
        toast.innerHTML = `
          <div class="flex items-center gap-2">
            <svg class="w-5 h-5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
            </svg>
            <span class="text-sm font-medium">${message}</span>
          </div>
        `;
        document.body.appendChild(toast);

        // Remove after 4 seconds
        setTimeout(() => {
          if (document.body.contains(toast)) {
            document.body.removeChild(toast);
          }
        }, 4000);
      },

      // Show feedback when trying to select unavailable duo variant
      showDuoVariantError(productNumber, type) {
        const productName = productNumber === 1 ? 'Primera' : 'Segunda';
        const typeName = type === 'color' ? 'color' : 'talla';
        this.showErrorToast(`${productName} prenda: Este ${typeName} no está disponible`);
      },

      // Show info message about variant combination availability
      showDuoVariantInfo(productNumber, type, value) {
        const productName = productNumber === 1 ? 'Primera' : 'Segunda';
        const typeName = type === 'color' ? 'color' : 'talla';
        const otherType = type === 'color' ? 'talla' : 'color';
        
        // Get the other selection to show the combination
        let otherValue = null;
        if (type === 'color') {
          otherValue = productNumber === 1 ? this.duoProduct1.size : this.duoProduct2.size;
        } else {
          otherValue = productNumber === 1 ? this.duoProduct1.color : this.duoProduct2.color;
        }
        
        if (otherValue) {
          this.showErrorToast(`${productName} prenda: La combinación ${otherValue} + ${value} no está disponible`);
        } else {
          this.showDuoVariantError(productNumber, type);
        }
      },

      // Get CSS classes for duo variant buttons
      getDuoVariantClasses(productNumber, type, value) {
        const isSelected = type === 'color' 
          ? (productNumber === 1 ? this.duoProduct1.color === value : this.duoProduct2.color === value)
          : (productNumber === 1 ? this.duoProduct1.size === value : this.duoProduct2.size === value);
        
        const isAvailable = type === 'color' 
          ? this.isDuoColorAvailable(productNumber, value)
          : this.isDuoSizeAvailable(productNumber, value);
        
        if (isSelected) {
          return type === 'color' 
            ? 'ring-2 ring-offset-2 border-transparent ring-gray-900'
            : 'bg-primary text-white border-gray-900';
        }
        
        if (!isAvailable) {
          return type === 'color'
            ? 'border-gray-300 opacity-40 cursor-not-allowed'
            : 'border-gray-300 text-gray-800 opacity-40 cursor-not-allowed';
        }
        
        return type === 'color'
          ? 'border-gray-300 hover:border-gray-400'
          : 'border-gray-300 text-gray-900 hover:border-gray-400';
      },

      toggleWishlist() {
        this.isInWishlist = !this.isInWishlist;
        // Here you would typically make an API call to add/remove from wishlist
      },

      findVariantBySizeAndColor(size, color) {
        // Get all variants from the product with their options
        const variants = [
          {% for variant in product.variants %}
            {
              id: {{ variant.id }},
              options: [{% for option in variant.options %}'{{ option }}'{% unless forloop.last %}, {% endunless %}{% endfor %}],
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];

        // Find variant that matches both size and color
        const targetVariant = variants.find(variant =>
          variant.options.includes(size) && variant.options.includes(color)
        );

        return targetVariant ? targetVariant.id : null;
      },

      // Calculate delivery date
      calculateDeliveryDate() {
        const today = new Date();
        const deliveryDate = new Date(today);
        deliveryDate.setDate(today.getDate() + deliveryDays);
        
        const options = { 
          weekday: 'long', 
          day: 'numeric', 
          month: 'long' 
        };
        
        const spanishMonths = {
          'January': 'enero', 'February': 'febrero', 'March': 'marzo', 'April': 'abril',
          'May': 'mayo', 'June': 'junio', 'July': 'julio', 'August': 'agosto',
          'September': 'septiembre', 'October': 'octubre', 'November': 'noviembre', 'December': 'diciembre'
        };
        
        const spanishDays = {
          'Monday': 'lunes', 'Tuesday': 'martes', 'Wednesday': 'miércoles', 'Thursday': 'jueves',
          'Friday': 'viernes', 'Saturday': 'sábado', 'Sunday': 'domingo'
        };
        
        const dateString = deliveryDate.toLocaleDateString('en-US', options);
        const [weekday, month, day] = dateString.split(' ');
        
        this.deliveryDate = `Recibelo el ${spanishDays[weekday.replace(',', '')]} ${day} de ${spanishMonths[month]}`;
      },

      // Initialize product page
      init() {
        this.calculateDeliveryDate();
        
        // Initialize gallery
        if (this.hasColorVariants()) {
          // Product has color variants - use variant-specific images
          const firstColor = this.selectedColor || (this.variantData.length > 0 ? this.variantData[0].color : null);
          if (firstColor) {
            this.updateGalleryForColor(firstColor);
          }
        } else {
          // Product has no color variants - always use product images
          this.currentImages = this.productImages;
          this.totalSlides = this.currentImages.length;
        }
        
        this.initializeMobileCarousel();
        
        // Set up watcher for purchase option changes
        this.setupPurchaseOptionWatcher();
        
        // Make duo functions globally available
        this.setupGlobalDuoFunctions();
      },

      // Set up watcher for purchase option changes
      setupPurchaseOptionWatcher() {
        this.$watch('purchaseOption', (newValue, oldValue) => {
          if (newValue === 'duo' && oldValue === 'single') {
            // Transfer current selections to first duo product
            this.transferSelectionsToDuo();
          }
        });
        
        // Watch for changes in duo selections to update UI
        this.$watch('duoProduct1.color', () => {
          if (this.purchaseOption === 'duo') {
            this.$nextTick(() => this.forceUpdate = Date.now());
          }
        });
        
        this.$watch('duoProduct1.size', () => {
          if (this.purchaseOption === 'duo') {
            this.$nextTick(() => this.forceUpdate = Date.now());
          }
        });
        
        this.$watch('duoProduct2.color', () => {
          if (this.purchaseOption === 'duo') {
            this.$nextTick(() => this.forceUpdate = Date.now());
          }
        });
        
        this.$watch('duoProduct2.size', () => {
          if (this.purchaseOption === 'duo') {
            this.$nextTick(() => this.forceUpdate = Date.now());
          }
        });
      },

      // Make duo functions globally available for snippets
      setupGlobalDuoFunctions() {
        // Store reference to this component instance
        const self = this;
        
        // Make functions available globally
        window.isDuoColorAvailable = (productNumber, color) => {
          return self.isDuoColorAvailable(productNumber, color);
        };
        
        window.isDuoSizeAvailable = (productNumber, size) => {
          return self.isDuoSizeAvailable(productNumber, size);
        };
        
        // Global duo functions setup completed
      },

      // Transfer current selections to first duo product
      transferSelectionsToDuo() {
        // Transfer color selection
        if (this.selectedColor) {
          this.duoProduct1.color = this.selectedColor;
          // Find variant ID for the selected color
          const colorVariant = this.variantData.find(v => v.color === this.selectedColor);
          if (colorVariant) {
            this.duoProduct1.variantId = colorVariant.id;
          }
        }
        
        // Transfer size selection
        if (this.selectedSize) {
          this.duoProduct1.size = this.selectedSize;
          // Update variant ID to match both color and size
          if (this.duoProduct1.color) {
            const matchingVariant = this.findVariantBySizeAndColor(this.selectedSize, this.duoProduct1.color);
            if (matchingVariant) {
              this.duoProduct1.variantId = matchingVariant;
            }
          }
        }
        
        // Validate that the transferred selections are actually available
        this.validateDuoSelections();
        
        // Force UI update to show the new state
        this.$nextTick(() => {
          this.forceUpdate = Date.now();
        });
      },

      // Validate duo selections and adjust if necessary
      validateDuoSelections() {
        // Check if product 1 has valid selections
        if (this.duoProduct1.color && this.duoProduct1.size) {
          const variant = this.findVariant(this.duoProduct1.size, this.duoProduct1.color, true);
          if (!variant) {
            // If the combination is not available, try to find an available variant
            const availableVariant = this.findVariant(this.duoProduct1.size, this.duoProduct1.color, false);
            if (availableVariant) {
              // Keep the selections but mark as unavailable
              this.duoProduct1.variantId = availableVariant.id;
            } else {
              // Reset selections if no variant found
              this.duoProduct1.variantId = null;
            }
          } else {
            this.duoProduct1.variantId = variant.id;
          }
        }
        
        // Also validate product 2 if it has selections
        if (this.duoProduct2.color && this.duoProduct2.size) {
          const variant = this.findVariant(this.duoProduct2.size, this.duoProduct2.color, true);
          if (!variant) {
            const availableVariant = this.findVariant(this.duoProduct2.size, this.duoProduct2.color, false);
            if (availableVariant) {
              this.duoProduct2.variantId = availableVariant.id;
            } else {
              this.duoProduct2.variantId = null;
            }
          } else {
            this.duoProduct2.variantId = variant.id;
          }
        }
      },

      // Clear duo selections for a specific product
      clearDuoSelections(productNumber) {
        if (productNumber === 1) {
          this.duoProduct1.color = null;
          this.duoProduct1.size = null;
          this.duoProduct1.variantId = null;
        } else if (productNumber === 2) {
          this.duoProduct2.color = null;
          this.duoProduct2.size = null;
          this.duoProduct2.variantId = null;
        }
        
        // Force UI update
        this.$nextTick(() => {
          this.forceUpdate = Date.now();
        });
      },

      // Get detailed availability info for duo variant
      getDuoVariantAvailability(productNumber, type, value) {
        const isAvailable = type === 'color' 
          ? this.isDuoColorAvailable(productNumber, value)
          : this.isDuoSizeAvailable(productNumber, value);
        
        const isSelected = type === 'color' 
          ? (productNumber === 1 ? this.duoProduct1.color === value : this.duoProduct2.color === value)
          : (productNumber === 1 ? this.duoProduct1.size === value : this.duoProduct2.size === value);
        
        return {
          available: isAvailable,
          selected: isSelected,
          disabled: !isAvailable
        };
      },

      // Debug method to check duo state (removed for production)

      // Mobile Gallery Methods
      openMobileGallery() {
        this.showMobileGallery = true;
        // Prevent body scroll when overlay is open
        document.body.style.overflow = 'hidden';
      },

      closeMobileGallery() {
        this.showMobileGallery = false;
        // Restore body scroll
        document.body.style.overflow = '';
      },

      // Initialize mobile carousel
      initializeMobileCarousel() {
        this.$nextTick(() => {
          const carouselElement = this.$el.querySelector('.product-mobile-carousel');
          if (carouselElement && typeof Swiper !== 'undefined') {
            // Check if this carousel is already initialized
            if (carouselElement.swiper) {
              return;
            }

            // Create swiper instance
            const swiperInstance = new Swiper(carouselElement, {
              slidesPerView: 1,
              spaceBetween: 0,
              allowTouchMove: true,
              grabCursor: false,
              navigation: {
                nextEl: carouselElement.querySelector('.mobile-next'),
                prevEl: carouselElement.querySelector('.mobile-prev'),
              }
            });

            // Function to update arrow states
            const updateArrowStates = () => {
              const prevArrow = carouselElement.querySelector('.mobile-prev');
              const nextArrow = carouselElement.querySelector('.mobile-next');

              if (prevArrow) {
                if (swiperInstance.isBeginning) {
                  prevArrow.style.opacity = '0';
                  prevArrow.style.pointerEvents = 'none';
                  prevArrow.style.visibility = 'hidden';
                } else {
                  prevArrow.style.opacity = '';
                  prevArrow.style.pointerEvents = '';
                  prevArrow.style.visibility = '';
                }
              }

              if (nextArrow) {
                if (swiperInstance.isEnd) {
                  nextArrow.style.opacity = '0';
                  nextArrow.style.pointerEvents = 'none';
                  nextArrow.style.visibility = 'hidden';
                } else {
                  nextArrow.style.opacity = '';
                  nextArrow.style.pointerEvents = '';
                  nextArrow.style.visibility = '';
                }
              }
            };

            // Set initial state and add event listeners
            swiperInstance.on('slideChange', () => {
              this.currentSlide = swiperInstance.activeIndex;
              updateArrowStates();
            });
            swiperInstance.on('reachBeginning', updateArrowStates);
            swiperInstance.on('reachEnd', updateArrowStates);

            // Initial state update
            setTimeout(updateArrowStates, 100);

            // Store the swiper instance on the element to avoid conflicts
            carouselElement.swiper = swiperInstance;
            this.mobileSwiper = swiperInstance;
          }
        });
      },

      // Cleanup method
      destroy() {
        // Restore body scroll if gallery was open
        if (this.showMobileGallery) {
          document.body.style.overflow = '';
        }
      }
    }
  }

  // Product Video Carousel functionality
  function productVideoCarousel() {
    return {
      swiper: null,

      init() {
        this.$nextTick(() => {
          this.initializeCarousel();
        });
      },

      initializeCarousel() {
        const carouselElement = this.$el.querySelector('.product-video-carousel');

        if (carouselElement && typeof Swiper !== 'undefined') {
          // Check if already initialized
          if (carouselElement.swiper) {
            return;
          }

                      // Initialize Swiper
            this.swiper = new Swiper(carouselElement, {
              direction: 'horizontal',
              slidesPerView: 1,
              spaceBetween: 4,
              loop: false,
              centeredSlides: false,
              grabCursor: false,
              touchRatio: 1,
              touchAngle: 45,
              simulateTouch: true,
              navigation: {
                nextEl: '.carousel-next',
                prevEl: '.carousel-prev',
              },
              speed: 800,

              // Responsive breakpoints - more slides = smaller individual videos
              breakpoints: {
                640: {
                  slidesPerView: 1.2,
                  spaceBetween: 6
                },
                768: {
                  slidesPerView: 1.5,
                  spaceBetween: 8
                },
                1024: {
                  slidesPerView: 2,
                  spaceBetween: 10
                },
                1280: {
                  slidesPerView: 2.5,
                  spaceBetween: 12
                }
              },

            // Events for arrow states
            on: {
              init: function() {
                updateProductVideoArrowStates(this);
              },
              slideChange: function() {
                updateProductVideoArrowStates(this);
              },
              reachBeginning: function() {
                updateProductVideoArrowStates(this);
              },
              reachEnd: function() {
                updateProductVideoArrowStates(this);
              },
            },

            // Pagination
            pagination: {
              el: carouselElement.querySelector('.swiper-pagination'),
              clickable: true,
              renderBullet: function (index, className) {
                return '<span class="' + className + ' w-2 h-2 rounded-full bg-gray-300 cursor-pointer transition-all duration-200 hover:bg-gray-400"></span>';
              },
            },
          });

          // Store swiper instance
          carouselElement.swiper = this.swiper;
        }
      },

      destroy() {
        if (this.swiper) {
          this.swiper.destroy();
          this.swiper = null;
        }
      }
    }
  }

  // Function to update arrow states for product video carousel
  function updateProductVideoArrowStates(swiper) {
    const sectionContainer = document.querySelector('[x-data*="productVideoCarousel"]');
    if (!sectionContainer) return;

    const prevArrow = sectionContainer.querySelector('.carousel-prev');
    const nextArrow = sectionContainer.querySelector('.carousel-next');

    if (prevArrow) {
      if (swiper.isBeginning) {
        prevArrow.style.opacity = '0.3';
        prevArrow.style.cursor = 'not-allowed';
        prevArrow.disabled = true;
      } else {
        prevArrow.style.opacity = '1';
        prevArrow.style.cursor = 'pointer';
        prevArrow.disabled = false;
      }
    }

    if (nextArrow) {
      if (swiper.isEnd) {
        nextArrow.style.opacity = '0.3';
        nextArrow.style.cursor = 'not-allowed';
        nextArrow.disabled = true;
      } else {
        nextArrow.style.opacity = '1';
        nextArrow.style.cursor = 'pointer';
        nextArrow.disabled = false;
      }
    }
  }

  // Video Slide functionality (same as video-slide snippet)
  function videoSlide() {
    return {
      isPlaying: false,
      videoLoaded: false,
      showPlayButton: true,
      hoverTimeout: null,

      onVideoLoaded() {
        console.log('Video metadata loaded');
        this.videoLoaded = true;
        // Set initial video state
        const video = this.$refs.video;
        if (video) {
          video.currentTime = 0;
          video.muted = true;
          console.log('Video initial state set');
        }
      },

      handleMouseEnter() {
        console.log('Mouse entered, videoLoaded:', this.videoLoaded);
        if (!this.videoLoaded) return;

        // Clear any existing timeout
        if (this.hoverTimeout) {
          clearTimeout(this.hoverTimeout);
        }



        // Start playing after a short delay
        this.hoverTimeout = setTimeout(() => {
          console.log('Starting video playback');
          this.playVideo();
        }, 200);
      },

      handleMouseLeave() {
        // Clear hover timeout
        if (this.hoverTimeout) {
          clearTimeout(this.hoverTimeout);
        }

    

        // Pause video and reset
        this.pauseVideo();
      },

      playVideo() {
        const video = this.$refs.video;
        console.log('playVideo called, video:', video, 'videoLoaded:', this.videoLoaded);
        if (!video || !this.videoLoaded) return;

        video
          .play()
          .then(() => {
            console.log('Video playing successfully');
            this.isPlaying = true;
            this.showPlayButton = false;
          })
          .catch((error) => {
            console.log('Video play failed:', error);
            // Fallback: ensure video is muted and try again
            video.muted = true;
            video
              .play()
              .then(() => {
                console.log('Video playing after mute');
                this.isPlaying = true;
                this.showPlayButton = false;
              })
              .catch(() => {
                console.log('Video play completely failed');
                // If still fails, just hide the play button
                this.showPlayButton = false;
              });
          });
      },

      pauseVideo() {
        const video = this.$refs.video;
        if (!video) return;

        video.pause();
        video.currentTime = 0;
        this.isPlaying = false;
        this.showPlayButton = true;
      },

      // Handle click events
      togglePlay() {
        if (this.isPlaying) {
          this.pauseVideo();
        } else {
          this.playVideo();
        }
      },

      init() {
        // Initialize video state
        this.$nextTick(() => {
          const video = this.$refs.video;
          if (video) {
            // Ensure video is muted for autoplay compliance
            video.muted = true;
            video.playsInline = true;

            // Check if HLS.js is available and needed
            const videoSrc = video.querySelector('source')?.src;
            if (videoSrc && videoSrc.includes('.m3u8')) {
              console.log('HLS video detected:', videoSrc);
              if (typeof Hls !== 'undefined' && Hls.isSupported()) {
                console.log('Using HLS.js for video playback');
                const hls = new Hls();
                hls.loadSource(videoSrc);
                hls.attachMedia(video);
                hls.on(Hls.Events.MANIFEST_PARSED, () => {
                  console.log('HLS manifest parsed');
                  this.videoLoaded = true;
                });
              } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                console.log('Native HLS support detected');
                video.src = videoSrc;
              } else {
                console.error('HLS not supported');
              }
            }

            video.addEventListener('ended', () => {
              this.pauseVideo();
            });

            video.addEventListener('error', (e) => {
              console.error('Video loading error:', e);
              this.showPlayButton = false;
            });

            // Handle click to play/pause
            video.addEventListener('click', (e) => {
              e.preventDefault();
              this.togglePlay();
            });
          }
        });
      },
    };
  }

    // Product Reviews JavaScript
  // Product Reviews JavaScript
  (function() {
    const productId = {{ product.id }};
    const API_BASE_URL = 'http://localhost:3001/api/reviews';

    // DOM Elements
    const reviewsStats = document.getElementById('reviews-stats-' + productId);
    const reviewsList = document.getElementById('reviews-list-' + productId);
    const writeReviewBtn = document.getElementById('write-review-btn-' + productId);
    const reviewFormContainer = document.getElementById('review-form-container-' + productId);
    const closeFormBtn = document.getElementById('close-form-btn-' + productId);
    const reviewForm = document.getElementById('review-form-' + productId);
    const submitBtn = document.getElementById('submitBtn-' + productId);
    const loading = document.getElementById('loading-' + productId);

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeReviews);
    } else {
      initializeReviews();
    }

    function initializeReviews() {
      if (reviewsStats) { loadReviewStats(); }
      if (reviewsList) { loadReviews(); }
      setupEventListeners();
      initializeStarRatings();
      initializeFitSlider();
      initializeFileUploads();
    }

    // Event Listeners
    function setupEventListeners() {
      if (writeReviewBtn) {
        writeReviewBtn.addEventListener('click', toggleReviewForm);
      }
      if (closeFormBtn) {
        closeFormBtn.addEventListener('click', toggleReviewForm);
      }
      if (reviewForm) {
        reviewForm.addEventListener('submit', handleFormSubmit);
      }
    }

    // Star Rating Functionality
    function initializeStarRatings() {
      const ratingGroups = [
        { id: 'overallRating-' + productId, hiddenId: 'rating-' + productId, textId: 'ratingText-' + productId },
        { id: 'shippingRating-' + productId, hiddenId: 'shippingRatingValue-' + productId }
      ];

      ratingGroups.forEach(group => {
        const starContainer = document.getElementById(group.id);
        const hiddenInput = document.getElementById(group.hiddenId);
        const textElement = document.getElementById(group.textId);

        if (starContainer) {
          const stars = starContainer.querySelectorAll('.star');
          let currentRating = 0;

          stars.forEach((star, index) => {
            star.addEventListener('click', () => {
              currentRating = index + 1;
              updateStarDisplay(stars, currentRating);
              hiddenInput.value = currentRating;
              
              if (textElement) {
                const ratingTexts = ['', 'Poor', 'Fair', 'Good', 'Very Good', 'Excellent'];
                textElement.textContent = ratingTexts[currentRating] || 'Click to rate';
              }
            });

            star.addEventListener('mouseenter', () => {
              updateStarDisplay(stars, index + 1);
            });
          });

          starContainer.addEventListener('mouseleave', () => {
            updateStarDisplay(stars, currentRating);
          });
        }
      });
    }

    // Fit Rating Slider
    function initializeFitSlider() {
      const fitSlider = document.getElementById('fitRating-' + productId);
      const fitValue = document.getElementById('fit-value-' + productId);
      
      if (fitSlider && fitValue) {
        const fitLabels = ['Muy pequeño', 'Pequeño', 'Perfecto', 'Grande', 'Muy grande'];
        
        fitSlider.addEventListener('input', function() {
          const value = parseInt(this.value);
          fitValue.textContent = fitLabels[value - 1];
        });
      }
    }

    // File Upload Functionality
    function initializeFileUploads() {
      // Image upload
      const imageInput = document.getElementById('image-' + productId);
      const imagePreview = document.getElementById('image-preview-' + productId);
      const previewImg = document.getElementById('preview-img-' + productId);
      const uploadPlaceholder = document.getElementById('upload-placeholder-' + productId);

      if (imageInput) {
        imageInput.addEventListener('change', function(e) {
          const file = e.target.files[0];
          if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
              previewImg.src = e.target.result;
              imagePreview.classList.remove('hidden');
              uploadPlaceholder.classList.add('hidden');
            };
            reader.readAsDataURL(file);
          }
        });
      }

      // Video upload
      const videoInput = document.getElementById('video-' + productId);
      const videoPreview = document.getElementById('video-preview-' + productId);
      const previewVideo = document.getElementById('preview-video-' + productId);
      const videoUploadPlaceholder = document.getElementById('video-upload-placeholder-' + productId);

      if (videoInput) {
        videoInput.addEventListener('change', function(e) {
          const file = e.target.files[0];
          if (file) {
            const url = URL.createObjectURL(file);
            previewVideo.src = url;
            videoPreview.classList.remove('hidden');
            videoUploadPlaceholder.classList.add('hidden');
          }
        });
      }
    }

    function updateStarDisplay(stars, rating) {
      stars.forEach((star, index) => {
        if (index < rating) {
          star.classList.remove('text-gray-300');
          star.classList.add('text-yellow-400');
        } else {
          star.classList.remove('text-yellow-400');
          star.classList.add('text-gray-300');
        }
      });
    }

    // Form Handling
    function toggleReviewForm() {
      if (reviewFormContainer.style.display === 'none') {
        reviewFormContainer.style.display = 'block';
        reviewFormContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
      } else {
        reviewFormContainer.style.display = 'none';
      }
    }

    async function handleFormSubmit(e) {
      e.preventDefault();
      
      const formData = new FormData(reviewForm);
      const reviewData = {
        productId: productId,
        rating: parseInt(formData.get('rating')),
        title: formData.get('title'),
        body: formData.get('body'),
        authorName: formData.get('authorName'),
        authorEmail: formData.get('authorEmail'),
        ageRange: formData.get('ageRange') || null,
        sizePurchased: formData.get('sizePurchased') || null,
        fitRating: parseInt(formData.get('fitRating')),
        shippingRating: parseInt(formData.get('shippingRating')) || null,
        isVerifiedBuyer: formData.get('isVerifiedBuyer') === 'on',
        recommendsProduct: formData.get('recommendsProduct') === 'on'
      };

      // Handle file uploads
      const imageFile = formData.get('image');
      const videoFile = formData.get('video');

      if (imageFile && imageFile.size > 0) {
        reviewData.image = await convertFileToBase64(imageFile);
      }

      if (videoFile && videoFile.size > 0) {
        reviewData.video = await convertFileToBase64(videoFile);
      }

      // Show loading state
      reviewForm.style.display = 'none';
      loading.classList.remove('hidden');

      try {
        const response = await fetch(API_BASE_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(reviewData)
        });

        if (response.ok) {
          // Show success message
          showAlert('Thank you for your review! It will be published after moderation.', 'success');
          
          // Reset form
          reviewForm.reset();
          resetForm();
          
          // Hide form
          reviewFormContainer.style.display = 'none';
          
          // Reload reviews and stats
          loadReviewStats();
          loadReviews();
        } else {
          const errorData = await response.json();
          showAlert(errorData.message || 'Failed to submit review. Please try again.', 'error');
        }
      } catch (error) {
        console.error('Error submitting review:', error);
        showAlert('Network error. Please check your connection and try again.', 'error');
      } finally {
        // Hide loading state
        loading.classList.add('hidden');
        reviewForm.style.display = 'block';
      }
    }

    function convertFileToBase64(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
      });
    }

    function resetForm() {
      // Reset star ratings
      const ratingGroups = ['overallRating-' + productId, 'shippingRating-' + productId];
      ratingGroups.forEach(groupId => {
        const stars = document.querySelectorAll('#' + groupId + ' .star');
        stars.forEach(star => {
          star.classList.remove('text-yellow-400');
          star.classList.add('text-gray-300');
        });
      });
      
      // Reset rating text
      const ratingText = document.getElementById('ratingText-' + productId);
      if (ratingText) {
        ratingText.textContent = 'Click to rate';
      }

      // Reset fit slider
      const fitSlider = document.getElementById('fitRating-' + productId);
      const fitValue = document.getElementById('fit-value-' + productId);
      if (fitSlider && fitValue) {
        fitSlider.value = 3;
        fitValue.textContent = 'Perfecto';
      }

      // Reset file previews
      const imagePreview = document.getElementById('image-preview-' + productId);
      const videoPreview = document.getElementById('video-preview-' + productId);
      const uploadPlaceholder = document.getElementById('upload-placeholder-' + productId);
      const videoUploadPlaceholder = document.getElementById('video-upload-placeholder-' + productId);

      if (imagePreview) imagePreview.classList.add('hidden');
      if (videoPreview) videoPreview.classList.add('hidden');
      if (uploadPlaceholder) uploadPlaceholder.classList.remove('hidden');
      if (videoUploadPlaceholder) videoUploadPlaceholder.classList.remove('hidden');
    }

    // API Calls
    async function loadReviewStats() {
      if (!reviewsStats) return;
      try {
        const response = await fetch(`${API_BASE_URL}/stats/${productId}`);
        if (response.ok) {
          const stats = await response.json();
          if (stats) displayReviewStats(stats);
        } else {
          reviewsStats.innerHTML = '<p class="text-gray-500 text-center py-4">No reviews yet</p>';
        }
      } catch (error) {
        console.error('Error loading review stats:', error);
        reviewsStats.innerHTML = '<p class="text-gray-500 text-center py-4">Error loading statistics</p>';
      }
    }

    async function loadReviews() {
      if (!reviewsList) return;
      try {
        const response = await fetch(`${API_BASE_URL}/product/${productId}`);
        if (response.ok) {
          const reviews = await response.json();
          if (Array.isArray(reviews)) {
            displayReviews(reviews);
          } else {
            reviewsList.innerHTML = '<p class="text-gray-500 text-center py-4">No reviews found</p>';
          }
        } else {
          reviewsList.innerHTML = '<p class="text-gray-500 text-center py-4">No reviews found</p>';
        }
      } catch (error) {
        console.error('Error loading reviews:', error);
        reviewsList.innerHTML = '<p class="text-gray-500 text-center py-4">Error loading reviews</p>';
      }
    }

    // Display Functions
    function displayReviewStats(stats) {
      if (!reviewsStats || !stats) return;
      const average = Number(stats.averageRating || 0);
      const total = Number(stats.totalReviews || 0);
      const verified = Number(stats.verifiedBuyers || 0);
      const rec = Number(Math.round(stats.recommendationRate || 0));
      const fiveStar = (stats.ratingDistribution && stats.ratingDistribution[5]) || 0;

      const statsHtml = `
        <div class="bg-gray-50 rounded-lg p-6 mb-6">
          <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div class="text-center">
              <div class="text-3xl font-bold text-gray-900">${average.toFixed(1)}</div>
              <div class="flex justify-center mt-1">
                ${generateStars(average)}
              </div>
              <div class="text-sm text-gray-600 mt-1">${total} review${total !== 1 ? 's' : ''}</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-semibold text-gray-900">${verified}</div>
              <div class="text-sm text-gray-600">Verified Buyers</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-semibold text-gray-900">${rec}%</div>
              <div class="text-sm text-gray-600">Recommend</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-semibold text-gray-900">${fiveStar}</div>
              <div class="text-sm text-gray-600">5-Star Reviews</div>
            </div>
          </div>
        </div>
      `;
      reviewsStats.innerHTML = statsHtml;
    }

    function displayReviews(reviews) {
      if (!reviewsList) return;
      if (!Array.isArray(reviews) || reviews.length === 0) {
        reviewsList.innerHTML = '<p class="text-gray-500 text-center py-8">No reviews yet. Be the first to review this product!</p>';
        return;
      }

      const reviewsHtml = reviews.map(review => `
        <div class="bg-white border border-gray-200 rounded-lg p-6 mb-4">
          <div class="flex items-start justify-between mb-3">
            <div class="flex items-center gap-3">
              <div class="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                <span class="text-gray-600 font-semibold">${review.authorName.charAt(0).toUpperCase()}</span>
              </div>
              <div>
                <div class="font-semibold text-gray-900">${review.authorName}</div>
                <div class="flex items-center gap-2">
                  ${generateStars(review.rating)}
                  <span class="text-sm text-gray-500">${formatDate(review.createdAt)}</span>
                </div>
              </div>
            </div>
            ${review.isVerifiedBuyer ? '<span class="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full">Verified Buyer</span>' : ''}
          </div>
          
          <h4 class="font-semibold text-gray-900 mb-2">${review.title}</h4>
          <p class="text-gray-700 mb-4">${review.body}</p>
          
          ${review.image ? `
            <div class="mb-4">
              <img src="${review.image}" alt="Review image" class="max-w-full h-48 object-cover rounded-lg">
            </div>
          ` : ''}
          
          ${review.video ? `
            <div class="mb-4">
              <video controls class="max-w-full h-48 object-cover rounded-lg">
                <source src="${review.video}" type="video/mp4">
                Your browser does not support the video tag.
              </video>
            </div>
          ` : ''}
          
          ${review.ageRange || review.sizePurchased ? `
            <div class="flex flex-wrap gap-4 text-sm text-gray-600 mb-3">
              ${review.ageRange ? `<span>Age: ${review.ageRange}</span>` : ''}
              ${review.sizePurchased ? `<span>Size: ${review.sizePurchased}</span>` : ''}
            </div>
          ` : ''}
          
          ${review.fitRating ? `
            <div class="flex items-center gap-2 text-sm mb-2">
              <span class="text-gray-600">Fit:</span>
              <span class="font-medium text-blue-600">${getFitLabel(review.fitRating)}</span>
            </div>
          ` : ''}
          
          ${review.shippingRating ? `
            <div class="flex items-center gap-1 text-sm">
              <span class="text-gray-600">Shipping:</span>
              ${generateStars(review.shippingRating, 'text-sm')}
            </div>
          ` : ''}
        </div>
      `).join('');

      reviewsList.innerHTML = reviewsHtml;
    }

    function getFitLabel(rating) {
      const labels = ['', 'Muy pequeño', 'Pequeño', 'Perfecto', 'Grande', 'Muy grande'];
      return labels[rating] || '';
    }

    function generateStars(rating, sizeClass = '') {
      const fullStars = Math.floor(rating);
      const hasHalfStar = rating % 1 !== 0;
      let stars = '';

      for (let i = 0; i < fullStars; i++) {
        stars += `<span class="text-yellow-400 ${sizeClass}">★</span>`;
      }
      
      if (hasHalfStar) {
        stars += `<span class="text-yellow-400 ${sizeClass}">★</span>`;
      }
      
      const emptyStars = 5 - Math.ceil(rating);
      for (let i = 0; i < emptyStars; i++) {
        stars += `<span class="text-gray-300 ${sizeClass}">★</span>`;
      }
      
      return stars;
    }

    function formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      });
    }

    function showAlert(message, type) {
      const alertClass = type === 'success' 
        ? 'bg-green-100 border-green-400 text-green-700' 
        : 'bg-red-100 border-red-400 text-red-700';
      
      const alert = document.createElement('div');
      alert.className = `fixed top-4 right-4 p-4 border rounded-lg shadow-lg z-50 max-w-sm ${alertClass}`;
      alert.innerHTML = `
        <div class="flex items-center gap-2">
          <span class="text-sm font-medium">${message}</span>
          <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-lg">&times;</button>
        </div>
      `;
      
      document.body.appendChild(alert);
      
      setTimeout(() => {
        if (document.body.contains(alert)) {
          alert.remove();
        }
      }, 5000);
    }
  })();
</script>

{% schema %}
{
  "name": "Product Page",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "header",
      "content": "Delivery Settings"
    },
    {
      "type": "range",
      "id": "delivery_days",
      "min": 1,
      "max": 30,
      "step": 1,
      "label": "Delivery Days",
      "default": 7,
      "info": "Number of days to add to current date for delivery estimation"
    },
    {
      "type": "text",
      "id": "availability_text",
      "label": "Availability Text",
      "default": "Aún disponibles",
      "info": "Text to display for product availability"
    },
    {
      "type": "header",
      "content": "Purchase Options"
    },
    {
      "type": "text",
      "id": "single_option_title",
      "label": "Single Option Title",
      "default": "Unico",
      "info": "Title for single product purchase option"
    },
    {
      "type": "text",
      "id": "single_option_subtitle",
      "label": "Single Option Subtitle",
      "default": "Standard price",
      "info": "Subtitle for single product purchase option"
    },
    {
      "type": "text",
      "id": "duo_option_title",
      "label": "Duo Option Title",
      "default": "Duo",
      "info": "Title for duo/bundle purchase option"
    },
    {
      "type": "text",
      "id": "duo_option_subtitle",
      "label": "Duo Option Subtitle",
      "default": "Compra más y ahorra",
      "info": "Subtitle for duo/bundle purchase option"
    },
    {
      "type": "text",
      "id": "best_value_text",
      "label": "Best Value Text",
      "default": "BEST VALUE",
      "info": "Text for best value badge"
    },
    {
      "type": "range",
      "id": "duo_discount_percentage",
      "min": 1,
      "max": 50,
      "step": 1,
      "label": "Descuento Orden (%)",
      "default": 5,
      "info": "Porcentaje de descuento aplicado a la orden en compras duo (ej: 5 = 5% de descuento)"
    },
    {
      "type": "product_list",
      "id": "duo_eligible_products",
      "label": "Products Eligible for Duo Discount",
      "info": "Select specific products that can use the duo discount feature. Leave empty to disable product-based filtering."
    },
    {
      "type": "collection_list",
      "id": "duo_eligible_collections",
      "label": "Collections Eligible for Duo Discount",
      "info": "Select collections whose products can use the duo discount feature. Leave empty to disable collection-based filtering."
    },
    {
      "type": "header",
      "content": "Shipping & Returns"
    },
    {
      "type": "text",
      "id": "free_shipping_text",
      "label": "Free Shipping Text",
      "default": "Envío gratis En ordenes +500.000",
      "info": "Text for free shipping information"
    },
    {
      "type": "text",
      "id": "free_returns_text",
      "label": "Free Returns Text",
      "default": "Devoluciones gratis y intercambiables",
      "info": "Text for free returns information"
    },
    {
      "type": "header",
      "content": "Call to Action"
    },
    {
      "type": "text",
      "id": "cta_button_text",
      "label": "Add to Cart Button Text",
      "default": "Paga de forma segura",
      "info": "Text for the main call-to-action button"
    },
    {
      "type": "header",
      "content": "Mobile Carousel"
    },
    {
      "type": "checkbox",
      "id": "show_reviews_average",
      "label": "Show reviews average value",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_reviews_count",
      "label": "Show reviews count",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_slide_counter",
      "label": "Show Slide Counter",
      "default": true,
      "info": "Display slide counter on mobile carousel"
    },
    {
      "type": "checkbox",
      "id": "show_mobile_navigation",
      "label": "Show Mobile Navigation Arrows",
      "default": true,
      "info": "Display navigation arrows on mobile carousel"
    }
  ],
  "blocks": [
    {
      "type": "accordion_item",
      "name": "Accordion Item",
      "settings": [
        {
          "type": "text",
          "id": "question",
          "label": "Question",
          "default": "Detalles del producto"
        },
        {
          "type": "richtext",
          "id": "answer",
          "label": "Answer",
          "default": "<p>Información detallada sobre el producto...</p>"
        }
      ]
    },
    {
      "type": "product_gallery",
      "name": "Product Gallery",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Gallery Title",
          "default": "Combínalo Con"
        },
        {
          "type": "range",
          "id": "products_limit",
          "min": 2,
          "max": 8,
          "step": 1,
          "label": "Number of Products",
          "default": 4,
          "info": "Maximum number of products to show"
        }
      ]
    }
  ],
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}
