{% comment %}
  Product Carousel Section
  Features:
  - Product filtering by collection, tags, or colors
  - Product cards with badges, ratings, color swatches
  - Interactive color selection that changes product image
  - Size selection grid that appears on plus icon click
  - Add to cart functionality
  - Same styling as content carousel
{% endcomment %}

<div class="py-12 lg:py-10 overflow-x-hidden" id="product-carousel-{{ section.id }}">
  <div class=" w-full flex flex-col gap-8">
    {% if section.settings.title != blank %}
      <div class="flex justify-between items-end  mx-4 lg:mx-12">
        <div class="flex  flex-col gap-2">
          <h2>{{ section.settings.title }}</h2>
          {% if section.settings.rich_text != blank %}
            <div class="rich-text">{{ section.settings.rich_text }}</div>
          {% endif %}
        </div>
        <div class="flex items-center gap-8">
          {% if section.settings.show_view_all and section.settings.view_all_link != blank %}
            <a
              href="{{ section.settings.view_all_link }}"
              class="text-gray-600 hover:text-gray-900 transition-colors underline"
            >
              {{ section.settings.view_all_text | default: 'Ver todos' }}
            </a>
          {% endif %}
          {% comment %} Always show arrows for product carousel {% endcomment %}
          {% render 'carousel-arrows' %}
        </div>
      </div>
    {% endif %}

    {% assign products = '' %}
    {% case section.settings.product_source %}
      {% when 'collection' %}
        {% if section.settings.collection != blank %}
          {% assign products = section.settings.collection.products %}
        {% endif %}
      {% when 'tags' %}
        {% if section.settings.product_tags != blank %}
          {% assign tag_array = section.settings.product_tags | split: ',' %}
          {% assign products = collections.all.products %}
          {% for tag in tag_array %}
            {% assign tag_trimmed = tag | strip %}
            {% assign products = products | where: 'tags', tag_trimmed %}
          {% endfor %}
        {% endif %}
      {% when 'manual' %}
        {% assign products = section.settings.products %}
    {% endcase %}

    {% comment %} Count available products {% endcomment %}
    {% assign available_count = 0 %}
    {% for product in products %}
      {% if product.available %}
        {% assign available_count = available_count | plus: 1 %}
      {% endif %}
    {% endfor %}

    {% if available_count > 0 %}
      <div class="relative">
        <div
          class="product-carousel px-4 lg:px-12 swiper-main-carousel-{{ section.id }}    "
          data-carousel-id="{{ section.id }}"
          data-carousel-type="main-carousel"
        >
          <div class="swiper-wrapper ">
            {% assign products_shown = 0 %}
            {% for product in products %}
              {% if product.available and products_shown < section.settings.max_products %}
                <div class="swiper-slide">
                  <div class="w-full">
                    {% render 'product-card',
                      product: product,
                      show_badges: section.settings.show_badges,
                      show_rating: section.settings.show_rating,
                      show_color_swatches: section.settings.show_color_swatches,
                      show_size_selector: section.settings.show_size_selector
                    %}
                  </div>
                </div>
                {% assign products_shown = products_shown | plus: 1 %}
              {% endif %}
            {% endfor %}
          </div>
        </div>
      </div>
    {% else %}
      {% comment %} Show message when no products are available {% endcomment %}
      <div class="text-center py-8">
        <p class="text-gray-600">
          {{ section.settings.no_products_message | default: 'No hay productos disponibles en este momento.' }}
        </p>
      </div>
    {% endif %}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const carouselId = '{{ section.id }}';
    const carouselElement = document.querySelector('.swiper-main-carousel-{{ section.id }}');

    if (carouselElement && typeof Swiper !== 'undefined') {
      // Check if this carousel is already initialized
      if (carouselElement.swiper) {
        return;
      }

            const totalProducts = {{ available_count }};
      const enableDesktopCarousel = totalProducts > 4;

      const swiper = new Swiper(carouselElement, {
        slidesPerView: 1,
        spaceBetween: 2,
        peek: 10,
        freeMode: {
          enabled: true,
          sticky: true,
          momentum: true,
          momentumRatio: 0.25,
          momentumVelocityRatio: 0.5,
          momentumBounce: true,
          momentumBounceRatio: 0.3,
        },
        grabCursor: false,
        navigation: {
          nextEl: '.carousel-next',
          prevEl: '.carousel-prev',
        },
        breakpoints: {
          1024: {
            slidesPerView: 4,
            freeMode:  {
              enabled: true,
              sticky: true,
              momentum: true,
            },
          }
        },
        on: {
          init: function() {
            updateProductArrowStates(this);
          },
          slideChange: function() {
            updateProductArrowStates(this);
          },
          reachBeginning: function() {
            updateProductArrowStates(this);
          },
          reachEnd: function() {
            updateProductArrowStates(this);
          },
        },
      });

      // Store the swiper instance on the element to avoid conflicts
      carouselElement.swiper = swiper;
    }

    // Function to update arrow states for product carousel
    function updateProductArrowStates(swiper) {
      const sectionContainer = document.getElementById('product-carousel-{{ section.id }}');
      if (!sectionContainer) return;

      const prevArrow = sectionContainer.querySelector('.carousel-prev');
      const nextArrow = sectionContainer.querySelector('.carousel-next');


      if (prevArrow) {
        if (swiper.isBeginning) {
          prevArrow.style.backgroundColor = '#e7e7e7';
          prevArrow.style.color = 'black';
          prevArrow.style.cursor = 'not-allowed';
        } else {
          prevArrow.style.backgroundColor = 'var(--shopify-primary-color)';
          prevArrow.style.color = 'white';
          prevArrow.style.cursor = 'pointer';
          prevArrow.disabled = false;
        }
      }

      if (nextArrow) {
        if (swiper.isEnd) {
          prevArrow.style.backgroundColor = '#e7e7e7';
          prevArrow.style.color = 'black';
          prevArrow.style.cursor = 'not-allowed';
        } else {
          nextArrow.style.backgroundColor = 'var(--shopify-primary-color)';
          nextArrow.style.color = 'white';
          nextArrow.style.cursor = 'pointer';
          nextArrow.disabled = false;
        }
      }
    }
  });
</script>

{% schema %}
{
  "name": "Product Carousel",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Carousel Title",
      "default": "Best Sellers"
    },
    {
      "type": "richtext",
      "id": "rich_text",
      "label": "Rich Text",
      "info": "Optional rich text content below the title"
    },
    {
      "type": "header",
      "content": "View All Link"
    },
    {
      "type": "checkbox",
      "id": "show_view_all",
      "label": "Show View All Link",
      "default": true
    },
    {
      "type": "text",
      "id": "view_all_text",
      "label": "View All Text",
      "default": "Ver todos"
    },
    {
      "type": "url",
      "id": "view_all_link",
      "label": "View All Link"
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "label": "Show Navigation Arrows",
      "default": true
    },
    {
      "type": "header",
      "content": "Product Selection"
    },
    {
      "type": "select",
      "id": "product_source",
      "label": "Product Source",
      "options": [
        {
          "value": "collection",
          "label": "Collection"
        },
        {
          "value": "tags",
          "label": "Product Tags"
        },
        {
          "value": "manual",
          "label": "Manual Selection"
        }
      ],
      "default": "collection"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection",
      "info": "Select products from this collection"
    },
    {
      "type": "text",
      "id": "product_tags",
      "label": "Product Tags",
      "info": "Comma-separated tags (e.g., 'best-seller,new')"
    },
    {
      "type": "product_list",
      "id": "products",
      "label": "Manual Product Selection",
      "limit": 20
    },
    {
      "type": "range",
      "id": "max_products",
      "label": "Maximum Products",
      "min": 4,
      "max": 20,
      "step": 1,
      "default": 12
    },
    {
      "type": "header",
      "content": "Product Card Display"
    },
    {
      "type": "checkbox",
      "id": "show_badges",
      "label": "Show Product Badges",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "label": "Show Product Rating",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_color_swatches",
      "label": "Show Color Swatches",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_size_selector",
      "label": "Show Size Selector",
      "default": true
    },
    {
      "type": "header",
      "content": "Messages"
    },
    {
      "type": "text",
      "id": "no_products_message",
      "label": "No Products Available Message",
      "default": "No hay productos disponibles en este momento.",
      "info": "Message shown when no products are available to display"
    },
    {
      "type": "header",
      "content": "Carousel Settings"
    }
  ],
  "presets": [
    {
      "name": "Product Carousel",
      "settings": {
        "title": "Best Sellers",
        "product_source": "collection"
      }
    }
  ]
}
{% endschema %}
