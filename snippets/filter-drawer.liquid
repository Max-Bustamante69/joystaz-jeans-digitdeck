{% comment %}
  Filter Drawer Component
  - Matches the design from the provided image
  - Uses Alpine.js for state management and animations
  - Integrates with collection products for filtering
  - Clean, modern design with smooth animations
  - Dynamically extracts colors, sizes, and tags from products
{% endcomment %}

<div
  x-cloak
  x-data="filterDrawer()"
  x-show="isOpen"
  x-transition.opacity.duration.500ms
  class="fixed inset-0 z-50 overflow-hidden"
  @click.self="closeDrawer()"
  @keydown.escape.window="closeDrawer()"
  @filter:open.window="openDrawer()"
>
  <!-- Backdrop -->
  <div class="absolute inset-0 bg-black/70"></div>

  <!-- Drawer -->
  <div
    x-cloak
    x-show="isOpen"
    x-transition:enter="transform transition ease-out duration-350"
    x-transition:enter-start="translate-x-full"
    x-transition:enter-end="translate-x-0"
    x-transition:leave="transform transition ease-in duration-300"
    x-transition:leave-start="translate-x-0"
    x-transition:leave-end="translate-x-full"
    class="absolute right-0 top-0 h-full w-[88vw] lg:w-[420px] bg-white shadow-xl flex flex-col overflow-hidden"
    @click.outside="closeDrawer()"
  >
    <!-- Header -->
    <div class="p-6 flex-shrink-0 border-b border-gray-200">
      <div class="flex items-center justify-between">
        <button
          @click="closeDrawer()"
          class="text-gray-400 hover:text-gray-600 transition-colors duration-200"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
        <h2 class="text-lg font-semibold text-gray-900">Filtrar</h2>
        <button
          @click="applyFilters()"
          class="text-sm font-medium text-gray-900 hover:text-gray-700 transition-colors duration-200"
        >
          Aplicar
        </button>
      </div>
    </div>

    <!-- Scrollable Content -->
    <div class="flex-1 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100">
      <div class="p-6 space-y-8">
        <!-- Style Filter -->
        <div class="space-y-4">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-2">
              <p class="body-lg font-medium capitalize">Estilo</p>
              <span
                x-show="selectedStyles.length > 0"
                x-text="selectedStyles.length"
                class="bg-gray-100 text-gray-600 text-xs font-medium px-2 py-1 rounded-full"
              ></span>
            </div>
            <button
              @click="toggleStyleSection()"
              class="text-gray-400 hover:text-gray-600 transition-colors duration-200"
            >
              <svg
                class="w-5 h-5 transition-transform duration-200"
                :class="styleSectionExpanded ? 'rotate-45' : ''"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
              </svg>
            </button>
          </div>

          <div
            x-show="styleSectionExpanded"
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start=" max-h-0 overflow-hidden"
            x-transition:enter-end=" max-h-96 overflow-visible"
            x-transition:leave="transition ease-in duration-200"
            x-transition:leave-start=" max-h-96 overflow-hidden"
            x-transition:leave-end=" max-h-0 overflow-hidden"
            class="space-y-3"
          >
            <!-- Style Options -->
            <div class="flex flex-wrap gap-2">
              <template x-for="style in availableStyles" :key="style">
                <button
                  @click="toggleStyle(style)"
                  :class="selectedStyles.includes(style) ? 'bg-black text-white' : 'bg-white border border-gray-300 text-gray-700'"
                  class="px-3 py-2 rounded-full body-sm capitalize font-medium transition-all duration-200"
                  x-text="style"
                ></button>
              </template>
            </div>
          </div>
        </div>

        <!-- Color Filter -->
        <div class="space-y-4">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-2">
              <p class="body-lg font-medium capitalize">Color</p>
              <span
                x-show="selectedColors.length > 0"
                x-text="selectedColors.length"
                class="bg-gray-100 text-gray-600 text-xs font-medium px-2 py-1 rounded-full"
              ></span>
            </div>

            <button
              @click="toggleColorSection()"
              class="text-gray-400 hover:text-gray-600 transition-colors duration-200"
            >
              <svg
                class="w-5 h-5 transition-transform duration-200"
                :class="colorSectionExpanded ? 'rotate-45' : ''"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
              </svg>
            </button>
          </div>

          <div
            x-show="colorSectionExpanded"
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0 max-h-0 overflow-hidden"
            x-transition:enter-end="opacity-100 max-h-96 overflow-visible"
            x-transition:leave="transition ease-in duration-200"
            x-transition:leave-start="opacity-100 max-h-96 overflow-hidden"
            x-transition:leave-end="opacity-0 max-h-0 overflow-hidden"
            class="space-y-3"
          >
            <!-- Color Grid -->
            <div class="grid grid-cols-2 gap-3">
              <template x-for="color in availableColors" :key="color.name">
                <button
                  @click="toggleColor(color.name)"
                  class="flex items-center gap-3 p-3 rounded-lg border   transition-all duration-200 "
                  :class="selectedColors.includes(color.name) ? 'border-black bg-gray-50' : 'border-gray-200'"
                >
                  <div
                    class="w-4 h-4 rounded-full border border-gray-300"
                    :style="`background-color: ${color.value}`"
                  ></div>
                  <span class="text-sm font-medium text-gray-700" x-text="color.name"></span>
                </button>
              </template>
            </div>
          </div>
        </div>

        <!-- Size Filter -->
        <div class="space-y-4">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-2">
              <p class="body-lg font-medium capitalize">Talla</p>
              <span
                x-show="selectedSizes.length > 0"
                x-text="selectedSizes.length"
                class="bg-gray-100 text-gray-600 text-xs font-medium px-2 py-1 rounded-full"
              ></span>
            </div>

            <button
              @click="toggleSizeSection()"
              class="text-gray-400 hover:text-gray-600 transition-colors duration-200"
            >
              <svg
                class="w-5 h-5 transition-transform duration-200"
                :class="sizeSectionExpanded ? 'rotate-45' : ''"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
              </svg>
            </button>
          </div>

          <div
            x-show="sizeSectionExpanded"
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0 max-h-0 overflow-hidden"
            x-transition:enter-end="opacity-100 max-h-96 overflow-visible"
            x-transition:leave="transition ease-in duration-200"
            x-transition:leave-start="opacity-100 max-h-96 overflow-hidden"
            x-transition:leave-end="opacity-0 max-h-0 overflow-hidden"
            class="space-y-3"
          >
            <!-- Size Options -->
            <div class="flex flex-wrap gap-2">
              <template x-for="size in availableSizes" :key="size">
                <button
                  @click="toggleSize(size)"
                  :class="selectedSizes.includes(size) ? 'bg-black text-white' : 'bg-white border border-gray-300 text-gray-700'"
                  class="w-12 h-12 rounded-full text-sm font-medium transition-all duration-200 hover:bg-gray-50 flex items-center justify-center"
                  x-text="size"
                ></button>
              </template>
            </div>
          </div>
        </div>

        <!-- Collection Filter -->
        <div class="space-y-4">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-2">
              <p class="body-lg font-medium capitalize">Colecci√≥n</p>
              <span
                x-show="selectedCollections.length > 0"
                x-text="selectedCollections.length"
                class="bg-gray-100 text-gray-600 text-xs font-medium px-2 py-1 rounded-full"
              ></span>
            </div>

            <button
              @click="toggleCollectionSection()"
              class="text-gray-400 hover:text-gray-600 transition-colors duration-200"
            >
              <svg
                class="w-5 h-5 transition-transform duration-200"
                :class="collectionSectionExpanded ? 'rotate-45' : ''"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
              </svg>
            </button>
          </div>

          <div
            x-show="collectionSectionExpanded"
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0 max-h-0 overflow-hidden"
            x-transition:enter-end="opacity-100 max-h-96 overflow-visible"
            x-transition:leave="transition ease-in duration-200"
            x-transition:leave-start="opacity-100 max-h-96 overflow-hidden"
            x-transition:leave-end="opacity-0 max-h-0 overflow-hidden"
            class="space-y-3"
          >
            <!-- Collection Options -->
            <div class="flex flex-wrap gap-2">
              <template x-for="collection in availableCollections" :key="collection">
                <button
                  @click="toggleCollection(collection)"
                  :class="selectedCollections.includes(collection) ? 'bg-black text-white' : 'bg-white border border-gray-300 text-gray-700'"
                  class=" py-2 rounded-full text-sm font-medium transition-all duration-200 hover:bg-gray-50"
                  x-text="collection"
                ></button>
              </template>
            </div>
          </div>
        </div>

        <!-- Sale Filter -->
        <div class="space-y-4">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-2">
              <p class="body-lg font-medium capitalize">Ofertas</p>
              <span
                x-show="showOnlyOnSale"
                class="bg-gray-100 text-gray-600 text-xs font-medium px-2 py-1 rounded-full"
              ></span>
            </div>

            <button
              @click="toggleSaleSection()"
              class="text-gray-400 hover:text-gray-600 transition-colors duration-200"
            >
              <svg
                class="w-5 h-5 transition-transform duration-200"
                :class="saleSectionExpanded ? 'rotate-45' : ''"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
              </svg>
            </button>
          </div>

          <div
            x-show="saleSectionExpanded"
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0 max-h-0 overflow-hidden"
            x-transition:enter-end="opacity-100 max-h-96 overflow-visible"
            x-transition:leave="transition ease-in duration-200"
            x-transition:leave-start="opacity-100 max-h-96 overflow-hidden"
            x-transition:leave-end="opacity-0 max-h-0 overflow-hidden"
            class="space-y-3"
          >
            <button
              @click="toggleSale()"
              :class="showOnlyOnSale ? 'bg-black text-white' : 'bg-white border border-gray-300 text-gray-700'"
              class="w-full  py-2 rounded-full text-sm font-medium transition-all duration-200 hover:bg-gray-50"
            >
              Solo productos en oferta
            </button>
          </div>
        </div>

        <!-- Sort Filter -->
        <div class="space-y-4">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-2">
              <p class="body-lg font-medium capitalize">Ordenar</p>
              <span
                x-show="sortOption !== 'default'"
                class="bg-gray-100 text-gray-600 text-xs font-medium px-2 py-1 rounded-full"
              ></span>
            </div>

            <button
              @click="toggleSortSection()"
              class="text-gray-400 hover:text-gray-600 transition-colors duration-200"
            >
              <svg
                class="w-5 h-5 transition-transform duration-200"
                :class="sortSectionExpanded ? 'rotate-45' : ''"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
              </svg>
            </button>
          </div>

          <div
            x-show="sortSectionExpanded"
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0 max-h-0 overflow-hidden"
            x-transition:enter-end="opacity-100 max-h-96 overflow-visible"
            x-transition:leave="transition ease-in duration-200"
            x-transition:leave-start="opacity-100 max-h-96 overflow-hidden"
            x-transition:leave-end="opacity-0 max-h-0 overflow-hidden"
            class="space-y-3"
          >
            <!-- Sort Options -->
            <div class="space-y-2">
              <button
                @click="sortOption = 'default'"
                :class="sortOption === 'default' ? 'bg-black text-white' : 'bg-white border border-gray-300 text-gray-700'"
                class="w-full  py-2 rounded-full text-sm font-medium transition-all duration-200 hover:bg-gray-50"
              >
                Orden por defecto
              </button>
              <button
                @click="sortOption = 'price-asc'"
                :class="sortOption === 'price-asc' ? 'bg-black text-white' : 'bg-white border border-gray-300 text-gray-700'"
                class="w-full  py-2 rounded-full text-sm font-medium transition-all duration-200 hover:bg-gray-50"
              >
                Precio: Menor a Mayor
              </button>
              <button
                @click="sortOption = 'price-desc'"
                :class="sortOption === 'price-desc' ? 'bg-black text-white' : 'bg-white border border-gray-300 text-gray-700'"
                class="w-full  py-2 rounded-full text-sm font-medium transition-all duration-200 hover:bg-gray-50"
              >
                Precio: Mayor a Menor
              </button>
              <button
                @click="sortOption = 'name-asc'"
                :class="sortOption === 'name-asc' ? 'bg-black text-white' : 'bg-white border border-gray-300 text-gray-700'"
                class="w-full  py-2 rounded-full text-sm font-medium transition-all duration-200 hover:bg-gray-50"
              >
                Nombre: A-Z
              </button>
              <button
                @click="sortOption = 'name-desc'"
                :class="sortOption === 'name-desc' ? 'bg-black text-white' : 'bg-white border border-gray-300 text-gray-700'"
                class="w-full  py-2 rounded-full text-sm font-medium transition-all duration-200 hover:bg-gray-50"
              >
                Nombre: Z-A
              </button>
              <button
                @click="sortOption = 'newest'"
                :class="sortOption === 'newest' ? 'bg-black text-white' : 'bg-white border border-gray-300 text-gray-700'"
                class="w-full  py-2 rounded-full text-sm font-medium transition-all duration-200 hover:bg-gray-50"
              >
                M√°s recientes
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Footer -->
    <div class="p-6 border-t border-gray-200 flex-shrink-0">
      <div class="flex gap-3">
        <button
          @click="clearAllFilters()"
          class="flex-1  py-3 border border-gray-300 text-gray-700 font-medium rounded-lg hover:bg-gray-50 transition-colors duration-200"
        >
          Limpiar
        </button>
        <button
          @click="applyFilters()"
          class="flex-1  py-3 bg-black text-white font-medium rounded-lg hover:bg-gray-800 transition-colors duration-200"
        >
          Aplicar Filtros
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  function filterDrawer() {
    return {
      isOpen: false,
      scrollY: 0, // Store scroll position for drawer

      // Filter states
      selectedStyles: [],
      selectedColors: [],
      selectedSizes: [],
      selectedCollections: [],
      showOnlyOnSale: false,
      sortOption: 'default',

      // Section expansion states
      styleSectionExpanded: true,
      colorSectionExpanded: true,
      sizeSectionExpanded: true,
      collectionSectionExpanded: true,
      saleSectionExpanded: true,
      sortSectionExpanded: true,

      // Available options (populated dynamically from products)
      availableStyles: [],
      availableColors: [],
      availableSizes: [],
      availableCollections: [],

      init() {
        this.loadCollectionData();
        this.$watch('selectedStyles', () => this.applyFiltersImmediately());
        this.$watch('selectedColors', () => this.applyFiltersImmediately());
        this.$watch('selectedSizes', () => this.applyFiltersImmediately());
        this.$watch('selectedCollections', () => this.applyFiltersImmediately());
        this.$watch('showOnlyOnSale', () => this.applyFiltersImmediately());
        this.$watch('sortOption', () => this.applyFiltersImmediately());
      },

      openDrawer() {
        this.isOpen = true;
        // Store current scroll position
        this.scrollY = window.scrollY;
        document.body.style.overflow = 'hidden';
        document.body.style.position = 'fixed';
        document.body.style.width = '100%';
        document.body.style.top = `-${this.scrollY}px`;
        document.body.classList.add('filter-drawer-open');
      },

      closeDrawer() {
        this.isOpen = false;
        document.body.style.overflow = '';
        document.body.style.position = '';
        document.body.style.width = '';
        document.body.style.top = '';
        document.body.classList.remove('filter-drawer-open');
        // Restore scroll position
        window.scrollTo(0, this.scrollY || 0);
      },

      toggleStyleSection() {
        this.styleSectionExpanded = !this.styleSectionExpanded;
      },

      toggleColorSection() {
        this.colorSectionExpanded = !this.colorSectionExpanded;
      },

      toggleSizeSection() {
        this.sizeSectionExpanded = !this.sizeSectionExpanded;
      },

      toggleCollectionSection() {
        this.collectionSectionExpanded = !this.collectionSectionExpanded;
      },


      toggleSaleSection() {
        this.saleSectionExpanded = !this.saleSectionExpanded;
      },

      toggleSortSection() {
        this.sortSectionExpanded = !this.sortSectionExpanded;
      },


      selectAllStyles() {
        this.selectedStyles = [];
      },

      toggleStyle(style) {
        if (this.selectedStyles.includes(style)) {
          this.selectedStyles = this.selectedStyles.filter((s) => s !== style);
        } else {
          this.selectedStyles.push(style);
        }
      },

      toggleColor(color) {
        if (this.selectedColors.includes(color)) {
          this.selectedColors = this.selectedColors.filter((c) => c !== color);
        } else {
          this.selectedColors.push(color);
        }
      },

      toggleSize(size) {
        if (this.selectedSizes.includes(size)) {
          this.selectedSizes = this.selectedSizes.filter((s) => s !== size);
        } else {
          this.selectedSizes.push(size);
        }
      },

      toggleCollection(collection) {
        if (this.selectedCollections.includes(collection)) {
          this.selectedCollections = this.selectedCollections.filter((c) => c !== collection);
        } else {
          this.selectedCollections.push(collection);
        }
      },

      toggleSale() {
        this.showOnlyOnSale = !this.showOnlyOnSale;
      },


      clearAllFilters() {
        this.selectedStyles = [];
        this.selectedColors = [];
        this.selectedSizes = [];
        this.selectedCollections = [];
        this.showOnlyOnSale = false;
        this.sortOption = 'default';
        this.applyFiltersImmediately();
      },

      applyFiltersImmediately() {
        // Apply filters immediately without closing the drawer
        window.dispatchEvent(
          new CustomEvent('filters:applied', {
            detail: {
              styles: this.selectedStyles,
              colors: this.selectedColors,
              sizes: this.selectedSizes,
              collections: this.selectedCollections,
              showOnlyOnSale: this.showOnlyOnSale,
              sortOption: this.sortOption,
            },
          })
        );
        
        // Also dispatch a general filter change event for the results counter
        window.dispatchEvent(new CustomEvent('filter:changed'));
      },

      applyFilters() {
        // This method is called when user clicks "Apply Filters" button
        // Just close the drawer since filters are already applied
        this.closeDrawer();
      },

      loadCollectionData() {
        // Extract colors, sizes, and tags dynamically from products
        this.extractColors();
        this.extractSizes();
        this.extractStyles();
        this.extractCollections();
      },

      extractColors() {
        const colorMap = new Map();

        // Get all products from the collection
        const products = [
          {% for product in products %}
            {
              id: {{ product.id }},
              title: "{{ product.title | escape }}",
              tags: {{ product.tags | json }},
              options_with_values: [
                {% for option in product.options_with_values %}
                  {
                    name: "{{ option.name }}",
                    values: [
                      {% for value in option.values %}
                        {
                          value: "{{ value }}",
                          swatch: {
                            color: "{{ value.swatch.color | default: '' }}",
                            image: "{{ value.swatch.image | image_url: width: 200 | default: '' }}"
                          }
                        }{% unless forloop.last %},{% endunless %}
                      {% endfor %}
                    ]
                  }{% unless forloop.last %},{% endunless %}
                {% endfor %}
              ]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];

        // Extract colors from product options
        products.forEach(product => {
          product.options_with_values.forEach(option => {
            if (option.name === 'Color') {
              option.values.forEach(colorValue => {
                if (!colorMap.has(colorValue.value)) {
                  colorMap.set(colorValue.value, {
                    name: colorValue.value,
                    value: colorValue.swatch.color || this.getColorFromName(colorValue.value),
                    swatch: colorValue.swatch
                  });
                }
              });
            }
          });
        });

        this.availableColors = Array.from(colorMap.values());
      },

      extractSizes() {
        const sizeSet = new Set();

        // Get all products from the collection
        const products = [
          {% for product in products %}
            {
              id: {{ product.id }},
              options_with_values: [
                {% for option in product.options_with_values %}
                  {
                    name: "{{ option.name }}",
                    values: [
                      {% for value in option.values %}
                        "{{ value }}"{% unless forloop.last %},{% endunless %}
                      {% endfor %}
                    ]
                  }{% unless forloop.last %},{% endunless %}
                {% endfor %}
              ]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];

        // Extract sizes from product options
        products.forEach(product => {
          product.options_with_values.forEach(option => {
            if (option.name === 'Talla' || option.name === 'Size') {
              option.values.forEach(size => {
                sizeSet.add(size);
              });
            }
          });
        });

        this.availableSizes = Array.from(sizeSet).sort();
      },

      extractStyles() {
        const styleSet = new Set();

        // Get all products from the collection
        const products = [
          {% for product in products %}
            {
              id: {{ product.id }},
              tags: {{ product.tags | json }}
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];

        // Extract style tags from products
        products.forEach(product => {
          product.tags.forEach(tag => {
            styleSet.add(tag);
          });
        });

        this.availableStyles = Array.from(styleSet).sort();
      },

      extractCollections() {
        const collectionSet = new Set();

        // Get all products from the collection
        const products = [
          {% for product in products %}
            {
              id: {{ product.id }},
              collections: [
                {% for collection in product.collections %}
                  "{{ collection.title | escape }}"{% unless forloop.last %},{% endunless %}
                {% endfor %}
              ]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ];

        // Extract collections from products
        products.forEach(product => {
          product.collections.forEach(collection => {
            collectionSet.add(collection);
          });
        });

        this.availableCollections = Array.from(collectionSet).sort();
        console.log('Available collections extracted:', this.availableCollections);
      },



      getColorFromName(colorName) {
        const colorMap = {
          'blanco': '#ffffff',
          'negro': '#000000',
          'gris': '#6b7280',
          'rosa': '#ec4899',
          'amarillo': '#eab308',
          'verde': '#22c55e',
          'granate': '#7c2d12',
          'rojo': '#ef4444',
          'azul': '#3b82f6',
          'beige': '#f5f5dc',
          'violeta': '#8b5cf6',
          'marr√≥n': '#a3a3a3',
          'naranja': '#f97316',
          'multicolor': '#ff6b6b'
        };

        return colorMap[colorName.toLowerCase()] || '#f3f4f6';
      },
    };
  }
</script>

<style></style>
