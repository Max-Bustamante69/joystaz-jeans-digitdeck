{% comment %}
  Color Selector Snippet

  Usage:
  {% render 'color-selector',
    product: product,
    selected_color_variable: 'selectedColor',
    click_function: 'selectColor',
    product_number: nil,
    show_main_label: false,
    show_wishlist: false
  %}

  Parameters:
  - product: Product object
  - selected_color_variable: Alpine.js variable name for selected color
  - click_function: Function name to call on color selection
  - product_number: For duo selections (1 or 2), nil for single
  - show_main_label: Show main "Elije un color" label (for single mode)
  - show_wishlist: Show wishlist button (for single mode)
{% endcomment %}

{% for product_option in product.options_with_values %}
  {% if product_option.name == 'Color' %}
    <div class="flex flex-col gap-2">
      {% if show_main_label %}
        <div class="flex items-center justify-between">
          <div class="flex items-center gap-2">
            <p class="body font-semibold">
              Elije un color
              {% if product_number %}
                <p
                  class="body font-semibold text-black/50"
                  x-show="{{ selected_color_variable | remove: "'" }}.color"
                  x-text="{{ selected_color_variable | remove: "'" }}.color"
                ></p>
              {% else %}
                <p
                  class="body font-semibold text-black/50"
                  x-show="{{ selected_color_variable }}"
                  x-text="{{ selected_color_variable }}"
                ></p>
              {% endif %}
            </p>
          </div>
          {% if show_wishlist %}
            <button
              @click="toggleWishlist"
              class="text-gray-600 hover:text-red-500 transition-colors"
              :class="isInWishlist ? 'text-red-500' : ''"
            >
              <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
              </svg>
            </button>
          {% endif %}
        </div>
      {% else %}
        <label class="text-sm font-medium text-gray-700">
          Color:
          {% if product_number %}
            <span
              class="ml-2 font-normal text-gray-500"
              x-show="{{ selected_color_variable | remove: "'" }}.color"
              x-text="{{ selected_color_variable | remove: "'" }}.color"
            ></span>
          {% else %}
            <span
              class="ml-2 font-normal text-gray-500"
              x-show="{{ selected_color_variable }}"
              x-text="{{ selected_color_variable }}"
            ></span>
          {% endif %}
        </label>
      {% endif %}
      <!-- Color Swatches Container with expanded width -->
      <div
        class="relative w-full max-w-[85%]"
        :class="purchaseOption === 'duo' ? 'opacity-40 pointer-events-none' : ''"
        x-data="colorCarousel{{ product.id }}{{ product_number | default: '' }}()"
      >
        {% assign color_count = product_option.values.size %}

        {% if color_count > 4 %}
          <!-- Mobile: Carousel for many colors (5+) -->
          <div class="lg:hidden touch-pan-x">
            <div class="flex items-center gap-1">
              <!-- Previous Arrow -->
              <button
                class="flex-shrink-0 w-7 h-7 flex items-center justify-center transition-all duration-200 touch-manipulation"
                x-ref="prevButton"
                @click.stop="slidePrev()"
                @touchstart.stop
              >
                <svg
                  class="w-4 h-4 text-black drop-shadow-md"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  stroke-width="2.5"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7"/>
                </svg>
              </button>

              <!-- Carousel Container -->
              <div class="flex-1 overflow-hidden color-carousel-container relative">
                <!-- Dynamic fade overlays -->
                <div
                  class="absolute left-0 top-0 bottom-0 w-8 z-10 pointer-events-none transition-opacity duration-300"
                  style="background: linear-gradient(to right, white 0%, rgba(255, 255, 255, 0.8) 40%, rgba(255, 255, 255, 0.3) 80%, transparent 100%);"
                  x-ref="leftFade"
                ></div>
                <div
                  class="absolute right-0 top-0 bottom-0 w-8 z-10 pointer-events-none transition-opacity duration-300"
                  style="background: linear-gradient(to left, white 0%, rgba(255, 255, 255, 0.8) 40%, rgba(255, 255, 255, 0.3) 80%, transparent 100%);"
                  x-ref="rightFade"
                ></div>

                <div
                  class="color-swatches-carousel  swiper-color-{{ product.id }}{{ product_number | default: '' }} w-full"
                  data-carousel-id="color-carousel-{{ product.id }}{{ product_number | default: '' }}"
                  x-ref="colorCarousel"
                >
                  <div class="swiper-wrapper ">
                    {% for product_option_value in product_option.values %}
                      {% comment %} Find a variant with this color to get its image {% endcomment %}
                      {% assign color_variant = null %}
                      {% for variant in product.variants %}
                        {% for option in variant.options %}
                          {% if option == product_option_value %}
                            {% assign color_variant = variant %}
                            {% break %}
                          {% endif %}
                        {% endfor %}
                        {% if color_variant %}
                          {% break %}
                        {% endif %}
                      {% endfor %}

                      <div class="swiper-slide flex-shrink-0" style="width: auto;">
                        <button
                          {% if product_number %}
                            @click="{{ click_function }}({{ product_number }}, '{{ product_option_value }}', {{ color_variant.id }})"
                            :class="{{ selected_color_variable | remove: "'" }}.color === '{{ product_option_value }}' ? ' border-black  ' : 'border-gray-300 hover:border-gray-400'"
                          {% else %}
                            @click="{{ click_function }}('{{ product_option_value }}', '{{ color_variant.featured_image | image_url: width: 800 }}', {{ color_variant.id }})"
                            :class="{{ selected_color_variable }} === '{{ product_option_value }}' ? ' border-black  ' : 'border-gray-300 hover:border-gray-400'"
                          {% endif %}
                          class="relative border-1 transition-all duration-200"
                          {% if color_variant and color_variant.featured_image %}
                            style="width: 68px; height: 86px; background-image: url({{ color_variant.featured_image | image_url: width: 250 }}); background-size: cover; background-position: center; background-repeat: no-repeat;"
                          {% elsif product_option_value.swatch.image %}
                            style="width: 68px; height: 86px; background-image: url({{ product_option_value.swatch.image | image_url: width: 250 }}); background-size: cover; background-position: center; background-repeat: no-repeat;"
                          {% elsif product_option_value.swatch.color %}
                            style="width: 40px; height: 40px; background-color: {{ product_option_value.swatch.color }};"
                          {% else %}
                            style="width: 40px; height: 40px; background-color: #f3f4f6;"
                          {% endif %}
                          title="{{ product_option_value }}"
                        ></button>
                      </div>
                    {% endfor %}
                  </div>
                </div>
              </div>

              <!-- Next Arrow -->
              <button
                class="flex-shrink-0 w-7 h-7 flex items-center justify-center transition-all duration-200 touch-manipulation"
                x-ref="nextButton"
                @click.stop="slideNext()"
                @touchstart.stop
              >
                <svg
                  class="w-4 h-4 text-black drop-shadow-md"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  stroke-width="2.5"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7"/>
                </svg>
              </button>
            </div>
          </div>
          <!-- Desktop: Regular flex layout for many colors -->
          <div class="hidden lg:flex items-center gap-1">
            {% for product_option_value in product_option.values %}
              {% comment %} Find a variant with this color to get its image {% endcomment %}
              {% assign color_variant = null %}
              {% for variant in product.variants %}
                {% for option in variant.options %}
                  {% if option == product_option_value %}
                    {% assign color_variant = variant %}
                    {% break %}
                  {% endif %}
                {% endfor %}
                {% if color_variant %}
                  {% break %}
                {% endif %}
              {% endfor %}

              <button
                {% if product_number %}
                  @click="{{ click_function }}({{ product_number }}, '{{ product_option_value }}', {{ color_variant.id }})"
                  :class="{{ selected_color_variable | remove: "'" }}.color === '{{ product_option_value }}' ? ' border-black  ' : 'border-gray-300 hover:border-gray-400'"
                {% else %}
                  @click="{{ click_function }}('{{ product_option_value }}', '{{ color_variant.featured_image | image_url: width: 800 }}', {{ color_variant.id }})"
                  :class="{{ selected_color_variable }} === '{{ product_option_value }}' ? ' border-black  ' : 'border-gray-300 hover:border-gray-400'"
                {% endif %}
                class="relative border-1 transition-all duration-200"
                {% if color_variant and color_variant.featured_image %}
                  style="width: 68px; height: 86px; background-image: url({{ color_variant.featured_image | image_url: width: 250 }}); background-size: cover; background-position: center; background-repeat: no-repeat;"
                {% elsif product_option_value.swatch.image %}
                  style="width: 68px; height: 86px; background-image: url({{ product_option_value.swatch.image | image_url: width: 250 }}); background-size: cover; background-position: center; background-repeat: no-repeat;"
                {% elsif product_option_value.swatch.color %}
                  style="width: 40px; height: 40px; background-color: {{ product_option_value.swatch.color }};"
                {% else %}
                  style="width: 40px; height: 40px; background-color: #f3f4f6;"
                {% endif %}
                title="{{ product_option_value }}"
              ></button>
            {% endfor %}
          </div>
        {% else %}
          <!-- Regular flex layout for few colors (4 or less) -->
          <div class="flex items-center gap-1">
            {% for product_option_value in product_option.values %}
              {% comment %} Find a variant with this color to get its image {% endcomment %}
              {% assign color_variant = null %}
              {% for variant in product.variants %}
                {% for option in variant.options %}
                  {% if option == product_option_value %}
                    {% assign color_variant = variant %}
                    {% break %}
                  {% endif %}
                {% endfor %}
                {% if color_variant %}
                  {% break %}
                {% endif %}
              {% endfor %}

              <button
                {% if product_number %}
                  @click="{{ click_function }}({{ product_number }}, '{{ product_option_value }}', {{ color_variant.id }})"
                  :class="{{ selected_color_variable | remove: "'" }}.color === '{{ product_option_value }}' ? ' border-black  ' : 'border-gray-300 hover:border-gray-400'"
                {% else %}
                  @click="{{ click_function }}('{{ product_option_value }}', '{{ color_variant.featured_image | image_url: width: 800 }}', {{ color_variant.id }})"
                  :class="{{ selected_color_variable }} === '{{ product_option_value }}' ? ' border-black  ' : 'border-gray-300 hover:border-gray-400'"
                {% endif %}
                class="relative border-1 transition-all duration-200"
                {% if color_variant and color_variant.featured_image %}
                  style="width: 68px; height: 86px; background-image: url({{ color_variant.featured_image | image_url: width: 250 }}); background-size: cover; background-position: center; background-repeat: no-repeat;"
                {% elsif product_option_value.swatch.image %}
                  style="width: 68px; height: 86px; background-image: url({{ product_option_value.swatch.image | image_url: width: 250 }}); background-size: cover; background-position: center; background-repeat: no-repeat;"
                {% elsif product_option_value.swatch.color %}
                  style="width: 40px; height: 40px; background-color: {{ product_option_value.swatch.color }};"
                {% else %}
                  style="width: 40px; height: 40px; background-color: #f3f4f6;"
                {% endif %}
                title="{{ product_option_value }}"
              ></button>
            {% endfor %}
          </div>
        {% endif %}
      </div>
    </div>
  {% endif %}
{% endfor %}

<script>
  function colorCarousel{{ product.id }}{{ product_number | default: '' }}() {
    return {
      swiper: null,

      init() {
        this.$nextTick(() => {
          this.initializeCarousel();
        });
      },

      initializeCarousel() {
        // Only initialize on mobile devices
        if (window.innerWidth >= 1024) return;

        const carouselElement = this.$refs.colorCarousel;
        if (!carouselElement || typeof Swiper === 'undefined') return;

        // Check if already initialized
        if (carouselElement.swiper) return;

        // Initialize Swiper
        this.swiper = new Swiper(carouselElement, {
          direction: 'horizontal',
          slidesPerView: 'auto',
          spaceBetween: 10,
          loop: false,
          centeredSlides: false,
          slidesOffsetBefore: 0,
          slidesOffsetAfter: 20,
          grabCursor: true,
          touchRatio: 1,
          touchAngle: 45,
          simulateTouch: true,
          allowTouchMove: true,
          touchStartPreventDefault: false,
          touchMoveStopPropagation: false,
          preventInteractionOnTransition: false,
          speed: 300,
          freeMode: {
            enabled: true,
            sticky: false,
            momentum: true,
            momentumRatio: 0.6,
            momentumVelocityRatio: 0.6,
            momentumBounce: false,
            minimumVelocity: 0.02
          },
          resistance: true,
          resistanceRatio: 0.85,
          navigation: {
            nextEl: this.$refs.nextButton,
            prevEl: this.$refs.prevButton,
          },
          on: {
            init: () => {
              // Set initial fade states
              setTimeout(() => {
                this.updateArrowStates();
              }, 50);
            },
            slideChange: () => {
              this.updateArrowStates();
            },
            reachBeginning: () => {
              this.updateArrowStates();
            },
            reachEnd: () => {
              this.updateArrowStates();
            },
            progress: () => {
              this.updateArrowStates();
            },
            touchStart: () => {
              // Disable arrows during touch interaction
              const prevButton = this.$refs.prevButton;
              const nextButton = this.$refs.nextButton;
              if (prevButton) prevButton.style.pointerEvents = 'none';
              if (nextButton) nextButton.style.pointerEvents = 'none';
            },
            touchEnd: () => {
              // Re-enable arrows after touch interaction
              setTimeout(() => {
                this.updateArrowStates();
              }, 100);
            }
          }
        });

        // Store swiper instance
        carouselElement.swiper = this.swiper;
      },

      updateArrowStates() {
        if (!this.swiper) return;

        const prevButton = this.$refs.prevButton;
        const nextButton = this.$refs.nextButton;
        const leftFade = this.$refs.leftFade;
        const rightFade = this.$refs.rightFade;

        // Update arrow states
        if (prevButton) {
          if (this.swiper.isBeginning) {
            prevButton.style.opacity = '0.3';
            prevButton.style.pointerEvents = 'none';
          } else {
            prevButton.style.opacity = '1';
            prevButton.style.pointerEvents = 'auto';
          }
        }

        if (nextButton) {
          if (this.swiper.isEnd) {
            nextButton.style.opacity = '0.3';
            nextButton.style.pointerEvents = 'none';
          } else {
            nextButton.style.opacity = '1';
            nextButton.style.pointerEvents = 'auto';
          }
        }

        // Update fade states
        if (leftFade) {
          leftFade.style.opacity = this.swiper.isBeginning ? '0' : '1';
        }

        if (rightFade) {
          rightFade.style.opacity = this.swiper.isEnd ? '0' : '1';
        }
      },

      slidePrev() {
        if (this.swiper && !this.swiper.isBeginning) {
          this.swiper.slidePrev();
        }
      },

      slideNext() {
        if (this.swiper && !this.swiper.isEnd) {
          this.swiper.slideNext();
        }
      },

      destroy() {
        if (this.swiper) {
          this.swiper.destroy(true, true);
          this.swiper = null;
        }
      }
    }
  }
</script>

<style>
  /* Color Carousel Improvements */
  .color-swatches-carousel {
    overflow: hidden;
    padding-right: 10px; /* Extra space for last slide */
  }

  .color-swatches-carousel .swiper-wrapper {
    align-items: center;
    transition-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);
    padding-right: 20px; /* Ensure last slide is fully visible */
  }

  .color-swatches-carousel .swiper-slide {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  .color-swatches-carousel button {
    transition: transform 0.2s ease, border-color 0.2s ease;
    will-change: transform;
  }

  .color-swatches-carousel button:active {
    transform: scale(0.95);
  }

  /* Prevent layout shifts during interaction */
  .color-swatches-carousel .swiper-slide button {
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    transform: translateZ(0);
    -webkit-transform: translateZ(0);
  }

  /* Enhanced fade effect that adapts to background */
  .color-carousel-container {
    position: relative;
  }
</style>
