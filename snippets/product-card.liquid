{% comment %}
  Product Card Snippet
  Features:
  - Product image with color variant switching
  - Product badges (New, Best Seller)
  - Wishlist heart icon
  - Star rating
  - Product name and price
  - Color swatches with image switching
  - Size selector grid that appears on plus click
  - Add to cart functionality
{% endcomment %}

<div class="product-card relative group w-full" x-data="productCard({{ product.id }})">
  <!-- Product Image Container -->
  <div class="relative aspect-[3/4] overflow-hidden bg-gray-100 mb-4 w-full group/image">
    <!-- Product Image Carousel -->
    {% if product.images.size > 1 %}
      <div
        class="product-image-carousel glide-product-images-{{ product.id }}-{{ section.id }} w-full h-full pointer-events-none"
        data-product-id="{{ product.id }}"
        data-section-id="{{ section.id }}"
        data-carousel-type="product-images"
        id="product-images-carousel-{{ product.id }}-{{ section.id }}"
      >
        <div class="glide__track" data-glide-el="track">
          <ul class="glide__slides">
            {% for image in product.images %}
              <li class="glide__slide">
                <img
                  src="{{ image | image_url: width: 400 }}"
                  alt="{{ product.title }} - Image {{ forloop.index }}"
                  class="w-full h-full object-cover"
                  width="400"
                  height="400"
                  loading="{% if forloop.first %}eager{% else %}lazy{% endif %}"
                >
              </li>
            {% endfor %}
          </ul>
        </div>

        <!-- Navigation Arrows -->
        <div class="absolute inset-0 pointer-events-none" data-glide-el="controls">
          <button
            class="absolute left-2 top-1/2 -translate-y-1/2 w-8 h-8 bg-transparent border border-white rounded flex items-center justify-center shadow-md opacity-0 group-hover/image:opacity-100 transition-all duration-200 hover:bg-white/10 z-50 pointer-events-auto cursor-pointer"
            data-glide-dir="<"
            data-carousel-id="product-images-carousel-{{ product.id }}-{{ section.id }}"
            type="button"
          >
            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
            </svg>
          </button>
          <button
            class="absolute right-2 top-1/2 -translate-y-1/2 w-8 h-8 bg-transparent border border-white rounded flex items-center justify-center shadow-md opacity-0 group-hover/image:opacity-100 transition-all duration-200 hover:bg-white/10 z-50 pointer-events-auto cursor-pointer"
            data-glide-dir=">"
            data-carousel-id="product-images-carousel-{{ product.id }}-{{ section.id }}"
            type="button"
          >
            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
            </svg>
          </button>
        </div>
      </div>
    {% else %}
      <!-- Single Image -->
      <img
        src="{{ product.featured_image | image_url: width: 400 }}"
        alt="{{ product.title }}"
        class="w-full h-full object-cover"
        width="400"
        height="400"
        loading="eager"
      >
    {% endif %}

    <!-- Product Badges -->
    {% if show_badges %}
      <div class="absolute top-2 left-2 flex flex-col gap-1 z-30">
        {% if product.tags contains 'new' %}
          <span class="bg-white text-black text-xs px-2 py-1 rounded font-medium">Nuevo</span>
        {% endif %}
        {% if product.tags contains 'best-seller' or product.tags contains 'mas-vendido' %}
          <span class="bg-white text-black text-xs px-2 py-1 rounded font-medium">MÃ¡s vendido</span>
        {% endif %}
      </div>
    {% endif %}

    <!-- Wishlist Heart Icon -->
    <button
      class="absolute top-3 right-3 w-8 h-8 bg-white rounded-full flex items-center justify-center shadow-md hover:shadow-lg transition-shadow z-30"
      @click.stop="toggleWishlist"
      :class="{ 'text-red-500': isInWishlist }"
    >
      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
        <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
      </svg>
    </button>

    <!-- Product Link Overlay (for clicking to go to product page) - positioned behind interactive elements -->
    <a
      href="{{ product.url }}"
      class="absolute inset-0 z-20 pointer-events-auto"
      aria-label="View {{ product.title }}"
    ></a>
  </div>

  <!-- Product Information -->
  <div class="space-y-2 w-full">
    <!-- Star Rating and Plus Icon -->
    {% if show_rating %}
      <div class="flex items-center justify-between">
        <div class="flex items-center gap-1">
          <div class="flex text-yellow-400">
            {% assign rating = product.metafields.reviews.rating.value | default: 3.5 %}
            {% assign full_stars = rating | floor %}
            {% assign next_star = full_stars | plus: 1 %}
            {% for i in (1..5) %}
              {% if i <= full_stars %}
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              {% elsif i == next_star and rating > full_stars %}
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <defs>
                    <linearGradient id="half-star-{{ product.id }}-{{ i }}">
                      <stop offset="50%" stop-color="currentColor"/>
                      <stop offset="50%" stop-color="#e5e7eb"/>
                    </linearGradient>
                  </defs>
                  <path fill="url(#half-star-{{ product.id }}-{{ i }})" d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              {% else %}
                <svg class="w-4 h-4" fill="#e5e7eb" viewBox="0 0 24 24">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              {% endif %}
            {% endfor %}
          </div>
          <span class="text-sm text-gray-500">({{ product.metafields.reviews.rating.value | default: 0 }})</span>
        </div>
        {% if show_size_selector %}
          <button
            class="text-gray-600 hover:text-gray-800 transition-colors"
            @click="toggleSizeSelector"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
            </svg>
          </button>
        {% endif %}
      </div>
    {% endif %}

    <!-- Product Name and Price -->
    <div class="flex items-start justify-between">
      <h3 class="font-semibold text-gray-900 text-sm truncate max-w-[60%]">{{ product.title }}</h3>
      <div class="flex flex-col items-end">
        <span class="font-bold text-gray-900 text-sm">
          {{ product.price | money }}
        </span>
        {% if product.compare_at_price > product.price %}
          <span class="text-xs text-gray-500 line-through">
            {{ product.compare_at_price | money }}
          </span>
        {% endif %}
      </div>
    </div>

    <!-- Color Swatches -->
    {% if show_color_swatches and product.has_only_default_variant == false %}
      <div class="flex gap-2 mt-2">
        {% for variant in product.variants %}
          {% if variant.option1 != blank %}
            {% assign color_name = variant.option1 | downcase %}
            {% assign color_value = '' %}
            {% case color_name %}
              {% when 'negro', 'black' %}
                {% assign color_value = '#000000' %}
              {% when 'blanco', 'white' %}
                {% assign color_value = '#ffffff' %}
              {% when 'gris', 'gray', 'grey' %}
                {% assign color_value = '#808080' %}
              {% when 'azul', 'blue' %}
                {% assign color_value = '#0000ff' %}
              {% when 'rojo', 'red' %}
                {% assign color_value = '#ff0000' %}
              {% when 'verde', 'green' %}
                {% assign color_value = '#008000' %}
              {% when 'amarillo', 'yellow' %}
                {% assign color_value = '#ffff00' %}
              {% when 'rosa', 'pink' %}
                {% assign color_value = '#ffc0cb' %}
              {% when 'morado', 'purple' %}
                {% assign color_value = '#800080' %}
              {% when 'naranja', 'orange' %}
                {% assign color_value = '#ffa500' %}
              {% when 'marron', 'brown' %}
                {% assign color_value = '#a52a2a' %}
              {% when 'beige', 'stone' %}
                {% assign color_value = '#f5f5dc' %}
              {% else %}
                {% assign color_value = color_name %}
            {% endcase %}
            <button
              class="w-6 h-6 rounded-full border-2 transition-all duration-200"
              :class="selectedVariantId === {{ variant.id }} ? 'border-gray-400 scale-110' : 'border-gray-300 hover:border-gray-400'"
              @click="selectVariant({{ variant.id }}, '{{ variant.featured_image | image_url: width: 400 }}')"
              style="background-color: {{ color_value }};"
              :title="'{{ variant.option1 }}'"
            ></button>
          {% endif %}
        {% endfor %}
      </div>
    {% endif %}
  </div>

  <!-- Size Selector Grid -->
  {% if show_size_selector %}
    <div
      x-show="showSizeSelector"
      x-transition:enter="transition ease-out duration-300"
      x-transition:enter-start="opacity-0 transform translate-y-4"
      x-transition:enter-end="opacity-100 transform translate-y-0"
      x-transition:leave="transition ease-in duration-200"
      x-transition:leave-start="opacity-100 transform translate-y-0"
      x-transition:leave-end="opacity-0 transform translate-y-4"
      class="absolute bottom-full right-0 mb-2 bg-white border border-gray-200 rounded-lg shadow-lg p-3 z-10 min-w-48"
    >
      <div class="grid grid-cols-3 gap-2">
        {% for variant in product.variants %}
          {% if variant.option2 != blank %}
            <button
              class="px-3 py-2 text-sm border border-gray-300 rounded hover:bg-gray-50 transition-colors"
              :class="selectedSize === '{{ variant.option2 }}' ? 'bg-gray-800 text-white border-gray-800' : ''"
              @click="selectSize('{{ variant.option2 }}', {{ variant.id }})"
            >
              {{ variant.option2 }}
            </button>
          {% endif %}
        {% endfor %}
      </div>
    </div>
  {% endif %}
</div>

<style>
  .product-image-carousel {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .product-image-carousel .glide__track {
    overflow: hidden;
    width: 100%;
    height: 100%;
  }

  .product-image-carousel .glide__slides {
    display: flex;
    align-items: stretch;
    height: 100%;
  }

  .product-image-carousel .glide__slide {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    flex-shrink: 0;
  }

  .product-image-carousel .glide__slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }

  /* Ensure standardized card sizing */
  .product-card {
    width: 100%;
    max-width: 100%;
    min-height: 0;
    display: flex;
    flex-direction: column;
  }

  .product-card .relative.aspect-\[3\/4\] {
    width: 100%;
    height: 0;
    padding-bottom: 133.33%; /* Creates a 3:4 aspect ratio */
    position: relative;
    flex-shrink: 0;
  }

  .product-card .relative.aspect-\[3\/4\] > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  /* Ensure heart icon stays small */
  .product-card button[class*='absolute'] {
    width: 32px !important;
    height: 32px !important;
    min-width: 32px !important;
    min-height: 32px !important;
    max-width: 32px !important;
    max-height: 32px !important;
  }

  /* Specific rule for wishlist button */
  .product-card button[class*='w-8'] {
    width: 32px !important;
    height: 32px !important;
    min-width: 32px !important;
    min-height: 32px !important;
    max-width: 32px !important;
    max-height: 32px !important;
    flex-shrink: 0 !important;
  }

  /* Ensure carousel maintains aspect ratio */
  .product-image-carousel {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  /* Ensure single images also maintain aspect ratio */
  .product-card .relative.aspect-\[3\/4\] > img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }
</style>

<script>
  function productCard(productId) {
    return {
      productId: productId,
      selectedVariantId: {{ product.selected_or_first_available_variant.id }},
      selectedVariantImage: null,
      selectedSize: null,
      showSizeSelector: false,
      isInWishlist: false,

      selectVariant(variantId, imageUrl) {
        this.selectedVariantId = variantId;
        if (imageUrl && imageUrl !== '') {
          this.selectedVariantImage = imageUrl;
        }
      },

      toggleSizeSelector() {
        this.showSizeSelector = !this.showSizeSelector;
      },

      selectSize(size, variantId) {
        this.selectedSize = size;
        this.selectedVariantId = variantId;
        this.addToCart(variantId);
        this.showSizeSelector = false;
      },

      async addToCart(variantId) {
        try {
          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              items: [{
                id: variantId,
                quantity: 1
              }]
            })
          });

          if (response.ok) {
            // Trigger cart update event
            document.dispatchEvent(new CustomEvent('cart:updated'));
          }
        } catch (error) {
          console.error('Error adding to cart:', error);
        }
      },

      toggleWishlist() {
        this.isInWishlist = !this.isInWishlist;
        // Here you would typically make an API call to add/remove from wishlist
      },

             // Initialize product image carousel
       init() {
         this.$nextTick(() => {
           const carouselElement = this.$el.querySelector('.product-image-carousel');
           if (carouselElement && typeof Glide !== 'undefined') {
             const carouselId = carouselElement.id;

             // Check if this carousel is already initialized
             if (carouselElement.glideInstance) {
               return;
             }

             const glide = new Glide(carouselElement, {
               type: 'carousel',
               perView: 1,
               autoplay: false,
               rewind: false,
               animationDuration: 600,
               animationTimingFunc: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
               touchRatio: 1,
               dragThreshold: 20,
             });

             // Store the glide instance on the element to avoid conflicts
             carouselElement.glideInstance = glide;

                                                                                                              // Override the default arrow behavior to ensure isolation
               glide.on(['mount.after'], () => {
                 const arrows = carouselElement.querySelectorAll('[data-glide-dir]');
                 arrows.forEach(arrow => {
                   // Remove any existing event listeners
                   if (arrow.glideClickHandler) {
                     arrow.removeEventListener('click', arrow.glideClickHandler, true);
                   }

                   // Create new event handler
                   arrow.glideClickHandler = (e) => {
                     e.preventDefault();
                     e.stopPropagation();
                     e.stopImmediatePropagation();

                     const direction = arrow.getAttribute('data-glide-dir');
                     if (direction === '<') {
                       glide.go('<');
                     } else if (direction === '>') {
                       glide.go('>');
                     }

                     return false;
                   };

                   // Add the event listener with capture phase
                   arrow.addEventListener('click', arrow.glideClickHandler, true);
                 });
               });

             glide.mount();
           }
         });
       }
    }
  }
</script>
